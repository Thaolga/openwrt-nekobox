<%#
	Argon is a clean HTML5 theme for LuCI. It is based on luci-theme-material Argon Template

	luci-theme-argon
	Copyright 2020 Jerrykuku <jerrykuku@qq.com>

	Have a bug? Please create an issue here on GitHub!
	https://github.com/jerrykuku/luci-theme-argon/issues

	luci-theme-material:
	Copyright 2015 Lutty Yang <lutty@wcan.in>

	Argon Theme
	https://demos.creative-tim.com/argon-dashboard/index.html

	Licensed to the public under the Apache License 2.0
-%>

<%
	local sys = require "luci.sys"
	local util = require "luci.util"
	local http = require "luci.http"
	local disp = require "luci.dispatcher"
	local ver = require "luci.version"
        local mode = 'normal'
	local boardinfo = util.ubus("system", "board")

	local node = disp.context.dispatched

	local fs = require "nixio.fs"
	local nutil = require "nixio.util"
	local uci = require 'luci.model.uci'.cursor()

	-- send as HTML5
	http.prepare_content("text/html")

	-- Custom settings
	local mode = 'normal'
	local dark_css = fs.readfile('/www/luci-static/spectra/css/dark.css')
	local bar_color = '#5e72e4'
	local primary, dark_primary, blur_radius, blur_radius_dark, blur_opacity
	if fs.access('/etc/config/spectra') then
		primary = uci:get_first('spectra', 'global', 'primary')
		dark_primary = uci:get_first('spectra', 'global', 'dark_primary')
		blur_radius = uci:get_first('spectra', 'global', 'blur')
		blur_radius_dark = uci:get_first('spectra', 'global', 'blur_dark')
		blur_opacity = uci:get_first('spectra', 'global', 'transparency')
		blur_opacity_dark = uci:get_first('spectra', 'global', 'transparency_dark')
		mode = uci:get_first('spectra', 'global', 'mode')
		bar_color = mode == 'dark' and dark_primary or primary
	end

	-- Brand name
	local brand_name = boardinfo.hostname or "?"
-%>

<!DOCTYPE html>
<html lang="<%=luci.i18n.context.lang%>">

<head>
<style>
.navbar-container {
    align-items: center;
    display: flex;
    height: 60px;
    justify-content: space-between;
    padding-left: 250px;
    padding-right: 5px;
    width: 100%;
}

.navbar-left,
.navbar-right {
    align-items: center;
    display: flex;
    gap: 15px;
}

@media (max-width: 768px) {
    .navbar-container {
        padding-left: 5px;
    }
    .navbar-left,
    .navbar-right {
        gap: 11.5px;
    }
}

.ip-container {
    align-items: center;
    display: flex;
    gap: 6px;
    white-space: nowrap;
}

.ip-container img {
    border-radius: 4px;
    cursor: pointer;
    height: 20px;
    object-fit: cover;
    width: 32px;
}

.ip-container .ip-text {
    display: flex;
    flex-direction: column;
    justify-content: center;
    line-height: 1.2;
}

.ip-container #d-ip {
    color: #18a558;
    font-family: 'Comic Neue', cursive !important;
    font-size: 14px;
    font-weight: 600;
}

.ip-container #ipip {
    color: #e83e8c;
    font-family: 'Comic Neue', cursive !important;
    font-size: 13px;
}

@media (max-width: 768px) {
    .ip-container {
        display: none !important;
    }
}

.nav-icon {
    align-items: center;
    background: transparent;
    border-radius: 6px;
    box-shadow: 0 4px 4px 2px #00ffff9a;
    cursor: pointer;
    display: flex;
    height: 40px;
    justify-content: center;
    overflow: hidden;
    position: relative;
    transition: transform 0.2s ease, box-shadow 0.2s ease;
    width: 40px;
}

.nav-icon img {
    height: 40px;
    left: 50%;
    object-fit: cover;
    position: absolute;
    top: 50%;
    transform: translate(-50%, -50%);
    transition: filter 0.2s ease-in-out;
    width: 40px;
}

.nav-icon:hover img {
    filter: drop-shadow(0 0 5px cyan);
}

.site-icon {
    cursor: pointer;
    height: 48px;
    position: relative;
    width: 48px;
}

.site-icon img {
    border-radius: 50%;
    height: 48px;
    left: 0;
    object-fit: cover;
    position: absolute;
    top: 0;
    width: 48px;
}

.site-icon img#github-normal,
.site-icon img#github-gray {
    height: 55px;
    width: 55px;
}

.navbar-right .site-icon {
    position: relative;
    top: 3px;
}

@media (max-width: 1044px) {
    .site-icon {
        display: none !important;
    }
}

#result-overlay {
    backdrop-filter: blur(4px);
    background: rgba(0, 0, 0, 0.5);
    border-radius: 8px;
    color: #fff;
    display: none;
    font-size: 18px;
    font-weight: bold;
    right: 2%;
    top: 50%;
    max-width: 90%;
    padding: 16px 8px;
    pointer-events: none;
    position: fixed;
    text-align: center;
    transform: translateY(-50%);
    word-break: break-word;
    z-index: 9999;
    writing-mode: vertical-rl;
    text-orientation: mixed;
    height: auto;
    white-space: nowrap;
}

@font-face {
    font-display: swap;
    font-family: 'Fredoka One';
    font-style: normal;
    font-weight: 700;
    src: url('/luci-static/spectra/fonts/fredoka-v16-latin-700.woff2') format('woff2');
}

@keyframes textColorChange {
    0%, 100% { color: #28edf0; }
    50% { color: #28edf0; }
}

.royal-style {
    align-items: center;
    animation: textColorChange 3s infinite linear;
    box-sizing: border-box;
    color: #28edf0;
    display: inline-flex;
    font-family: 'Fredoka One', cursive !important;
    font-size: 35px;
    font-weight: 700;
    justify-content: center;
    letter-spacing: 2px;
    line-height: 1.1;
    min-width: 220px;
    padding: 2px 5px;
    text-decoration: none !important;
    text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.2),
                -2px -2px 5px rgba(255, 255, 255, 0.5);
    transition: all 0.3s;
    -webkit-text-stroke: 1px rgba(0, 0, 0, 0.5);
}

.royal-style:hover {
    filter: drop-shadow(2px 2px 3px rgba(0, 0, 0, 0.3));
    transform: skew(-5deg);
}

.inner {
    display: none !important;
}

@media screen and (max-width: 600px) {
    .block h4 {
        font-size: 0.7rem !important;
    }
    .block {
        padding: 0.3rem !important;
    }
    .block img {
        width: 36px !important;
    }
}

@supports (-webkit-touch-callout: none) {
    .main {
        min-height: 100vh;
    }
}

@media (max-width: 768px) {
    .main {
        min-height: 100vh;
    }
}
</style>
    <meta charset="utf-8">
    <title>
        <%=striptags( (boardinfo.hostname or "?") .. ( (node and node.title) and ' - ' .. translate(node.title) or '')) %>
        - LuCI</title>
    <meta content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0" name="viewport" />
    <meta name="format-detection" content="telephone=no, email=no" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="mobile-web-app-capable" content="yes">
    <meta name="x5-fullscreen" content="true">
    <meta name="full-screen" content="yes">
    <meta name="x5-page-mode" content="app">
    <meta name="browsermode" content="application">
    <meta name="msapplication-tap-highlight" content="no">
    <meta name="msapplication-TileColor" content="<%=bar_color%>">
    <meta name="application-name" content="<%=striptags( (boardinfo.hostname or "?") ) %> - LuCI">
    <meta name="apple-mobile-web-app-title" content="<%=striptags( (boardinfo.hostname or "?") ) %> - LuCI">
    <link rel="apple-touch-icon" sizes="60x60" href="<%=media%>/icon/apple-icon-60x60.png">
    <link rel="apple-touch-icon" sizes="72x72" href="<%=media%>/icon/apple-icon-72x72.png">
    <link rel="apple-touch-icon" sizes="144x144" href="<%=media%>/icon/apple-icon-144x144.png">
    <link rel="icon" type="image/png" sizes="192x192" href="<%=media%>/icon/android-icon-192x192.png">
    <link rel="icon" type="image/png" sizes="32x32" href="<%=media%>/icon/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="96x96" href="<%=media%>/icon/favicon-96x96.png">
    <link rel="icon" type="image/png" sizes="16x16" href="<%=media%>/icon/favicon-16x16.png">
    <link rel="manifest" href="<%=media%>/icon/manifest.json"  crossorigin="use-credentials">
    <meta name="msapplication-TileColor" content="<%=bar_color%>">
    <meta name="msapplication-TileImage" content="<%=media%>/icon/ms-icon-144x144.png">
    <meta name="theme-color" content="<%=bar_color%>">
    <link rel="stylesheet" href="<%=media%>/css/cascade.css?v=2.2.10.10">
    <script src="/luci-static/spectra/js/custom.js"></script>
    <link href="/luci-static/spectra/css/bootstrap-icons.css" rel="stylesheet">
    <style title="text/css">
        <% if mode == 'normal' then %>
            @media (prefers-color-scheme: dark) {
                <%=dark_css%>
            }
        <% elseif mode == 'dark' then %>
            <%=dark_css%>
        <% end -%>
        <% if fs.access('/etc/config/spectra') then %>
        :root {
            --primary: <%=primary%>;
            --dark-primary: <%=dark_primary%>;
            --blur-radius:<%=blur_radius%>px;
            --blur-opacity:<%=blur_opacity%>;
            --blur-radius-dark:<%=blur_radius_dark%>px;
            --blur-opacity-dark:<%=blur_opacity_dark%>;
        }
        <% end -%>
    </style>
	<link rel="shortcut icon" href="<%=media%>/favicon.ico">
        <link rel="stylesheet" href="<%=resource%>/spectra/easeicon.css?v=2.4">
	<% if node and node.css then %>
	<link rel="stylesheet" href="<%=resource%>/<%=node.css%>">
	<% end -%>
	<% if css then %>
	<style title="text/css">
		<%=css %>
	</style>
	<% end -%>
	<script src="<%=media%>/js/polyfill.min.js?v=2.2.10.10"></script>
	<script src="<%=url('admin/translations', luci.i18n.context.lang)%>?v=<%=ver.luciversion%>"></script>
	<script src="<%=resource%>/cbi.js?v=<%=ver.luciversion%>"></script>
	<script src="<%=resource%>/luci.js?v=<%=ver.luciversion%>"></script>
	<script src="<%=media%>/js/jquery.min.js?v=3.5.1"></script>
</head>

<body
	theme="<%=mode%>"
	class="lang_<%=luci.i18n.context.lang%> <% if node then %><%= striptags( node.title ) %><% end %> <% if luci.dispatcher.context.authsession then %>logged-in<% end %>"
	data-page="<%= table.concat(disp.context.requestpath, "-") %>">

<div class="wrapper">
		<span></span>
		<span></span>
		<span></span>
		<span></span>
		<span></span>
		<span></span>
		<span></span>
		<span></span>
		<span></span>
		<span></span>
		<span></span>
		<span></span>
		<span></span>
</div>
<header>
    <div class="fill">
        <div class="container">
            <a class="showSide"></a>
        <div class="navbar-container">
            <div class="navbar-left">
                <div class="nav-icon">
                    <a id="oc" href="/cgi-bin/luci/admin/services/openclash">
                        <img src="<%=media%>/navbar/clash.gif" alt="OpenClash">
                    </a>
                </div>
                <div class="nav-icon">
                    <a href="/nekobox" target="_blank">
                        <img src="<%=media%>/navbar/yacd.gif" alt="NekoBox">
                    </a>
                </div>
                <div class="nav-icon">
                    <a href="/luci-static/spectra/bgm/index.php" target="_blank">
                        <img src="<%=media%>/navbar/tinyfm.gif" alt="TinyFM">
                    </a>
                </div>
                <div class="nav-icon">
                    <a href="/cgi-bin/luci/admin/status/realtime">
                        <img src="<%=media%>/navbar/netmon.gif" alt="NetMon">
                    </a>
                </div>
                <div class="nav-icon">
                    <a href="/cgi-bin/luci/admin/services/ttyd">
                        <img src="<%=media%>/navbar/terminal.gif" alt="TTYD">
                    </a>
                </div>
                <div class="nav-icon">
                    <a href="/cgi-bin/luci/admin/services/homeproxy">
                        <img src="<%=media%>/navbar/modem.gif" alt="HomeProxy">
                    </a>
                </div>
                <div class="nav-icon">
                    <a href="/cgi-bin/luci/admin/network/network">
                        <img src="<%=media%>/navbar/interface.gif" alt="Interface">
                    </a>
                </div>
            </div>
            <div class="ip-container" style="display: none;">
                <img id="flag" src="path/to/flag.png" alt="IP Flag" title="<%:Click to refresh IP address%>">
                <div class="ip-text">
                    <span id="d-ip">Checking...</span>
                    <span id="ipip"></span>
                </div>
            </div>

            <div id="result-overlay"></div>

            <div id="result" class="navbar-right">
                <div class="site-icon" onclick="pingHost('baidu', 'Baidu', 'https://www.baidu.com')">
                    <img src="/luci-static/ipip/img/site_icon_01.png" id="baidu-normal" alt="Baidu">
                    <img src="/luci-static/ipip/img/site_icon1_01.png" id="baidu-gray" alt="Baidu">
                </div>
                <div class="site-icon" onclick="pingHost('taobao', 'Taobao', 'https://www.taobao.com')">
                    <img src="/luci-static/ipip/img/site_icon_02.png" id="taobao-normal" alt="Taobao">
                    <img src="/luci-static/ipip/img/site_icon1_02.png" id="taobao-gray" alt="Taobao">
                </div>
                <div class="site-icon" onclick="pingHost('google', 'Google', 'https://www.google.com')">
                    <img src="/luci-static/ipip/img/site_icon_03.png" id="google-normal" alt="Google">
                    <img src="/luci-static/ipip/img/site_icon1_03.png" id="google-gray" alt="Google">
                </div>
                <div class="site-icon" onclick="pingHost('youtube', 'YouTube', 'https://www.youtube.com')">
                    <img src="/luci-static/ipip/img/site_icon_04.png" id="youtube-normal" alt="YouTube">
                    <img src="/luci-static/ipip/img/site_icon1_04.png" id="youtube-gray" alt="YouTube">
                </div>
            </div>
        </div>
    </div>
</div>
<script type="text/javascript">
const _IMG = '/luci-static/ipip/';
const translate = {};

let cachedIP = null;
let translationEnabled = localStorage.getItem('translationEnabled') !== 'false';
let currentLanguage = 'zh-CN';

async function getCurrentLanguage() {
    try {
        const response = await fetch('/luci-static/spectra/bgm/language.txt', {cache: 'no-store'});
        if (response.ok) {
            const lang = await response.text();
            return lang.trim() || 'zh-CN';
        }
    } catch (error) {
        console.error('Failed to read language file:', error);
    }
    return 'zh-CN';
}

async function getRealTimeLanguage() {
    return await getCurrentLanguage();
}

async function onLanguageChange() {
    console.log('Language changed, refreshing display');
    
    const keys = Object.keys(localStorage);
    keys.forEach(key => {
        if (key.startsWith('trans_')) {
            localStorage.removeItem(key);
        }
    });
    
    if (cachedIP) {
        await myAppIP.Ipip(cachedIP, 'ipip');
    }
}

function setupLanguageChangeListener() {
    let lastLanguage = 'zh-CN';

    setInterval(async () => {
        const currentLang = await getRealTimeLanguage();
        if (currentLang !== lastLanguage) {
            console.log('Language changed detected:', currentLang);
            lastLanguage = currentLang;
            onLanguageChange();
        }
    }, 1000);
}

function createTranslationToggle() {
    const toggle = document.createElement('i');
    toggle.className = 'bi bi-translate translation-toggle';
    toggle.style.marginLeft = '8px';
    toggle.style.cursor = 'pointer';
    toggle.style.opacity = '0';
    toggle.style.transition = 'opacity 0.3s';
    toggle.style.color = translationEnabled ? '#28a745' : '#6c757d';

    toggle.addEventListener('click', async () => {
        translationEnabled = !translationEnabled;
        localStorage.setItem('translationEnabled', translationEnabled);
        toggle.style.color = translationEnabled ? '#28a745' : '#6c757d';
        if (cachedIP) await myAppIP.Ipip(cachedIP, 'ipip');
    });

    return toggle;
}

function setupHoverEffect() {
    const ipContainer = document.getElementById('d-ip');
    const toggle = document.querySelector('.translation-toggle');
    if (ipContainer && toggle) {
        ipContainer.addEventListener('mouseenter', () => toggle.style.opacity = '1');
        ipContainer.addEventListener('mouseleave', () => toggle.style.opacity = '0');
    }
}

async function myAppTranslate(text) {
    if (!translationEnabled) return text;
    if (!text || typeof text !== 'string' || text.trim() === '') return text;

    const targetLanguage = await getRealTimeLanguage();
    const langMap = {
        'zh':'zh-CN','zh-tw':'zh-TW','zh-CN':'zh-CN','hk':'zh-TW', 'zh-mo': 'zh-TW',
        'en':'en','ja':'ja','ko':'ko','fr':'fr','de':'de','es':'es',
        'it':'it','pt':'pt','ru':'ru','ar':'ar','hi':'hi','bn':'bn',
        'ms':'ms','id':'id','vi':'vi','th':'th','nl':'nl','pl':'pl',
        'tr':'tr','sv':'sv','no':'no','fi':'fi','da':'da','cs':'cs',
        'he':'he','el':'el','hu':'hu','ro':'ro','sk':'sk','bg':'bg','uk':'uk'
    };
    const targetLang = langMap[targetLanguage] || targetLanguage.split('-')[0];
    if (targetLang.startsWith('en')) return text;

    const cacheKey = `trans_${text}_${targetLang}`;
    const cachedTranslation = localStorage.getItem(cacheKey);
    if (cachedTranslation) return cachedTranslation;

    const apis = [
        { 
            url: `https://api.mymemory.translated.net/get?q=${encodeURIComponent(text)}&langpair=en|${targetLang}`, 
            method: 'GET', 
            parseResponse: d => d && d.responseData && d.responseData.translatedText ? d.responseData.translatedText : text
        },
        { 
            url: `https://translate.googleapis.com/translate_a/single?client=gtx&sl=en&tl=${targetLang}&dt=t&q=${encodeURIComponent(text)}`, 
            method: 'GET', 
            parseResponse: d => Array.isArray(d) && d[0]?.[0]?.[0] ? d[0][0][0] : text
        }
    ];

    for(const api of apis){
        try{
            const response = await fetch(api.url, {
                method: api.method,
                headers: api.headers || {},
                body: api.body || null,
                signal: AbortSignal.timeout(3000)
            });
            
            if(response.ok){
                const data = await response.json();
                const translatedText = api.parseResponse(data);
                
                if (translatedText && translatedText !== text) {
                    localStorage.setItem(cacheKey, translatedText);
                    return translatedText;
                }
            }
        } catch(e){ 
            console.warn(`Translation API ${api.url} failed:`, e);
            continue; 
        }
    }
    return text;
}

async function saveIPCache(data) {
    if (!data.ip) return;
    data.language = await getRealTimeLanguage();
    
    const saveData = {
        ip: data.ip,
        country: data.country || '',
        region: data.region || '',
        city: data.city || '',
        isp: data.isp || '',
        asn: data.asn || '',
        asn_organization: data.asn_organization || '',
        country_code: data.country_code || '',
        timezone: data.timezone || data.time_zone || '',
        latitude: data.latitude || data.lat || '',
        longitude: data.longitude || data.lon || data.lng || '',
        language: data.language,
        translatedCountry: data.translatedCountry || '',
        translatedRegion: data.translatedRegion || '',
        translatedCity: data.translatedCity || '',
        translatedISP: data.translatedISP || '',
        translatedASNOrg: data.translatedASNOrg || ''
    };
    
    console.log('Saving cache with language:', saveData.language);
    
    try {
        const response = await fetch('/luci-static/spectra/bgm/save_ip_cache.php', {
            method: 'POST',
            headers: {'Content-Type':'application/json'},
            body: JSON.stringify(saveData)
        });
            const result = await response.json();
            console.log('Save result:', result);
    } catch (err) { 
        console.error("Failed to save IP cache:", err); 
    }
}

async function getCachedIPInfo(ip) {
    try {
        const resp = await fetch('/luci-static/spectra/bgm/ip_cache.json', {cache:'no-store'});
        const cache = await resp.json();
        const item = cache.find(item=>item.ip===ip);
        if (!item) return null;
        
        const currentLang = await getRealTimeLanguage();
        
        console.log('Cache check - Current language:', currentLang);
        console.log('Available translations:', item.translations ? Object.keys(item.translations) : 'none');
        
        if (item.translations && item.translations[currentLang]) {
            console.log('Using translation for language:', currentLang);
            return {
                ...item,
                ...item.translations[currentLang],
                language: currentLang
            };
        }
        
        console.log('No translation for current language, returning base data');
        return {
            ...item,
            language: currentLang
        };
        
    } catch (err) { 
        console.log('Cache read error:', err);
        return null; 
    }
}

let myAppIP = {
    isRefreshing:false,
    lastGeoData:null,
    ipApis:[
        {url:'https://api.ipify.org?format=json',type:'json',key:'ip'},
        {url:'https://api-ipv4.ip.sb/geoip',type:'json',key:'ip'},
        {url:'https://myip.ipip.net',type:'text'},
        {url:'http://pv.sohu.com/cityjson',type:'text'},
        {url:'https://ipinfo.io/json',type:'json',key:'ip'},
        {url:'https://ipapi.co/json/',type:'json'},
        {url:'https://freegeoip.app/json/',type:'json'},
        {url: ip => `https://ipapi.com/${ip}/json`, type: 'json', concurrent: true},
        {url: ip => `https://api.ip.sb/geoip/${ip}`, type: 'json', concurrent: true},
        {url: ip => `https://ipwho.is/${ip}`, type: 'json', concurrent: true},
        {url: ip => `https://api.ipapi.is/?q=${ip}`, type: 'json', concurrent: true}
    ],

    get:(url,type)=>fetch(url,{method:'GET',cache:'no-store'})
        .then(resp=>type==='text'?Promise.all([resp.ok,resp.status,resp.text(),resp.headers]):Promise.all([resp.ok,resp.status,resp.json(),resp.headers]))
        .then(([ok,status,data,headers])=>ok?{ok,status,data,headers}:Promise.reject(data.error))
        .catch(e=>{console.error("Error fetching data:",e);throw e;}),

    concurrentGeoQuery: async function(ip) {
        const concurrentApis = this.ipApis.filter(api => api.concurrent);
        if (!concurrentApis.length) throw new Error("No concurrent APIs configured");

        return new Promise((resolve, reject) => {
            let resolved = false;
            let completed = 0;

            concurrentApis.forEach(api => {
                const apiUrl = typeof api.url === 'function' ? api.url(ip) : api.url;
                this.get(apiUrl, api.type)
                    .then(resp => {
                        if (!resolved && resp.data) {
                            resolved = true;
                            resolve(resp.data);
                        }
                    })
                    .catch(err => console.warn("Concurrent API failed:", apiUrl, err))
                    .finally(() => {
                        completed++;
                        if (completed === concurrentApis.length && !resolved) {
                            reject(new Error("All concurrent APIs failed"));
                        }
                    });
            });
        });
    },

    fetchIP: async ()=>{
        let error;
        for(let api of myAppIP.ipApis){
            if (api.concurrent) continue;
            
            try{
                const response = await myAppIP.get(api.url,api.type);
                let ipData = api.type==='json' ? (api.key?response.data[api.key]:response.data) : response.data.match(/\d+\.\d+\.\d+\.\d+/)?.[0];
                if(ipData){ cachedIP=ipData; document.getElementById('d-ip').innerHTML=ipData; return ipData; }
            }catch(e){ error=e; continue; }
        }
        throw error||new Error("All IP APIs failed");
    },

    Ipip: async(ip,elID)=>{
        console.log('Ipip called with IP:', ip);
        let cachedData = await getCachedIPInfo(ip);
        const currentLang = await getRealTimeLanguage();       
        console.log('Current language:', currentLang);
        
        if(cachedData && cachedData.translatedCountry) { 
            console.log('Using cached data with translation');
            myAppIP.lastGeoData = cachedData; 
            await myAppIP.updateUI(cachedData,elID); 
            return; 
        }
        
        if(cachedData) {
            console.log('Cached data found but no translation for current language, re-translating');
            
            const baseData = {
                country: cachedData.country || '',
                region: cachedData.region || '',
                city: cachedData.city || '',
                isp: cachedData.isp || '',
                asn_organization: cachedData.asn_organization || '',
                asn: cachedData.asn || '',
                country_code: cachedData.country_code || '',
                timezone: cachedData.timezone || '',
                latitude: cachedData.latitude || '',
                longitude: cachedData.longitude || ''
            };
            
            myAppIP.lastGeoData = {...baseData};
            
            if(translationEnabled){
                console.log('Starting translation for language:', currentLang);
                myAppIP.lastGeoData.translatedCountry = await myAppTranslate(baseData.country);
                myAppIP.lastGeoData.translatedRegion  = await myAppTranslate(baseData.region);
                myAppIP.lastGeoData.translatedCity    = await myAppTranslate(baseData.city);
                myAppIP.lastGeoData.translatedISP     = await myAppTranslate(baseData.isp);
                myAppIP.lastGeoData.translatedASNOrg  = await myAppTranslate(baseData.asn_organization);
                myAppIP.lastGeoData.language = currentLang;
                console.log('Translation completed');
            }
            
            myAppIP.lastGeoData.ip = ip;
            myAppIP.lastGeoData.asn = baseData.asn;
            myAppIP.lastGeoData.country_code = baseData.country_code;          
            await myAppIP.updateUI(myAppIP.lastGeoData,elID);
            saveIPCache(myAppIP.lastGeoData);
            return;
        }

        try {
            const geoData = await this.concurrentGeoQuery(ip);
            cachedIP=ip;
            myAppIP.lastGeoData=geoData;

            const standardizedData = {
                ip: geoData.ip || ip,
                country: geoData.country || geoData.country_name || '',
                region: geoData.region || geoData.region_name || geoData.state || '',
                city: geoData.city || '',
                isp: geoData.isp || geoData.connection?.isp || geoData.org || '',
                asn: geoData.asn || geoData.connection?.asn || '',
                asn_organization: geoData.org || geoData.connection?.org || geoData.connection?.isp || '',
                country_code: geoData.country_code || geoData.countryCode || geoData.country_code || '',
                timezone: geoData.timezone || geoData.time_zone || '',
                latitude: geoData.latitude || geoData.lat || '',
                longitude: geoData.longitude || geoData.lon || geoData.lng || ''
            };

            if(translationEnabled){
                standardizedData.translatedCountry = await myAppTranslate(standardizedData.country||'');
                standardizedData.translatedRegion  = await myAppTranslate(standardizedData.region||'');
                standardizedData.translatedCity    = await myAppTranslate(standardizedData.city||'');
                standardizedData.translatedISP     = await myAppTranslate(standardizedData.isp||'');
                standardizedData.translatedASNOrg  = await myAppTranslate(standardizedData.asn_organization||'');
                standardizedData.language = currentLang;
            }

            await myAppIP.updateUI(standardizedData,elID);
            saveIPCache(standardizedData);
            
        } catch(concurrentError) {
            console.log("Concurrent query failed, falling back to sequential:", concurrentError);
            
            const geoApis = [
                {url:`https://api.ip.sb/geoip/${ip}`,type:'json'},
                {url:'https://myip.ipip.net',type:'text'},
                {url:`http://ip-api.com/json/${ip}`,type:'json'},
                {url:`https://ipinfo.io/${ip}/json`,type:'json'},
                {url:`https://ipapi.co/${ip}/json`,type:'json'},
                {url:`https://freegeoip.app/json/${ip}`,type:'json'}
            ];

            let geoData=null,error;
            for(let api of geoApis){
                try{ 
                    const response = await myAppIP.get(api.url,api.type); 
                    geoData=response.data; 
                    break; 
                }
                catch(e){ error=e; continue; }
            }
            if(!geoData) throw error||new Error("All Geo APIs failed");

            cachedIP=ip;
            myAppIP.lastGeoData=geoData;

            geoData.timezone = geoData.timezone || geoData.time_zone || '';
            geoData.latitude = geoData.latitude || geoData.lat || '';
            geoData.longitude = geoData.longitude || geoData.lon || geoData.lng || '';

            if(translationEnabled){
                geoData.translatedCountry = await myAppTranslate(geoData.country||'');
                geoData.translatedRegion  = await myAppTranslate(geoData.region||'');
                geoData.translatedCity    = await myAppTranslate(geoData.city||'');
                geoData.translatedISP     = await myAppTranslate(geoData.isp||'');
                geoData.translatedASNOrg  = await myAppTranslate(geoData.asn_organization||'');
                geoData.language = currentLang;
            }

            await myAppIP.updateUI(geoData,elID);
            saveIPCache(geoData);
        }
    },

    updateUI: async(data,elID)=>{
        try{
            const country = translationEnabled && data.translatedCountry ? data.translatedCountry : data.country || "<%:Unknown%>";
            const region  = translationEnabled && data.translatedRegion  ? data.translatedRegion  : data.region  || "";
            const city    = translationEnabled && data.translatedCity    ? data.translatedCity    : data.city    || "";
            const isp     = translationEnabled && data.translatedISP     ? data.translatedISP     : data.isp     || "";
            const asnOrg  = translationEnabled && data.translatedASNOrg  ? data.translatedASNOrg  : data.asn_organization || "";

            let location = region && city && region!==city ? `${region} ${city}` : region||city||'';
            let displayISP = isp;
            let displayASN = asnOrg;
            if(isp && asnOrg && asnOrg.includes(isp)) displayISP=''; 
            else if(isp && asnOrg && isp.includes(asnOrg)) displayASN='';

            document.getElementById('d-ip').innerHTML = `
                <div class="ip-main" style="cursor:pointer;" onclick="myAppIP.showDetailModal()">
                    ${cachedIP} <span class="badge badge-primary" style="color:#fd7e14;background:#f8f9fa;border-radius:4px;padding:2px 6px;border:1px solid #ddd;">${country}</span>
                </div>`;
            document.getElementById('ipip').innerHTML = `<span style="margin-left:8px;">${location} ${displayISP} ${data.asn||''} ${displayASN}</span>`;

            const countryContainer = document.querySelector('.ip-main');
            if(countryContainer && !document.querySelector('.translation-toggle')){
                const toggle=createTranslationToggle();
                toggle.style.display='inline-flex';
                toggle.style.alignItems='center';
                toggle.style.justifyContent='center';
                toggle.style.width='24px';
                toggle.style.height='20px';
                toggle.style.marginLeft='8px';
                toggle.style.border='1px solid #ddd';
                toggle.style.borderRadius='3px';
                toggle.style.backgroundColor='#f8f9fa';
                toggle.style.fontSize='12px';
                toggle.style.verticalAlign='middle';
                toggle.style.lineHeight='1';
                toggle.style.padding='0';
                toggle.style.textAlign='center';
                countryContainer.appendChild(toggle);
                setTimeout(setupHoverEffect,100);
            }

            const countryCode = data.country_code||'unknown';
            const flagSrc = (countryCode!=='unknown')?_IMG+"flags/"+countryCode.toLowerCase()+".png":'/luci-static/ipip/flags/cn.png';
            $("#flag").attr("src",flagSrc);

        } catch(e){
            console.error("updateUI error:",e);
            document.getElementById('d-ip').innerHTML="<%:Failed to update IP information%>";
            $("#flag").attr("src","/luci-static/ipip/flags/cn.png");
        }
    },

    getIpipnetIP: async ()=>{
        if(myAppIP.isRefreshing) return;
        myAppIP.isRefreshing=true;
        document.getElementById('d-ip').innerHTML=`<div class="ip-main"><span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span><%:Checking...%></div>`;
        document.getElementById('ipip').innerHTML="";
        $("#flag").attr("src",_IMG+"img/loading.svg");
        try{
            const ip = await myAppIP.fetchIP();
            await myAppIP.Ipip(ip,'ipip');
        }catch(e){ console.error("getIpipnetIP error:",e); document.getElementById('ipip').innerHTML="<%:Failed to get IP information%>"; }
        finally{ myAppIP.isRefreshing=false; }
    },

    showDetailModal: async function() {
        if (!myAppIP.lastGeoData) return;
    
            const data = myAppIP.lastGeoData;
            const country = translationEnabled && data.translatedCountry ? data.translatedCountry : data.country || "<%:Unknown%>";
            const region = translationEnabled && data.translatedRegion ? data.translatedRegion : data.region || "";
            const city = translationEnabled && data.translatedCity ? data.translatedCity : data.city || "";
            const isp = translationEnabled && data.translatedISP ? data.translatedISP : data.isp || "";
            const asnOrg = translationEnabled && data.translatedASNOrg ? data.translatedASNOrg : data.asn_organization || "";
            const timezone = data.timezone || data.time_zone || 'N/A';
            const latitude = data.latitude || data.lat || 'N/A';
            const longitude = data.longitude || data.lon || data.lng || 'N/A';

            let locationParts = [country];
    
            if (region && region !== country) {
                locationParts.push(region);
            }
    
            if (city && city !== region && city !== country) {
                locationParts.push(city);
            }
    
            const locationDisplay = locationParts.join(' ');

            let countryCode = data.country_code || 'unknown';
            if (countryCode.toUpperCase() === 'TW') {
                countryCode = 'CN';
            } else if (countryCode.toUpperCase() === 'HK' || countryCode.toUpperCase() === 'MO') {
                countryCode = 'CN';
            }

        const translations = {
            'zh': {
                title: 'IP地址详情',
                ip: 'IP地址',
                location: '地理位置',
                isp: '网络服务商',
                asn: '自治系统号',
                countryCode: '国家代码',
                timezone: '时区',
                coordinates: '坐标',
                translation: '翻译',
                enabled: '已启用',
                disabled: '已禁用',
                close: '关闭',
                refresh: '刷新',
                mapView: '地图视图',
                viewOnGoogleMaps: '在Google地图中查看',
                latitude: '纬度',
                longitude: '经度'
            },
            'en': {
                title: 'IP Address Details',
                ip: 'IP Address',
                location: 'Location',
                isp: 'ISP',
                asn: 'ASN',
                countryCode: 'Country Code',
                timezone: 'Timezone',
                coordinates: 'Coordinates',
                translation: 'Translation',
                enabled: 'Enabled',
                disabled: 'Disabled',
                close: 'Close',
                refresh: 'Refresh',
                mapView: 'Map View',
                viewOnGoogleMaps: 'View on Google Maps',
                latitude: 'Latitude',
                longitude: 'Longitude'
            },
            'ja': {
                title: 'IPアドレス詳細',
                ip: 'IPアドレス',
                location: '所在地',
                isp: 'ISP',
                asn: 'AS番号',
                countryCode: '国コード',
                timezone: 'タイムゾーン',
                coordinates: '座標',
                translation: '翻訳',
                enabled: '有効',
                disabled: '無効',
                close: '閉じる',
                refresh: '更新',
                mapView: '地図表示',
                viewOnGoogleMaps: 'Googleマップで表示',
                latitude: '緯度',
                longitude: '経度'
            },
            'hk': {
                title: 'IP地址詳情',
                ip: 'IP地址',
                location: '地理位置',
                isp: '網絡服務商',
                asn: '自治系統號',
                countryCode: '國家代碼',
                timezone: '時區',
                coordinates: '坐標',
                translation: '翻譯',
                enabled: '已啟用',
                disabled: '已禁用',
                close: '關閉',
                refresh: '刷新',
                mapView: '地圖視圖',
                viewOnGoogleMaps: '在Google地圖中查看',
                latitude: '緯度',
                longitude: '經度'
            },
            'ko': {
                title: 'IP 주소 세부정보',
                ip: 'IP 주소',
                location: '위치',
                isp: '인터넷 서비스 제공업체',
                asn: 'ASN',
                countryCode: '국가 코드',
                timezone: '시간대',
                coordinates: '좌표',
                translation: '번역',
                enabled: '사용',
                disabled: '사용 안 함',
                close: '닫기',
                refresh: '새로고침',
                mapView: '지도 보기',
                viewOnGoogleMaps: 'Google 지도에서 보기',
                latitude: '위도',
                longitude: '경도'
            },
            'ru': {
                title: 'Детали IP-адреса',
                ip: 'IP-адрес',
                location: 'Местоположение',
                isp: 'Интернет-провайдер',
                asn: 'ASN',
                countryCode: 'Код страны',
                timezone: 'Часовой пояс',
                coordinates: 'Координаты',
                translation: 'Перевод',
                enabled: 'Включено',
                disabled: 'Отключено',
                close: 'Закрыть',
                refresh: 'Обновить',
                mapView: 'Просмотр карты',
                viewOnGoogleMaps: 'Посмотреть в Google Картах',
                latitude: 'Широта',
                longitude: 'Долгота'
            },
            'ar': {
                title: 'تفاصيل عنوان IP',
                ip: 'عنوان IP',
                location: 'الموقع',
                isp: 'مزود خدمة الإنترنت',
                asn: 'ASN',
                countryCode: 'رمز الدولة',
                timezone: 'المنطقة الزمنية',
                coordinates: 'الإحداثيات',
                translation: 'ترجمة',
                enabled: 'مُمكّن',
                disabled: 'معطّل',
                close: 'إغلاق',
                refresh: 'تحديث',
                mapView: 'عرض الخريطة',
                viewOnGoogleMaps: 'عرض على خرائط Google',
                latitude: 'خط العرض',
                longitude: 'خط الطول'
            },
            'es': {
                title: 'Detalles de la dirección IP',
                ip: 'Dirección IP',
                location: 'Ubicación',
                isp: 'Proveedor de Internet',
                asn: 'ASN',
                countryCode: 'Código de país',
                timezone: 'Zona horaria',
                coordinates: 'Coordenadas',
                translation: 'Traducción',
                enabled: 'Habilitado',
                disabled: 'Deshabilitado',
                close: 'Cerrar',
                refresh: 'Actualizar',
                mapView: 'Vista de mapa',
                viewOnGoogleMaps: 'Ver en Google Maps',
                latitude: 'Latitud',
                longitude: 'Longitud'
            },
            'de': {
                title: 'IP-Adressdetails',
                ip: 'IP-Adresse',
                location: 'Standort',
                isp: 'ISP',
                asn: 'ASN',
                countryCode: 'Ländercode',
                timezone: 'Zeitzone',
                coordinates: 'Koordinaten',
                translation: 'Übersetzung',
                enabled: 'Aktiviert',
                disabled: 'Deaktiviert',
                close: 'Schließen',
                refresh: 'Aktualisieren',
                mapView: 'Kartenansicht',
                viewOnGoogleMaps: 'In Google Maps ansehen',
                latitude: 'Breitengrad',
                longitude: 'Längengrad'
            },
            'fr': {
                title: 'Détails de l’adresse IP',
                ip: 'Adresse IP',
                location: 'Emplacement',
                isp: 'FAI',
                asn: 'ASN',
                countryCode: 'Code du pays',
                timezone: 'Fuseau horaire',
                coordinates: 'Coordonnées',
                translation: 'Traduction',
                enabled: 'Activé',
                disabled: 'Désactivé',
                close: 'Fermer',
                refresh: 'Rafraîchir',
                mapView: 'Vue carte',
                viewOnGoogleMaps: 'Voir sur Google Maps',
                latitude: 'Latitude',
                longitude: 'Longitude'
            },
            'vi': {
                title: 'Chi tiết địa chỉ IP',
                ip: 'Địa chỉ IP',
                location: 'Vị trí',
                isp: 'Nhà cung cấp dịch vụ Internet',
                asn: 'ASN',
                countryCode: 'Mã quốc gia',
                timezone: 'Múi giờ',
                coordinates: 'Tọa độ',
                translation: 'Dịch',
                enabled: 'Bật',
                disabled: 'Tắt',
                close: 'Đóng',
                refresh: 'Làm mới',
                mapView: 'Xem bản đồ',
                viewOnGoogleMaps: 'Xem trên Google Maps',
                latitude: 'Vĩ độ',
                longitude: 'Kinh độ'
            },
            'bn': {
                title: 'IP ঠিকানার বিবরণ',
                ip: 'IP ঠিকানা',
                location: 'অবস্থান',
                isp: 'আইএসপি',
                asn: 'ASN',
                countryCode: 'দেশ কোড',
                timezone: 'সময় অঞ্চল',
                coordinates: 'অবস্থানাঙ্ক',
                translation: 'অনুবাদ',
                enabled: 'সক্রিয়',
                disabled: 'নিষ্ক্রিয়',
                close: 'বন্ধ করুন',
                refresh: 'রিফ্রেশ',
                mapView: 'মানচিত্র ভিউ',
                viewOnGoogleMaps: 'Google মানচিত্রে দেখুন',
                latitude: 'অক্ষাংশ',
                longitude: 'দ্রাঘিমাংশ'
            },
            'th': {
                title: 'รายละเอียดที่อยู่ IP',
                ip: 'ที่อยู่ IP',
                location: 'ตำแหน่งที่ตั้ง',
                isp: 'ผู้ให้บริการอินเทอร์เน็ต',
                asn: 'ASN',
                countryCode: 'รหัสประเทศ',
                timezone: 'เขตเวลา',
                coordinates: 'พิกัด',
                translation: 'การแปล',
                enabled: 'เปิดใช้งาน',
                disabled: 'ปิดใช้งาน',
                close: 'ปิด',
                refresh: 'รีเฟรช',
                mapView: 'มุมมองแผนที่',
                viewOnGoogleMaps: 'ดูบน Google Maps',
                latitude: 'ละติจูด',
                longitude: 'ลองจิจูด'
            }
        };

        const getLanguageText = async () => {
            try {
                const currentLang = await getRealTimeLanguage();
                return translations[currentLang] || translations['zh-CN'];
            } catch (error) {
                console.error('Failed to get language:', error);
                return translations['zh-CN'];
            }
        };

        const modalOverlay = document.createElement('div');
        modalOverlay.className = 'ip-modal-overlay';
        modalOverlay.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 10000;
            opacity: 0;
            transition: opacity 0.3s ease;
        `;
    
        const modalContent = document.createElement('div');
        modalContent.className = 'ip-modal-content';
        modalContent.style.cssText = `
            background: white;
            border-radius: 12px;
            width: 90%;
            max-width: 800px;
            max-height: 80vh;
            overflow: hidden;
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
            transform: scale(0.9);
            transition: transform 0.3s ease;
        `;

        modalContent.innerHTML = `
            <div class="ip-modal-header" style="
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                color: white;
                padding: 20px;
                display: flex;
                justify-content: space-between;
                align-items: center;
            ">
                <h3 style="margin: 0; font-size: 1.2em;">
                    <span style="margin-right: 10px;">📋</span>
                    Loading...
                </h3>
                <button class="ip-modal-close" style="
                    background: none;
                    border: none;
                    color: white;
                    font-size: 1.5em;
                    cursor: pointer;
                    padding: 0;
                    width: 30px;
                    height: 30px;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                ">×</button>
            </div>
        
            <div class="ip-modal-body" style="padding: 20px; max-height: 60vh; overflow-y: auto;">
                <div style="text-align: center; padding: 40px;">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            </div>
        `;
    
        modalOverlay.appendChild(modalContent);
        document.body.appendChild(modalOverlay);
    
        setTimeout(() => {
            modalOverlay.style.opacity = '1';
            modalContent.style.transform = 'scale(1)';
        }, 10);

        getLanguageText().then(langText => {
            modalContent.innerHTML = `
                <div class="ip-modal-header" style="
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                    color: white;
                    padding: 20px;
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                ">
                    <h3 style="margin: 0; font-size: 1.2em;">
                        <span style="margin-right: 10px;"><i class="bi bi-clipboard"></i></span>
                        ${langText.title}
                    </h3>
                    <button class="ip-modal-close" style="
                        background: none;
                        border: none;
                        color: white;
                        font-size: 1.5em;
                        cursor: pointer;
                        padding: 0;
                        width: 30px;
                        height: 30px;
                        display: flex;
                        align-items: center;
                        justify-content: center;
                    ">×</button>
                </div>
            
                <div class="ip-modal-body" style="padding: 20px; max-height: 60vh; overflow-y: auto;">
                    <div style="display: flex; margin-bottom: 20px;">
                        <div style="flex: 1; text-align: center;">
                            <img src="${_IMG}flags/${(data.country_code || 'unknown').toLowerCase()}.png" 
                                style="max-height: 80px; border: 1px solid #ddd; border-radius: 4px;" 
                                onerror="this.src='/luci-static/ipip/flags/unknown.png'">
                            <div style="margin-top: 10px; font-weight: bold;">${country}</div>
                        </div>
                        <div style="flex: 2; margin-left: 20px;">
                            <div class="detail-item" style="margin-bottom: 10px; display: flex; gap: 20px;">
                                <span style="width: 180px; font-weight: 500; color: #6c757d;"><i class="bi bi-globe2"></i>  ${langText.ip}:</span>
                                <span style="flex: 1; word-break: break-word;">${cachedIP}</span>
                            </div>
                            <div class="detail-item" style="margin-bottom: 10px; display: flex; gap: 20px;">
                                <span style="width: 180px; font-weight: 500; color: #6c757d;"><i class="bi bi-geo-alt"></i>  ${langText.location}:</span>
                                <span style="flex: 1;">${locationDisplay}</span>
                            </div>
                            <div class="detail-item" style="margin-bottom: 10px; display: flex; gap: 20px;">
                                <span style="width: 180px; font-weight: 500; color: #6c757d;"><i class="bi bi-building"></i>  ${langText.isp}:</span>
                                <span style="flex: 1;">${isp}</span>
                            </div>
                            <div class="detail-item" style="margin-bottom: 10px; display: flex; gap: 20px;">
                                <span style="width: 180px; font-weight: 500; color: #6c757d;"><i class="bi bi-link-45deg"></i>  ${langText.asn}:</span>
                                <span style="flex: 1;">${data.asn || ''} ${asnOrg}</span>
                            </div>
                            <div class="detail-item" style="margin-bottom: 10px; display: flex; gap: 20px;">
                                <span style="width: 180px; font-weight: 500; color: #6c757d;"><i class="bi bi-flag"></i>  ${langText.countryCode}:</span>
                                <span style="flex: 1;">${countryCode}</span>
                            </div>
                            <div class="detail-item" style="margin-bottom: 10px; display: flex; gap: 20px;">
                                <span style="width: 180px; font-weight: 500; color: #6c757d;"><i class="bi bi-clock"></i>  ${langText.timezone}:</span>
                                <span style="flex: 1;">${timezone}</span>
                            </div>
                            <div class="detail-item" style="margin-bottom: 10px; display: flex; gap: 20px;">
                                <span style="width: 180px; font-weight: 500; color: #6c757d;"><i class="bi bi-geo"></i>  ${langText.coordinates}:</span>
                                <span style="flex: 1;">
                                    ${latitude !== 'N/A' && longitude !== 'N/A' ? 
                                        `${latitude}, ${longitude}` : 
                                        'N/A'}
                                </span>
                            </div>
                            <div class="detail-item" style="margin-bottom: 10px; display: flex; gap: 20px;">
                                <span style="width: 180px; font-weight: 500; color: #6c757d;"><i class="bi bi-translate"></i>  ${langText.translation}:</span>
                                <span style="flex: 1;">
                                    <span style="
                                        padding: 4px 8px;
                                        border-radius: 4px;
                                        font-size: 0.9em;
                                        background: ${translationEnabled ? '#28a745' : '#6c757d'};
                                        color: white;
                                    ">
                                        ${translationEnabled ? langText.enabled : langText.disabled}
                                    </span>
                                </span>
                            </div>
                        </div>
                    </div>

                    ${latitude !== 'N/A' && longitude !== 'N/A' ? `
                    <div style="margin-top: 20px; padding: 15px; background: #f8f9fa; border-radius: 8px;">
                        <div style="display: flex; align-items: center; margin-bottom: 10px;">
                            <span style="font-weight: 500; color: #6c757d; margin-right: 10px;"><i class="bi bi-map"></i>  ${langText.mapView}:</span>
                            <a href="https://maps.google.com/?q=${latitude},${longitude}" 
                               target="_blank" 
                               style="color: #007bff; text-decoration: none;"
                               onmouseover="this.style.textDecoration='underline'" 
                               onmouseout="this.style.textDecoration='none'">
                                ${langText.viewOnGoogleMaps}
                            </a>
                        </div>
                        <div style="font-size: 0.9em; color: #6c757d;">
                            ${langText.latitude}: ${latitude}, ${langText.longitude}: ${longitude}
                        </div>
                    </div>
                    ` : ''}
                </div>
            
                <div class="ip-modal-footer" style="
                    padding: 15px 20px;
                    background: #f8f9fa;
                    display: flex;
                    justify-content: flex-end;
                    gap: 10px;
                    border-top: 1px solid #dee2e6;
                ">
                    <button class="ip-modal-btn ip-modal-btn-secondary" style="
                        padding: 6px 12px;
                        font-size: 14px; 
                        border: 1px solid #ff6b6b;
                        background-color: #ff6b6b; 
                        color: white;
                        border-radius: 8px;
                        cursor: pointer;
                        transition: background-color 0.2s ease, transform 0.2s ease;
                    "
                    onmouseenter="this.style.backgroundColor='#ff4c4c'; this.style.transform='scale(1.1)';"
                    onmouseleave="this.style.backgroundColor='#ff6b6b'; this.style.transform='scale(1)';
                    ">${langText.close}</button>
                    <button class="ip-modal-btn ip-modal-btn-info" style="
                        padding: 6px 12px;
                        font-size: 14px; 
                        border: 1px solid #4ecdc4;
                        background-color: #4ecdc4;
                        color: white;
                        border-radius: 8px;
                        cursor: pointer;
                        transition: background-color 0.2s ease, transform 0.2s ease;
                    "
                    onmouseenter="this.style.backgroundColor='#38b9af'; this.style.transform='scale(1.1)';"
                    onmouseleave="this.style.backgroundColor='#4ecdc4'; this.style.transform='scale(1)';
                    ">${langText.refresh}</button>
                </div>
            `;

            setupModalEvents(modalOverlay, modalContent);
        }).catch(error => {
            console.error('Failed to load language:', error);
        });

        const setupModalEvents = (overlay, content) => {
            const closeBtn = content.querySelector('.ip-modal-close');
            const closeModalBtn = content.querySelector('.ip-modal-btn-secondary');
        
            const closeModal = () => {
                overlay.style.opacity = '0';
                content.style.transform = 'scale(0.9)';
                setTimeout(() => {
                    if (overlay.parentNode) {
                        overlay.parentNode.removeChild(overlay);
                    }
                }, 300);
            };
        
            closeBtn.addEventListener('click', closeModal);
            closeModalBtn.addEventListener('click', closeModal);
        
            overlay.addEventListener('click', (e) => {
                if (e.target === overlay) {
                    closeModal();
                }
            });

            const refreshBtn = content.querySelector('.ip-modal-btn-info');
            refreshBtn.addEventListener('click', () => {
                closeModal();
                setTimeout(() => {
                    this.getIpipnetIP();
                }, 300);
            });
        };

        setupModalEvents(modalOverlay, modalContent);
    },
};

document.addEventListener('DOMContentLoaded', function() {
    setupLanguageChangeListener();
    
    const flagElement = document.getElementById('flag');
    if (flagElement) {
        flagElement.addEventListener('click', () => myAppIP.getIpipnetIP());
    }
    
    myAppIP.getIpipnetIP();
    setInterval(() => myAppIP.getIpipnetIP(), 180000);
});

</script>

<script>
function pingHost(id, name, url) {
    const normal = document.getElementById(`${id}-normal`);
    const gray = document.getElementById(`${id}-gray`);
    const overlay = document.getElementById('result-overlay');
    const start = performance.now();

    fetch(url, { mode: 'no-cors' })
        .then(() => {
            const end = performance.now();
            const ping = Math.round(end - start);
            normal.style.display = 'inline';
            gray.style.display = 'none';

            let color = '#00c800';
            if (ping > 300) {
                color = 'red';
            } else if (ping > 150) {
                color = 'orange';
            }

            overlay.innerHTML = `${name} 延迟: ${ping} ms`;
            overlay.style.color = color;
            overlay.style.display = 'block';
            clearTimeout(overlay.timer);
            overlay.timer = setTimeout(() => {
                overlay.style.display = 'none';
            }, 5000);
        })
        .catch(() => {
            normal.style.display = 'none';
            gray.style.display = 'inline';
            overlay.innerHTML = `${name} 连接超时`;
            overlay.style.color = 'red';
            overlay.style.display = 'block';
            clearTimeout(overlay.timer);
            overlay.timer = setTimeout(() => {
                overlay.style.display = 'none';
            }, 5000);
        });
}

function checkAllSites() {
    const sites = [
        {id: 'baidu', name: 'Baidu', url: 'https://www.baidu.com'},
        {id: 'taobao', name: 'Taobao', url: 'https://www.taobao.com'},
        {id: 'google', name: 'Google', url: 'https://www.google.com'},
        {id: 'youtube', name: 'YouTube', url: 'https://www.youtube.com'}
    ];
    sites.forEach(site => {
        const normal = document.getElementById(`${site.id}-normal`);
        const gray = document.getElementById(`${site.id}-gray`);
        fetch(site.url, { mode: 'no-cors' })
            .then(() => {
                normal.style.display = 'inline';
                gray.style.display = 'none';
            })
            .catch(() => {
                normal.style.display = 'none';
                gray.style.display = 'inline';
            });
    });
}

window.addEventListener('load', () => {
    checkAllSites();
    
    setInterval(checkAllSites, 180000);
});
</script>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const themeMode = '<%= mode %>';
    let isDarkMode = false;

    if (themeMode === 'dark') {
        isDarkMode = true;
    } else if (themeMode === 'normal' && window.matchMedia('(prefers-color-scheme: dark)').matches) {
        isDarkMode = true;
    }

    const royalElements = document.querySelectorAll('.royal-style');
    royalElements.forEach(el => {
        el.style.setProperty('color', isDarkMode ? '#28edf0' : '#007bff', 'important');
        
        const style = document.createElement('style');
        style.textContent = `
            @keyframes textColorChange {
                0%, 100% { text-shadow: 2px 2px 5px rgba(0,0,0,0.2); }
                50% { text-shadow: 3px 3px 7px rgba(0,0,0,0.3); }
            }
        `;
        document.head.appendChild(style);
    });

    if (themeMode === 'normal') {
        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {
            royalElements.forEach(el => {
                el.style.setProperty('color', e.matches ? '#28edf0' : '#007bff', 'important');
            });
        });
    }
});
</script>

<script>
function updatemenu(){1==document.getElementById("responsive-menu").checked?(document.getElementById("menu").style.borderBottomRightRadius="0",document.getElementById("menu").style.borderBottomLeftRadius="0"):document.getElementById("menu").style.borderRadius="0px"}
</script>

</header>

	<div class="main">
		<div class="main-left" id="mainmenu" style="display:none">
			<div class="sidenav-header d-flex align-items-center">
				<a id="logo" href="#" class="royal-style"><%=brand_name%></a>	
				<div class="ml-auto">
					<!-- Sidenav toggler -->
					<div class="sidenav-toggler d-none d-xl-block active" data-action="sidenav-unpin"
						data-target="#sidenav-main">
						<div class="sidenav-toggler-inner">
							<i class="sidenav-toggler-line"></i>
							<i class="sidenav-toggler-line"></i>
							<i class="sidenav-toggler-line"></i>
						</div>
					</div>
				</div>
			</div>
		</div>
		<div class="main-right">
			
				
			
			<div class="darkMask"></div>
			<div id="maincontent">
				<div class="container">
					<%- if luci.sys.process.info("uid") == 0 and luci.sys.user.getuser("root") and not luci.sys.user.getpasswd("root") then -%>
					<div class="alert-message error">
						<h4><%:No password set!%></h4>
						<p><%:There is no password set on this router. Please configure a root password to protect the web interface.%>
						</p>
						<% if disp.lookup("admin/system/admin") then %>
						<div class="right"><a class="btn"
								href="<%=url("admin/system/admin")%>"><%:Go to password configuration...%></a></div>
						<% end %>
					</div>
					<%- end -%>

					<noscript>
						<div class="alert-message error">
							<h4><%:JavaScript required!%></h4>
							<p><%:You must enable JavaScript in your browser or LuCI will not work properly.%></p>
						</div>
					</noscript>

					<div id="tabmenu" style="display:none"></div>
