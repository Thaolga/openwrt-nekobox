<%#
	Argon is a clean HTML5 theme for LuCI. It is based on luci-theme-material Argon Template

	luci-theme-argon
	Copyright 2020 Jerrykuku <jerrykuku@qq.com>

	Have a bug? Please create an issue here on GitHub!
	https://github.com/jerrykuku/luci-theme-argon/issues

	luci-theme-material:
	Copyright 2015 Lutty Yang <lutty@wcan.in>

	Argon Theme
	https://demos.creative-tim.com/argon-dashboard/index.html

	Licensed to the public under the Apache License 2.0
-%>

<%
	local sys = require "luci.sys"
	local util = require "luci.util"
	local http = require "luci.http"
	local disp = require "luci.dispatcher"
	local ver = require "luci.version"
        local mode = 'normal'
	local boardinfo = util.ubus("system", "board")

	local node = disp.context.dispatched

	local fs = require "nixio.fs"
	local nutil = require "nixio.util"
	local uci = require 'luci.model.uci'.cursor()

	-- send as HTML5
	http.prepare_content("text/html")

	-- Custom settings
	local mode = 'normal'
	local dark_css = fs.readfile('/www/luci-static/spectra/css/dark.css')
	local bar_color = '#5e72e4'
	local primary, dark_primary, blur_radius, blur_radius_dark, blur_opacity
	if fs.access('/etc/config/spectra') then
		primary = uci:get_first('spectra', 'global', 'primary')
		dark_primary = uci:get_first('spectra', 'global', 'dark_primary')
		blur_radius = uci:get_first('spectra', 'global', 'blur')
		blur_radius_dark = uci:get_first('spectra', 'global', 'blur_dark')
		blur_opacity = uci:get_first('spectra', 'global', 'transparency')
		blur_opacity_dark = uci:get_first('spectra', 'global', 'transparency_dark')
		mode = uci:get_first('spectra', 'global', 'mode')
		bar_color = mode == 'dark' and dark_primary or primary
	end

	-- Brand name
	local brand_name = boardinfo.hostname or "?"
-%>

<!DOCTYPE html>
<html lang="<%=luci.i18n.context.lang%>">

<head>
<style>
[data-theme="dark"] {
    --base-hue: 260;
    --base-chroma: 0.03;
    --danger-base: 15;
    --base-hue-1: 20;
    --base-hue-2: 200;
    --base-hue-3: 135;
    --base-hue-4: 80;
    --base-hue-5: 270;
    --base-hue-6: 170;
    --base-hue-7: 340;
    --l: 85%;
    --c: 0.18;
    --glass-blur: blur(20px);
    --radius: 20px;
    --glass-opacity: 0.85;
    --glass-border: 1px solid rgba(255, 255, 255, 0.1);
    --shadow-intensity: 0.25;
    --text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
    --transition-speed: 0.3s;
    --highlight-intensity: 0.8;

    --bg-body: oklch(40% var(--base-chroma) var(--base-hue) / 90%);
    --bg-container: oklch(30% var(--base-chroma) var(--base-hue));
    --text-primary: oklch(95% 0 0);
    --accent-color: oklch(70% 0.2 calc(var(--base-hue) + 0));
    --card-bg: oklch(25% var(--base-chroma) var(--base-hue));
    --header-bg: oklch(35% var(--base-chroma) var(--base-hue));
    --border-color: oklch(40% var(--base-chroma) var(--base-hue));

    --btn-primary-bg: oklch(50% 0.18 var(--base-hue));
    --btn-primary-hover: color-mix(in oklch, var(--btn-primary-bg), white 12%);
    --btn-success-bg: oklch(55% 0.22 140);
    --btn-info-bg: oklch(55% 0.22 220);
    --btn-warning-bg: oklch(65% 0.18 80);
    --btn-danger-bg: oklch(55% 0.25 var(--danger-base));

    --item-hover-bg: color-mix(in oklch, var(--btn-primary-bg), white 15%);
    --item-hover-shadow: 0 4px 12px oklch(0 0 0 / 0.4);
    --drag-over-bg: oklch(35% 0.05 var(--base-hue) / 0.3);
    --drag-over-shadow: 0 0 25px oklch(var(--base-hue) 0.2 0.4 / 0.3);

    --text-secondary: oklch(75% 0.03 0);
    --success-text: oklch(75% 0.22 140);
    --info-text: oklch(75% 0.22 220);
    --warning-text: oklch(80% 0.22 80);
    --danger-text: oklch(70% 0.28 30);

    --ocean-bg: oklch(48% 0.32 calc(var(--base-hue) + 220));
    --forest-bg: oklch(42% 0.32 calc(var(--base-hue) + 140));
    --rose-bg: oklch(48% 0.32 calc(var(--base-hue) + 350));
    --lavender-bg: oklch(46% 0.32 calc(var(--base-hue) + 270));
    --sand-bg: oklch(45% 0.32 calc(var(--base-hue) + 60));

    --glass-blur: blur(20px);
    --radius: 16px;
    --transition: all 0.25s ease;

    --primary-color: var(--accent-color);
    --secondary-color: var(--btn-primary-bg);
    --background: var(--bg-body);
    --text-color: var(--text-primary);
}

[data-theme="light"] {
    --base-hue: 200;
    --base-chroma: 0.01;
    --l: 60%;
    --c: 0.25;

    --bg-body: oklch(95% var(--base-chroma) var(--base-hue) / 90%);
    --bg-container: oklch(99% var(--base-chroma) var(--base-hue));
    --text-primary: oklch(25% var(--base-chroma) var(--base-hue));
    --accent-color: oklch(60% 0.2 calc(var(--base-hue) + 60));
    --card-bg: oklch(96% var(--base-chroma) var(--base-hue));
    --header-bg: oklch(88% var(--base-chroma) var(--base-hue));
    --border-color: oklch(85% 0.03 var(--base-hue));

    --btn-primary-bg: oklch(60% 0.35 var(--base-hue));
    --btn-success-bg: oklch(75% 0.25 140);
    --btn-info-bg: oklch(65% 0.3 220);
    --btn-warning-bg: oklch(65% 0.25 80);
    --btn-danger-bg: oklch(55% 0.35 var(--danger-base));

    --item-hover-bg: color-mix(in oklch, var(--accent-color), white 25%);
    --item-hover-shadow: 0 2px 15px oklch(0 0 0 / 0.15);
    --drag-over-bg: oklch(92% 0.01 var(--base-hue) / 0.3);
    --drag-over-shadow: 0 0 20px oklch(0 0 0 / 0.1);

    --text-secondary: oklch(45% 0.03 0);
    --success-text: oklch(40% 0.25 140);
    --info-text: oklch(40% 0.25 220);
    --warning-text: oklch(45% 0.25 80);
    --danger-text: oklch(45% 0.35 30);

    --ocean-bg: oklch(85% 0.18 calc(var(--base-hue) + 220));
    --highlight-color: oklch(90% 0.15 calc(var(--base-hue) + 90));
    --soft-highlight: oklch(85% 0.1 calc(var(--base-hue) + 90));
}

.fill, 
.fill .container {
    height: auto;
    min-height: 50px;
    overflow: visible;
}

.navbar-container {
    align-items: center;
    display: flex;
    justify-content: space-between;
    width: calc(100% - 15rem);
    margin-left: 15rem; 
    padding: 10px 5px;
    transition: all 0.3s ease;
}

.navbar-left,
.navbar-right {
    align-items: center;
    display: flex;
    gap: 15px;
}

@media (max-width: 768px) {
    .navbar-container {
        width: 100%;
        margin-left: 0;
        padding-left: 5px;
        margin-top: -2px; 
    }
    .navbar-left,
    .navbar-right {
        gap: 11.5px;
    }
}

.ip-container {
    display: flex;
    align-items: center;
    position: relative;
    z-index: 1;
    padding: 15px 20px;
    min-width: 300px;
    transition: all 0.3s ease;
    gap: 20px;
    white-space: nowrap;
}

.imgBox {
    width: 60px;
    height: 40px;
    min-width: 60px;
    min-height: 40px;
    box-sizing: border-box;
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
}

.imgBox img#flag {
    width: 60px;
    height: 40px;
    object-fit: contain;
    display: block;
}

.imgBox .loading {
    position: absolute;
    left: 0; top: 0;
    width: 100%; height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    background: transparent;
    z-index: 10;
}

.imgBox .loading img {
    max-width: 50px;
    max-height: 50px;
    width: auto;
    height: auto;
}

.ip-container .ip-text {
    line-height: 1.4;
    min-width: 180px;
    transform: translateY(3px);
    display: flex;
    flex-direction: column;
    justify-content: center;
}

.ip-container #d-ip {
    color: #09B63F !important;
    font-family: 'Comic Neue', cursive !important;
    font-weight: 900;
    font-size: 15px;
    position: relative;
    left: 1em;
    margin-bottom: 3px;
    text-indent: -0.7ch;
}

.ip-container #ipip {
    color: #FF00FF !important;
    font-family: 'Comic Neue', cursive !important;
    font-weight: bold;
    font-size: 15px;
    display: block;
    margin-top: 3px;
    margin-bottom: 3px;
}

@media (max-width: 768px) {
    .ip-container {
        display: none !important;
    }
}

.nav-icon {
    align-items: center;
    background: transparent;
    border-radius: 6px;
    box-shadow: 0 4px 4px 2px #00ffff9a;
    cursor: pointer;
    display: flex;
    height: 40px;
    justify-content: center;
    overflow: hidden;
    position: relative;
    transition: transform 0.2s ease, box-shadow 0.2s ease;
    width: 40px;
}

.nav-icon img {
    height: 40px;
    left: 50%;
    object-fit: cover;
    position: absolute;
    top: 50%;
    transform: translate(-50%, -50%);
    transition: filter 0.2s ease-in-out;
    width: 40px;
}

.nav-icon:hover img {
    filter: drop-shadow(0 0 5px cyan);
}

.site-icon {
    cursor: pointer;
    height: 48px;
    position: relative;
    width: 48px;
}

.site-icon img {
    border-radius: 50%;
    height: 48px;
    left: 0;
    object-fit: cover;
    position: absolute;
    top: 0;
    width: 48px;
}

.site-icon img#github-normal,
.site-icon img#github-gray {
    height: 55px;
    width: 55px;
}

.navbar-right .site-icon {
    position: relative;
    top: 3px;
}

@media (max-width: 1044px) {
    .site-icon {
        display: none !important;
    }
}

#result-overlay {
    backdrop-filter: blur(4px);
    background: rgba(0, 0, 0, 0.5);
    border-radius: 8px;
    color: #fff;
    display: none;
    font-size: 18px;
    font-weight: bold;
    right: 2%;
    top: 50%;
    max-width: 90%;
    padding: 16px 8px;
    pointer-events: none;
    position: fixed;
    text-align: center;
    transform: translateY(-50%);
    word-break: break-word;
    z-index: 9999;
    writing-mode: vertical-rl;
    text-orientation: mixed;
    height: auto;
    white-space: nowrap;
}

@font-face {
    font-display: swap;
    font-family: 'Fredoka One';
    font-style: normal;
    font-weight: 700;
    src: url('/luci-static/spectra/fonts/fredoka-v16-latin-700.woff2') format('woff2');
}

@keyframes textColorChange {
    0%, 100% { color: #28edf0; }
    50% { color: #28edf0; }
}

.royal-style {
    align-items: center;
    animation: textColorChange 3s infinite linear;
    box-sizing: border-box;
    color: #28edf0;
    display: inline-flex;
    font-family: 'Fredoka One', cursive !important;
    font-size: 35px;
    font-weight: 700;
    justify-content: center;
    letter-spacing: 2px;
    line-height: 1.1;
    min-width: 220px;
    padding: 2px 5px;
    text-decoration: none !important;
    text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.2),
                -2px -2px 5px rgba(255, 255, 255, 0.5);
    transition: all 0.3s;
    -webkit-text-stroke: 1px rgba(0, 0, 0, 0.5);
}

.royal-style:hover {
    filter: drop-shadow(2px 2px 3px rgba(0, 0, 0, 0.3));
    transform: skew(-5deg);
}

.inner {
    display: none !important;
}

@media screen and (max-width: 600px) {
    .block h4 {
        font-size: 0.7rem !important;
    }
    .block {
        padding: 0.3rem !important;
    }
    .block img {
        width: 36px !important;
    }
}

@supports (-webkit-touch-callout: none) {
    .main {
        min-height: 100vh;
    }
}

@media (max-width: 768px) {
    .main {
        min-height: 100vh;
    }
}

@media (max-width: 768px) {
    #networkIcon {
        display: none;
    }
}

.main-left .sidenav-header {
    display: flex;
    justify-content: center;
    align-items: center;
}

@media (max-width: 1380px) {
    #ipip {
        display: inline-block;
        max-width: 180px;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        vertical-align: middle;
    }
}

@media (max-width: 768px), (max-width: 1680px) and (min-width: 769px) {
  .weather-card {
    display: none !important;
  }
}

#cityNameDisplay, #weatherText {
    font-family: 'Fredoka One', cursive !important;
    font-weight: bold;
}

.navbar-left,
.ip-container,
.weather-card,
.navbar-right {
    flex-shrink: 0;
    flex-grow: 0;
}

.cbi-section,
.main-left {
    background-color: var(--bg-container);
}

body {
    color: var(--text-primary) !important;
    background-color: var(--card-bg) !important;
}

.cbi-section-create .cbi-button-add {
    background: #007BFF !important;
    color: #FFFFFF !important;
    opacity: 1 !important;
}

.tr.cbi-rowstyle-2 {
    background-color: var(--card-bg) !important;
}

.controls .pager.center {
    background-color: var(--card-bg) !important;
    opacity: 1 !important;
}

.app-container_status-label_bg[data-v-17b89cb7] {
    background-color: var(--card-bg) !important;
}

.container .table-wrapper .table-header[data-v-4ec945e0] {
    background-color: var(--bg-container) !important;
}

fieldset.cbi-section > textarea,
div#command-output > textarea {
    background-color: var(--card-bg) !important;
    color: var(--text-primary) !important;
    border: 1px solid var(--border-color) !important;
    border-radius: var(--radius) !important;
    padding: 12px !important;
}

div.nft-chain-hook {
    margin-left: 10px !important;
    padding-left: 10px !important;
}

div.nav-container > button.btn_styles {
    color: white !important;
}

.block.pure-g {
    background-color: var(--card-bg) !important;
}

.developer-container {
    background-color: var(--card-bg) !important;
}

.developer-container img,
.developer-container i {
    margin-top: 15px;
}

#logo.royal-style {
    color: var(--accent-color) !important;
}

.detail-item span {
    color: black !important;
}

.detail-item span i {
    color: #6c757d !important;
}

#openEditModal,
#openEditModal .bi,
#openEditModal svg {
    color: #000 !important;
    fill: #000 !important;
    stroke: #000 !important;
}

#mode-popup .button-grid button span,
#mode-popup .button-grid button {
    color: white !important;
}

.nav-container .btn_styles,
.nav-container .btn_styles * {
    color: white !important;
}

[data-theme="dark"] .block.pure-g {
    background-color: white !important;
}

[data-theme="dark"] .pure-u-2-3 h4 {
    background-color: #E6E6FA !important;
}

[data-theme="dark"] {
    #status_node,
    #status_github,
    #status_google,
    #status_baidu,
    #status_tcp_node {
        color: black !important;
        font-weight: 600 !important;
    }
}
</style>
    <meta charset="utf-8">
    <title>
        <%=striptags( (boardinfo.hostname or "?") .. ( (node and node.title) and ' - ' .. translate(node.title) or '')) %>
        - LuCI</title>
    <meta content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0" name="viewport" />
    <meta name="format-detection" content="telephone=no, email=no" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="mobile-web-app-capable" content="yes">
    <meta name="x5-fullscreen" content="true">
    <meta name="full-screen" content="yes">
    <meta name="x5-page-mode" content="app">
    <meta name="browsermode" content="application">
    <meta name="msapplication-tap-highlight" content="no">
    <meta name="msapplication-TileColor" content="<%=bar_color%>">
    <meta name="application-name" content="<%=striptags( (boardinfo.hostname or "?") ) %> - LuCI">
    <meta name="apple-mobile-web-app-title" content="<%=striptags( (boardinfo.hostname or "?") ) %> - LuCI">
    <link rel="apple-touch-icon" sizes="60x60" href="<%=media%>/icon/apple-icon-60x60.png">
    <link rel="apple-touch-icon" sizes="72x72" href="<%=media%>/icon/apple-icon-72x72.png">
    <link rel="apple-touch-icon" sizes="144x144" href="<%=media%>/icon/apple-icon-144x144.png">
    <link rel="icon" type="image/png" sizes="192x192" href="<%=media%>/icon/android-icon-192x192.png">
    <link rel="icon" type="image/png" sizes="32x32" href="<%=media%>/icon/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="96x96" href="<%=media%>/icon/favicon-96x96.png">
    <link rel="icon" type="image/png" sizes="16x16" href="<%=media%>/icon/favicon-16x16.png">
    <link rel="manifest" href="<%=media%>/icon/manifest.json"  crossorigin="use-credentials">
    <meta name="msapplication-TileColor" content="<%=bar_color%>">
    <meta name="msapplication-TileImage" content="<%=media%>/icon/ms-icon-144x144.png">
    <meta name="theme-color" content="<%=bar_color%>">
    <link rel="stylesheet" href="<%=media%>/css/cascade.css?v=2.2.10.10">
    <script src="/luci-static/spectra/js/custom.js"></script>
    <link href="/luci-static/spectra/css/bootstrap-icons.css" rel="stylesheet">
    <link href="/luci-static/spectra/css/weather-icons.min.css" rel="stylesheet">
    <style title="text/css">
        <% if mode == 'normal' then %>
            @media (prefers-color-scheme: dark) {
                <%=dark_css%>
            }
        <% elseif mode == 'dark' then %>
            <%=dark_css%>
        <% end -%>
        <% if fs.access('/etc/config/spectra') then %>
        :root {
            --primary: <%=primary%>;
            --dark-primary: <%=dark_primary%>;
            --blur-radius:<%=blur_radius%>px;
            --blur-opacity:<%=blur_opacity%>;
            --blur-radius-dark:<%=blur_radius_dark%>px;
            --blur-opacity-dark:<%=blur_opacity_dark%>;
        }
        <% end -%>
    </style>
	<link rel="shortcut icon" href="<%=media%>/favicon.ico">
        <link rel="stylesheet" href="<%=resource%>/spectra/easeicon.css?v=2.4">
	<% if node and node.css then %>
	<link rel="stylesheet" href="<%=resource%>/<%=node.css%>">
	<% end -%>
	<% if css then %>
	<style title="text/css">
		<%=css %>
	</style>
	<% end -%>
	<script src="<%=media%>/js/polyfill.min.js?v=2.2.10.10"></script>
	<script src="<%=url('admin/translations', luci.i18n.context.lang)%>?v=<%=ver.luciversion%>"></script>
	<script src="<%=resource%>/cbi.js?v=<%=ver.luciversion%>"></script>
	<script src="<%=resource%>/luci.js?v=<%=ver.luciversion%>"></script>
	<script src="<%=media%>/js/jquery.min.js?v=3.5.1"></script>
</head>

<body
	theme="<%=mode%>"
	class="lang_<%=luci.i18n.context.lang%> <% if node then %><%= striptags( node.title ) %><% end %> <% if luci.dispatcher.context.authsession then %>logged-in<% end %>"
	data-page="<%= table.concat(disp.context.requestpath, "-") %>">

<div class="wrapper">
		<span></span>
		<span></span>
		<span></span>
		<span></span>
		<span></span>
		<span></span>
		<span></span>
		<span></span>
		<span></span>
		<span></span>
		<span></span>
		<span></span>
		<span></span>
</div>
<header>
    <div class="fill">
        <div class="container">
            <a class="showSide"></a>
        <div class="navbar-container">
            <div class="navbar-left">
                <div class="nav-icon">
                    <a id="oc" href="/cgi-bin/luci/admin/services/openclash">
                        <img src="<%=media%>/navbar/clash.gif" title="OpenClash">
                    </a>
                </div>
                <div class="nav-icon">
                    <a href="/cgi-bin/luci/admin/services/nekobox">
                        <img src="<%=media%>/navbar/yacd.gif" title="NekoBox">
                    </a>
                </div>
                <div class="nav-icon">
                    <a href="/cgi-bin/luci/admin/services/spectra">
                        <img src="<%=media%>/navbar/tinyfm.gif" title="Spectra">
                    </a>
                </div>
                <div class="nav-icon">
                    <a href="/cgi-bin/luci/admin/status/realtime">
                        <img src="<%=media%>/navbar/netmon.gif" title="Realtime">
                    </a>
                </div>
                <div class="nav-icon">
                    <a href="/cgi-bin/luci/admin/services/ttyd">
                        <img src="<%=media%>/navbar/terminal.gif" title="TTYD">
                    </a>
                </div>
                <div class="nav-icon">
                    <a href="/cgi-bin/luci/admin/services/homeproxy">
                        <img src="<%=media%>/navbar/modem.gif" title="HomeProxy">
                    </a>
                </div>
                <div class="nav-icon" id="networkIcon">
                    <a href="/cgi-bin/luci/admin/network/network">
                        <img src="<%=media%>/navbar/wifi.gif" title="Interface">
                    </a>
                </div>
                <div class="nav-icon" id="wifiIcon">
                        <img id="settings-icon" src="<%=media%>/navbar/interface.gif" alt="Interface" style="cursor:pointer;">
                </div>
            </div>

            <div class="weather-card" style="position:relative; display:flex; align-items:center; padding:10px; border-radius:8px; color:white; width:280px; height:50px; margin-top:3px;">
              <div style="flex:1; display:flex; align-items:center; gap:25px;">   
                  <div id="iconContainer" style="position:relative; width:50px; height:50px;"> 
                      <img id="loadingIcon" src="/luci-static/ipip/img/loading.svg" style="position:absolute; top:50%; left:50%; transform:translate(-50%, -50%); width:50px; height:50px;" />
                      <i id="weatherIcon" class="wi" style="position:absolute; top:50%; left:50%; transform:translate(-50%, -50%); font-size:40px; width:40px; height:40px; display:none; color:#FFD700;"></i>
                  </div>
                <div style="display:flex; flex-direction:column; justify-content:center; line-height:1;">
                  <div id="cityNameDisplay" style="font-weight:bold; font-size:16px; color:rgb(9, 182, 63); margin-bottom:8px;">
                  </div>
                  <div id="weatherText" style="font-size:16px; color:rgb(255, 0, 255);">
                  </div>
                </div>
              </div>
              <button id="setCityBtn"style="background:var(--accent-color); border:none; border-radius:50%; width:28px; height:28px; cursor:pointer; display:flex; align-items:center; justify-content:center; line-height:1; font-size:14px; margin-right:8px;"><i class="bi bi-gear-fill" style="color:white;"></i></button>
              <button type="button" onclick="document.getElementById('colorPicker').click()" style="background:var(--accent-color); border:none; border-radius:50%; width:28px; height:28px; cursor:pointer; display:flex; align-items:center; justify-content:center; line-height:1; font-size:14px;"><i class="bi bi-palette-fill" style="color:white;"></i></button>
              <input type="color" id="colorPicker" value="#0f3460" style="display: none;">
            </div>

            <div class="ip-container" style="display: none;">
                <div class="imgBox">
                    <img id="flag" title="">
                    <div class="loading" id="loading" style="display:none;">
                        <img src="/luci-static/ipip/img/loading.svg" alt="loading">
                     </div>
                </div>
                <div class="ip-text">
                    <span id="d-ip"></span>
                    <span id="ipip"></span>
                </div>
            </div>

            <div id="result-overlay"></div>

            <div id="result" class="navbar-right">
                <div class="site-icon" onclick="pingHost('baidu', 'Baidu', 'https://www.baidu.com')">
                    <img src="/luci-static/ipip/img/site_icon_01.png" id="baidu-normal" alt="Baidu">
                    <img src="/luci-static/ipip/img/site_icon1_01.png" id="baidu-gray" alt="Baidu">
                </div>
                <div class="site-icon" onclick="pingHost('taobao', 'Taobao', 'https://www.taobao.com')">
                    <img src="/luci-static/ipip/img/site_icon_02.png" id="taobao-normal" alt="Taobao">
                    <img src="/luci-static/ipip/img/site_icon1_02.png" id="taobao-gray" alt="Taobao">
                </div>
                <div class="site-icon" onclick="pingHost('google', 'Google', 'https://www.google.com')">
                    <img src="/luci-static/ipip/img/site_icon_03.png" id="google-normal" alt="Google">
                    <img src="/luci-static/ipip/img/site_icon1_03.png" id="google-gray" alt="Google">
                </div>
                <div class="site-icon" onclick="pingHost('youtube', 'YouTube', 'https://www.youtube.com')">
                    <img src="/luci-static/ipip/img/site_icon_04.png" id="youtube-normal" alt="YouTube">
                    <img src="/luci-static/ipip/img/site_icon1_04.png" id="youtube-gray" alt="YouTube">
                </div>
            </div>
        </div>
    </div>
</div>

<script>
const translationsbackground = {
    zh: "背景颜色 %s 已成功应用。",
    en: "Background color %s has been applied successfully.",
    hk: "背景顏色 %s 已成功應用。",
    de: "Hintergrundfarbe %s wurde erfolgreich angewendet.",
    fr: "La couleur d'arrière-plan %s a été appliquée avec succès.",
    ko: "배경색 %s 이(가) 성공적으로 적용되었습니다.",
    ja: "背景色 %s が正常に適用されました。",
    bn: "ব্যাকগ্রাউন্ড কালার %s সফলভাবে প্রয়োগ করা হয়েছে।",
    vi: "Màu nền %s đã được áp dụng thành công.",
    th: "สีพื้นหลัง %s ถูกนำไปใช้สำเร็จแล้ว",
    ar: "تم تطبيق لون الخلفية %s بنجاح.",
    ru: "Фоновый цвет %s был успешно применен.",
    es: "El color de fondo %s se ha aplicado correctamente."
};

async function getbackgroundLangText() {
    try {
        const lang = await getRealTimeLanguage();
        return translationsbackground[lang] || translationsbackground['zh'];
    } catch (e) {
        console.error('Failed to get background language:', e);
        return translationsbackground['zh'];
    }
}

document.addEventListener("DOMContentLoaded", () => {
    let currentHue = 260, currentChroma = 0.10, currentLightness = 30;
    let recentColors = [];

    function hexToRgb(hex) {
        const fullHex = hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i, 
            (_, r, g, b) => `#${r}${r}${g}${g}${b}${b}`);
        const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(fullHex);
        return result ? {
            r: parseInt(result[1], 16),
            g: parseInt(result[2], 16),
            b: parseInt(result[3], 16)
        } : { r: 0, g: 0, b: 0 };
    }

    function rgbToLinear(c) {
        const normalized = c / 255;
        return normalized <= 0.04045 
            ? normalized / 12.92 
            : Math.pow((normalized + 0.055) / 1.055, 2.4);
    }

    function rgbToOklch(r, g, b) {
        const [lr, lg, lb] = [r, g, b].map(rgbToLinear);
        const l = 0.4122214708 * lr + 0.5363325363 * lg + 0.0514459929 * lb;
        const m = 0.2119034982 * lr + 0.6806995451 * lg + 0.1073969566 * lb;
        const s = 0.0883024619 * lr + 0.2817188376 * lg + 0.6299787005 * lb;
        const l_ = Math.cbrt(l);
        const m_ = Math.cbrt(m);
        const s_ = Math.cbrt(s);
        const L = 0.2104542553 * l_ + 0.7936177850 * m_ - 0.0040720468 * s_;
        const a = 1.9779984951 * l_ - 2.4285922050 * m_ + 0.4505937099 * s_;
        const b_ = 0.0259040371 * l_ + 0.7827717662 * m_ - 0.8086757660 * s_;
        const c = Math.sqrt(a ** 2 + b_ ** 2);
        let h = Math.atan2(b_, a) * 180 / Math.PI;
        h = h >= 0 ? h : h + 360;
        return { l: L * 100, c: c, h: h };
    }

    function hexToOklch(hex) {
        const { r, g, b } = hexToRgb(hex);
        return rgbToOklch(r, g, b);
    }

    function oklchToHex(h, c, l = 50) {
        const L = l / 100;
        const a = c * Math.cos(h * Math.PI / 180);
        const b = c * Math.sin(h * Math.PI / 180);
        const l_ = L + 0.3963377774 * a + 0.2158037573 * b;
        const m_ = L - 0.1055613458 * a - 0.0638541728 * b;
        const s_ = L - 0.0894841775 * a - 1.2914855480 * b;
        const [lr, lg, lb] = [l_, m_, s_].map(v => v ** 3);
        const r = 4.0767416621 * lr - 3.3077115913 * lg + 0.2309699292 * lb;
        const g = -1.2684380046 * lr + 2.6097574011 * lg - 0.3413193965 * lb;
        const bLinear = -0.0041960863 * lr - 0.7034186147 * lg + 1.7076147010 * lb;
        const toSRGB = (v) => {
            v = Math.min(Math.max(v, 0), 1);
            return v > 0.0031308 
                ? 1.055 * (v ** (1/2.4)) - 0.055 
                : 12.92 * v;
        };
        const [R, G, B] = [r, g, bLinear].map(v => Math.round(toSRGB(v) * 255));
        return `#${[R, G, B].map(x => x.toString(16).padStart(2, '0')).join('')}`.toUpperCase();
    }

    function updateAllCSSVariables() {
        const root = document.documentElement;

        root.style.setProperty('--base-hue', currentHue);
        root.style.setProperty('--base-chroma', currentChroma);
        root.style.setProperty('--base-hue-1', currentHue + 20);
        root.style.setProperty('--base-hue-2', currentHue + 200);
        root.style.setProperty('--base-hue-3', currentHue + 135);
        root.style.setProperty('--base-hue-4', currentHue + 80);
        root.style.setProperty('--base-hue-5', currentHue + 270);
        root.style.setProperty('--base-hue-6', currentHue + 170);
        root.style.setProperty('--base-hue-7', currentHue + 340);
        
        const isLight = currentLightness > 60;
        const theme = isLight ? 'light' : 'dark';
        root.setAttribute('data-theme', theme);
        console.log('Updated theme to:', theme);
    }

    async function applyColorSettings(showMessage = false) {
        const settings = {
            hue: currentHue,
            chroma: currentChroma,
            lightness: currentLightness,
            recentColors: recentColors || []
        };
        localStorage.setItem('appColorSettings', JSON.stringify(settings));

        updateAllCSSVariables();
        updateTextPrimary(currentLightness);

        if (showMessage) {
            const hexColor = oklchToHex(currentHue, currentChroma, currentLightness);
        
            const messageTemplate = await getbackgroundLangText();
            const successMsg = messageTemplate.replace('%s', hexColor);
        
            console.log(successMsg);
        
            if (typeof showWeatherLog === 'function') {
                showWeatherLog(successMsg);
            }
            if (typeof speakWeatherMessage === 'function') {
                speakWeatherMessage(successMsg);
            }
        }
    }

    function updateTextPrimary(currentL) {
        const textL = currentL > 60 ? 20 : 95;
        document.documentElement.style.setProperty('--text-primary', `oklch(${textL}% 0 0)`);
    }

    function addToRecentColors(color) {
        recentColors = recentColors.filter(c => c !== color);
        recentColors.unshift(color);
    
        if (recentColors.length > 10) {
            recentColors.pop();
        }
    
        localStorage.setItem('appColorSettings', JSON.stringify({
            recentColors,
            hue: currentHue,
            chroma: currentChroma,
            lightness: currentLightness
        }));
    }

    function initColorSettings() {
        const savedSettings = localStorage.getItem('appColorSettings');
        if (savedSettings) {
            const settings = JSON.parse(savedSettings);
            recentColors = settings.recentColors || [];
            currentHue = settings.hue || 260;
            currentChroma = settings.chroma || 0.10;
            currentLightness = settings.lightness || 30;
        
            document.getElementById('colorPicker').value = oklchToHex(currentHue, currentChroma, currentLightness);
            applyColorSettings(false);
        } else {
            currentHue = 260;
            currentChroma = 0.10;
            currentLightness = 30;
            document.getElementById('colorPicker').value = oklchToHex(currentHue, currentChroma, currentLightness);
            applyColorSettings(false);
        }

        initColorPickerButton();
    }

    function initColorSettings() {
        const savedSettings = localStorage.getItem('appColorSettings');
        if (savedSettings) {
            const settings = JSON.parse(savedSettings);
            recentColors = settings.recentColors || [];
            currentHue = settings.hue || 260;
            currentChroma = settings.chroma || 0.10;
            currentLightness = settings.lightness || 30;
        
            document.getElementById('colorPicker').value = oklchToHex(currentHue, currentChroma, currentLightness);
            applyColorSettings(false);
        } else {
            currentHue = 260;
            currentChroma = 0.10;
            currentLightness = 30;
            document.getElementById('colorPicker').value = oklchToHex(currentHue, currentChroma, currentLightness);
            applyColorSettings(false);
        }    
        initColorPickerButton();

    }

    async function initColorPickerButton() {
        const colorButton = document.querySelector('button[onclick*="colorPicker"]');
        if (!colorButton) return;

        const translations = {
            zh: "选择背景颜色",
            en: "Select background color",
            hk: "選擇背景顏色",
            de: "Hintergrundfarbe auswählen",
            fr: "Sélectionner la couleur d'arrière-plan",
            ko: "배경색 선택",
            ja: "背景色を選択",
            bn: "ব্যাকগ্রাউন্ড কালার নির্বাচন করুন",
            vi: "Chọn màu nền",
            th: "เลือกสีพื้นหลัง",
            ar: "اختر لون الخلفية",
            ru: "Выбрать цвет фона",
            es: "Seleccionar color de fondo"
        };

        try {
            const lang = await getRealTimeLanguage();
            colorButton.title = translations[lang] || translations['zh'];
        } catch (e) {
            colorButton.title = translations['zh'];
        }
    }

    const picker = document.getElementById("colorPicker");
    picker.addEventListener('input', (event) => {
        const color = event.target.value;
        console.log('Color picker selected:', color);
        
        const { h, c, l } = hexToOklch(color);
        currentHue = h;
        currentChroma = c;
        currentLightness = l;
        
        applyColorSettings(true);
        addToRecentColors(color);
    });

    initColorSettings();
});
</script>

<script type="text/javascript">
const _IMG = '/luci-static/ipip/';
const translate = {};

let cachedIP = null;
let translationEnabled = localStorage.getItem('translationEnabled') !== 'false';
let currentLanguage = 'zh-CN';

const translationsIP = {
    zh: {
        unknown: '未知',
        panel: '控制面板',
        clickRefresh: '点击刷新 IP 地址',
        failedUpdate: '更新 IP 信息失败',
        checking: '获取中...',
        failed: '获取 IP 信息失败',
        translate: '翻译',
        spectraConfig: "Spectra 主题设置",
        home: "首页",
        manager: "文件助手",
        editDatabase: '编辑数据库',
        login: '登录'
    },
    en: {
        unknown: 'Unknown',
        panel: 'Control Panel',
        clickRefresh: 'Click to refresh IP address',
        failedUpdate: 'Failed to update IP information',
        checking: 'Checking...',
        failed: 'Failed to get IP information',
        translate: 'Translate',
        spectraConfig: 'Spectra Config',
        home: 'Home',
        manager: 'Manager',
        editDatabase: 'Edit Database',
        login: 'Login'
    },
    hk: {
        unknown: '未知',
        panel: '控制面板',
        clickRefresh: '點擊刷新 IP 地址',
        failedUpdate: '更新 IP 資訊失敗',
        checking: '獲取中...',
        failed: '獲取 IP 資訊失敗',
        translate: '翻譯',
        spectraConfig: 'Spectra 主題設定',
        home: '首頁',
        manager: '檔案管理',
        editDatabase: '編輯資料庫',
        login: '登入'
    },
    de: {
        unknown: 'Unbekannt',
        panel: 'Systemsteuerung',
        clickRefresh: 'Klicken, um die IP-Adresse zu aktualisieren',
        failedUpdate: 'IP-Informationen konnten nicht aktualisiert werden',
        checking: 'Überprüfung...',
        failed: 'IP-Informationen konnten nicht abgerufen werden',
        translate: 'Übersetzen',
        spectraConfig: 'Spectra Konfiguration',
        home: 'Startseite',
        manager: 'Dateimanager',
        editDatabase: 'Datenbank bearbeiten'
    },
    fr: {
        unknown: 'Inconnu',
        panel: 'Panneau de configuration',
        clickRefresh: 'Cliquez pour actualiser l\'adresse IP',
        failedUpdate: 'Échec de la mise à jour des informations IP',
        checking: 'Vérification...',
        failed: 'Impossible d\'obtenir les informations IP',
        translate: 'Traduire',
        spectraConfig: 'Configuration Spectra',
        home: 'Accueil',
        manager: 'Gestionnaire de fichiers',
        editDatabase: 'Modifier la base de données'
    },
    ko: {
        unknown: '알 수 없음',
        panel: '제어판',
        clickRefresh: 'IP 주소를 새로 고치려면 클릭',
        failedUpdate: 'IP 정보 업데이트 실패',
        checking: '확인 중...',
        failed: 'IP 정보 가져오기 실패',
        translate: '번역',
        spectraConfig: 'Spectra 설정',
        home: '홈',
        manager: '파일 관리자',
        editDatabase: '데이터베이스 편집'
    },
    ja: {
        unknown: '不明',
        panel: 'コントロールパネル',
        clickRefresh: 'クリックして IP アドレスを更新',
        failedUpdate: 'IP 情報の更新に失敗しました',
        checking: '確認中...',
        failed: 'IP 情報の取得に失敗しました',
        translate: '翻訳',
        spectraConfig: 'Spectra 設定',
        home: 'ホーム',
        manager: 'ファイルマネージャー',
        editDatabase: 'データベースを編集'
    },
    bn: {
        unknown: 'অজানা',
        panel: 'কন্ট্রোল প্যানেল',
        clickRefresh: 'IP ঠিকানা রিফ্রেশ করতে ক্লিক করুন',
        failedUpdate: 'IP তথ্য আপডেট করতে ব্যর্থ',
        checking: 'চেক করা হচ্ছে...',
        failed: 'IP তথ্য পেতে ব্যর্থ',
        translate: 'অনুবাদ',
        spectraConfig: 'Spectra কনফিগারেশন',
        home: 'হোম',
        manager: 'ফাইল ম্যানেজার',
        editDatabase: 'ডাটাবেস সম্পাদনা করুন'
    },
    vi: {
        unknown: 'Không xác định',
        panel: 'Bảng điều khiển',
        clickRefresh: 'Nhấn để làm mới địa chỉ IP',
        failedUpdate: 'Cập nhật thông tin IP thất bại',
        checking: 'Đang kiểm tra...',
        failed: 'Không thể lấy thông tin IP',
        translate: 'Dịch',
        spectraConfig: 'Cấu hình Spectra',
        home: 'Trang chủ',
        manager: 'Trình quản lý tệp',
        editDatabase: 'Chỉnh sửa cơ sở dữ liệu'
    },
    th: {
        unknown: 'ไม่ทราบ',
        panel: 'แผงควบคุม',
        clickRefresh: 'คลิกเพื่อรีเฟรชที่อยู่ IP',
        failedUpdate: 'อัปเดตข้อมูล IP ล้มเหลว',
        checking: 'กำลังตรวจสอบ...',
        failed: 'ไม่สามารถรับข้อมูล IP ได้',
        translate: 'แปล',
        spectraConfig: 'การตั้งค่า Spectra',
        home: 'หน้าหลัก',
        manager: 'ตัวจัดการไฟล์',
        editDatabase: 'แก้ไขฐานข้อมูล'
    },
    ar: {
        unknown: 'غير معروف',
        panel: 'لوحة التحكم',
        clickRefresh: 'انقر لتحديث عنوان IP',
        failedUpdate: 'فشل تحديث معلومات IP',
        checking: 'جارٍ التحقق...',
        failed: 'فشل الحصول على معلومات IP',
        translate: 'ترجمة',
        spectraConfig: 'إعدادات Spectra',
        home: 'الصفحة الرئيسية',
        manager: 'مدير الملفات',
        editDatabase: 'تحرير قاعدة البيانات'
    },
    ru: {
        unknown: 'Неизвестно',
        panel: 'Панель управления',
        clickRefresh: 'Нажмите, чтобы обновить IP-адрес',
        failedUpdate: 'Не удалось обновить информацию об IP',
        checking: 'Проверка...',
        failed: 'Не удалось получить информацию об IP',
        translate: 'Перевести',
        spectraConfig: 'Конфигурация Spectra',
        home: 'Главная',
        manager: 'Файловый менеджер',
        editDatabase: 'Редактировать базу данных'
    },
    es: {
        unknown: 'Desconocido',
        panel: 'Panel de control',
        clickRefresh: 'Haga clic para actualizar la dirección IP',
        failedUpdate: 'Error al actualizar la información IP',
        checking: 'Comprobando...',
        failed: 'Error al obtener información IP',
        translate: 'Traducir',
        spectraConfig: 'Configuración de Spectra',
        home: 'Inicio',
        manager: 'Administrador de archivos',
        editDatabase: 'Editar base de datos'
    }
};

async function initIPDisplay() {
    const lang = await getRealTimeLanguage();
    const text = translationsIP[lang] || translationsIP['zh'];
    const modalText = modalTranslations[lang] || modalTranslations['zh'];

    const flag = document.getElementById('flag');
    if (flag) flag.title = text.clickRefresh || 'Click to Refresh';

    const wifiIcon = document.getElementById('settings-icon');
    if (wifiIcon) wifiIcon.title = text.panel || 'Panel';

    const setCityBtn = document.getElementById('setCityBtn');
    if (setCityBtn) setCityBtn.title = modalText.modalTitle || 'Set City';

    const spectraConfigLink = document.querySelector('a[data-title="Spectra_Config"]');
    if (spectraConfigLink) {
        spectraConfigLink.textContent = text.spectraConfig || 'Spectra Config';
    }

    const homeLink = document.querySelector('li.tabmenu-item-index a[href$="/spectra/index"]');
    if (homeLink) {
        homeLink.textContent = text.home || 'Home';
    }

    const managerLink = document.querySelector('li.tabmenu-item-filekit a[href$="/spectra/filekit"]');
    if (managerLink) {
        managerLink.textContent = text.manager || 'Manager';

    }
}

document.addEventListener('DOMContentLoaded', () => {
    initIPDisplay();
});

async function getCurrentLanguage() {
    try {
        const response = await fetch('/luci-static/spectra/bgm/language.txt', {cache: 'no-store'});
        if (response.ok) {
            const lang = await response.text();
            return lang.trim() || 'zh-CN';
        }
    } catch (error) {
        console.error('Failed to read language file:', error);
    }
    return 'zh-CN';
}

async function getRealTimeLanguage() {
    return await getCurrentLanguage();
}

async function onLanguageChange() {
    console.log('Language changed, refreshing display');
    
    const keys = Object.keys(localStorage);
    keys.forEach(key => {
        if (key.startsWith('trans_')) {
            localStorage.removeItem(key);
        }
    });
    
    if (cachedIP) {
        await myAppIP.Ipip(cachedIP, 'ipip');
    }
}

function setupLanguageChangeListener() {
    let lastLanguage = 'zh-CN';

    setInterval(async () => {
        const currentLang = await getRealTimeLanguage();
        if (currentLang !== lastLanguage) {
            console.log('Language changed detected:', currentLang);
            lastLanguage = currentLang;
            onLanguageChange();
        }
    }, 1000);
}

function createTranslationToggle() {
    const toggle = document.createElement('i');
    toggle.className = 'bi bi-translate translation-toggle';
    toggle.style.marginLeft = '8px';
    toggle.style.cursor = 'pointer';
    toggle.style.opacity = '0';
    toggle.style.transition = 'opacity 0.3s';
    toggle.style.color = translationEnabled ? '#28a745' : '#6c757d';

    toggle.addEventListener('click', async () => {
        translationEnabled = !translationEnabled;
        localStorage.setItem('translationEnabled', translationEnabled);
        toggle.style.color = translationEnabled ? '#28a745' : '#6c757d';
        if (cachedIP) await myAppIP.Ipip(cachedIP, 'ipip');
    });

    return toggle;
}

function setupHoverEffect() {
    const ipContainer = document.getElementById('d-ip');
    const toggle = document.querySelector('.translation-toggle');
    if (ipContainer && toggle) {
        ipContainer.addEventListener('mouseenter', () => toggle.style.opacity = '1');
        ipContainer.addEventListener('mouseleave', () => toggle.style.opacity = '0');
    }
}

async function myAppTranslate(text) {
    if (!translationEnabled) return text;
    if (!text || typeof text !== 'string' || text.trim() === '') return text;

    const targetLanguage = await getRealTimeLanguage();
    const langMap = {
        'zh':'zh-CN','zh-tw':'zh-TW','zh-CN':'zh-CN','hk':'zh-TW', 'zh-mo': 'zh-TW',
        'en':'en','ja':'ja','ko':'ko','fr':'fr','de':'de','es':'es',
        'it':'it','pt':'pt','ru':'ru','ar':'ar','hi':'hi','bn':'bn',
        'ms':'ms','id':'id','vi':'vi','th':'th','nl':'nl','pl':'pl',
        'tr':'tr','sv':'sv','no':'no','fi':'fi','da':'da','cs':'cs',
        'he':'he','el':'el','hu':'hu','ro':'ro','sk':'sk','bg':'bg','uk':'uk'
    };
    const targetLang = langMap[targetLanguage] || targetLanguage.split('-')[0];
    if (targetLang.startsWith('en')) return text;

    const cacheKey = `trans_${text}_${targetLang}`;
    const cachedTranslation = localStorage.getItem(cacheKey);
    if (cachedTranslation) return cachedTranslation;

    const apis = [
        { 
            url: `https://api.mymemory.translated.net/get?q=${encodeURIComponent(text)}&langpair=en|${targetLang}`, 
            method: 'GET', 
            parseResponse: d => d && d.responseData && d.responseData.translatedText ? d.responseData.translatedText : text
        },
        { 
            url: `https://translate.googleapis.com/translate_a/single?client=gtx&sl=en&tl=${targetLang}&dt=t&q=${encodeURIComponent(text)}`, 
            method: 'GET', 
            parseResponse: d => Array.isArray(d) && d[0]?.[0]?.[0] ? d[0][0][0] : text
        }
    ];

    for(const api of apis){
        try{
            const response = await fetch(api.url, {
                method: api.method,
                headers: api.headers || {},
                body: api.body || null,
                signal: AbortSignal.timeout(3000)
            });
            
            if(response.ok){
                const data = await response.json();
                const translatedText = api.parseResponse(data);
                
                if (translatedText && translatedText !== text) {
                    localStorage.setItem(cacheKey, translatedText);
                    return translatedText;
                }
            }
        } catch(e){ 
            console.warn(`Translation API ${api.url} failed:`, e);
            continue; 
        }
    }
    return text;
}

async function saveIPCache(data) {
    if (!data.ip) return;
    data.language = await getRealTimeLanguage();
    
    const saveData = {
        ip: data.ip,
        country: data.country || '',
        region: data.region || '',
        city: data.city || '',
        isp: data.isp || '',
        asn: data.asn || '',
        asn_organization: data.asn_organization || '',
        country_code: data.country_code || '',
        timezone: data.timezone || data.time_zone || '',
        latitude: data.latitude || data.lat || '',
        longitude: data.longitude || data.lon || data.lng || '',
        language: data.language,
        translatedCountry: data.translatedCountry || '',
        translatedRegion: data.translatedRegion || '',
        translatedCity: data.translatedCity || '',
        translatedISP: data.translatedISP || '',
        translatedASNOrg: data.translatedASNOrg || ''
    };
    
    console.log('Saving cache with language:', saveData.language);
    
    try {
        const response = await fetch('/luci-static/spectra/bgm/save_ip_cache.php', {
            method: 'POST',
            headers: {'Content-Type':'application/json'},
            body: JSON.stringify(saveData)
        });
            const result = await response.json();
            console.log('Save result:', result);
    } catch (err) { 
        console.error("Failed to save IP cache:", err); 
    }
}

async function getCachedIPInfo(ip) {
    try {
        const resp = await fetch('/luci-static/spectra/bgm/ip_cache.json', {cache:'no-store'});
        const cache = await resp.json();
        const item = cache.find(item=>item.ip===ip);
        if (!item) return null;
        
        const currentLang = await getRealTimeLanguage();
        
        console.log('Cache check - Current language:', currentLang);
        console.log('Available translations:', item.translations ? Object.keys(item.translations) : 'none');
        
        if (item.translations && item.translations[currentLang]) {
            console.log('Using translation for language:', currentLang);
            return {
                ...item,
                ...item.translations[currentLang],
                language: currentLang
            };
        }
        
        console.log('No translation for current language, returning base data');
        return {
            ...item,
            language: currentLang
        };
        
    } catch (err) { 
        console.log('Cache read error:', err);
        return null; 
    }
}

let myAppIP = {
    isRefreshing:false,
    lastGeoData:null,
    ipApis:[
        {url:'https://api.ipify.org?format=json',type:'json',key:'ip'},
        {url:'https://api-ipv4.ip.sb/geoip',type:'json',key:'ip'},
        {url:'https://myip.ipip.net',type:'text'},
        {url:'http://pv.sohu.com/cityjson',type:'text'},
        {url:'https://ipinfo.io/json',type:'json',key:'ip'},
        {url:'https://ipapi.co/json/',type:'json'},
        {url:'https://freegeoip.app/json/',type:'json'},
        {url: ip => `https://ipapi.com/${ip}/json`, type: 'json', concurrent: true},
        {url: ip => `https://api.ip.sb/geoip/${ip}`, type: 'json', concurrent: true},
        {url: ip => `https://ipwho.is/${ip}`, type: 'json', concurrent: true},
        {url: ip => `https://api.ipapi.is/?q=${ip}`, type: 'json', concurrent: true}
    ],

    get:(url,type)=>fetch(url,{method:'GET',cache:'no-store'})
        .then(resp=>type==='text'?Promise.all([resp.ok,resp.status,resp.text(),resp.headers]):Promise.all([resp.ok,resp.status,resp.json(),resp.headers]))
        .then(([ok,status,data,headers])=>ok?{ok,status,data,headers}:Promise.reject(data.error))
        .catch(e=>{console.error("Error fetching data:",e);throw e;}),

    concurrentGeoQuery: async function(ip) {
        const concurrentApis = this.ipApis.filter(api => api.concurrent);
        if (!concurrentApis.length) throw new Error("No concurrent APIs configured");

        return new Promise((resolve, reject) => {
            let resolved = false;
            let completed = 0;

            concurrentApis.forEach(api => {
                const apiUrl = typeof api.url === 'function' ? api.url(ip) : api.url;
                this.get(apiUrl, api.type)
                    .then(resp => {
                        if (!resolved && resp.data) {
                            resolved = true;
                            resolve(resp.data);
                        }
                    })
                    .catch(err => console.warn("Concurrent API failed:", apiUrl, err))
                    .finally(() => {
                        completed++;
                        if (completed === concurrentApis.length && !resolved) {
                            reject(new Error("All concurrent APIs failed"));
                        }
                    });
            });
        });
    },

    fetchIP: async ()=>{
        let error;
        for(let api of myAppIP.ipApis){
            if (api.concurrent) continue;
            
            try{
                const response = await myAppIP.get(api.url,api.type);
                let ipData = api.type==='json' ? (api.key?response.data[api.key]:response.data) : response.data.match(/\d+\.\d+\.\d+\.\d+/)?.[0];
                if(ipData){ cachedIP=ipData; document.getElementById('d-ip').innerHTML=ipData; return ipData; }
            }catch(e){ error=e; continue; }
        }
        throw error||new Error("All IP APIs failed");
    },

    Ipip: async(ip,elID)=>{
        console.log('Ipip called with IP:', ip);
        let cachedData = await getCachedIPInfo(ip);
        const currentLang = await getRealTimeLanguage();       
        console.log('Current language:', currentLang);
        
        if(cachedData && cachedData.translatedCountry) { 
            console.log('Using cached data with translation');
            myAppIP.lastGeoData = cachedData; 
            await myAppIP.updateUI(cachedData,elID); 
            return; 
        }
        
        if(cachedData) {
            console.log('Cached data found but no translation for current language, re-translating');
            
            const baseData = {
                country: cachedData.country || '',
                region: cachedData.region || '',
                city: cachedData.city || '',
                isp: cachedData.isp || '',
                asn_organization: cachedData.asn_organization || '',
                asn: cachedData.asn || '',
                country_code: cachedData.country_code || '',
                timezone: cachedData.timezone || '',
                latitude: cachedData.latitude || '',
                longitude: cachedData.longitude || ''
            };
            
            myAppIP.lastGeoData = {...baseData};
            
            if(translationEnabled){
                console.log('Starting translation for language:', currentLang);
                myAppIP.lastGeoData.translatedCountry = await myAppTranslate(baseData.country);
                myAppIP.lastGeoData.translatedRegion  = await myAppTranslate(baseData.region);
                myAppIP.lastGeoData.translatedCity    = await myAppTranslate(baseData.city);
                myAppIP.lastGeoData.translatedISP     = await myAppTranslate(baseData.isp);
                myAppIP.lastGeoData.translatedASNOrg  = await myAppTranslate(baseData.asn_organization);
                myAppIP.lastGeoData.language = currentLang;
                console.log('Translation completed');
            }
            
            myAppIP.lastGeoData.ip = ip;
            myAppIP.lastGeoData.asn = baseData.asn;
            myAppIP.lastGeoData.country_code = baseData.country_code;          
            await myAppIP.updateUI(myAppIP.lastGeoData,elID);
            saveIPCache(myAppIP.lastGeoData);
            return;
        }

        try {
            const geoData = await this.concurrentGeoQuery(ip);
            cachedIP=ip;
            myAppIP.lastGeoData=geoData;

            const standardizedData = {
                ip: geoData.ip || ip,
                country: geoData.country || geoData.country_name || '',
                region: geoData.region || geoData.region_name || geoData.state || '',
                city: geoData.city || '',
                isp: geoData.isp || geoData.connection?.isp || geoData.org || '',
                asn: geoData.asn || geoData.connection?.asn || '',
                asn_organization: geoData.org || geoData.connection?.org || geoData.connection?.isp || '',
                country_code: geoData.country_code || geoData.countryCode || geoData.country_code || '',
                timezone: geoData.timezone || geoData.time_zone || '',
                latitude: geoData.latitude || geoData.lat || '',
                longitude: geoData.longitude || geoData.lon || geoData.lng || ''
            };

            if(translationEnabled){
                standardizedData.translatedCountry = await myAppTranslate(standardizedData.country||'');
                standardizedData.translatedRegion  = await myAppTranslate(standardizedData.region||'');
                standardizedData.translatedCity    = await myAppTranslate(standardizedData.city||'');
                standardizedData.translatedISP     = await myAppTranslate(standardizedData.isp||'');
                standardizedData.translatedASNOrg  = await myAppTranslate(standardizedData.asn_organization||'');
                standardizedData.language = currentLang;
            }

            await myAppIP.updateUI(standardizedData,elID);
            saveIPCache(standardizedData);
            
        } catch(concurrentError) {
            console.log("Concurrent query failed, falling back to sequential:", concurrentError);
            
            const geoApis = [
                {url:`https://api.ip.sb/geoip/${ip}`,type:'json'},
                {url:'https://myip.ipip.net',type:'text'},
                {url:`http://ip-api.com/json/${ip}`,type:'json'},
                {url:`https://ipinfo.io/${ip}/json`,type:'json'},
                {url:`https://ipapi.co/${ip}/json`,type:'json'},
                {url:`https://freegeoip.app/json/${ip}`,type:'json'}
            ];

            let geoData=null,error;
            for(let api of geoApis){
                try{ 
                    const response = await myAppIP.get(api.url,api.type); 
                    geoData=response.data; 
                    break; 
                }
                catch(e){ error=e; continue; }
            }
            if(!geoData) throw error||new Error("All Geo APIs failed");

            cachedIP=ip;
            myAppIP.lastGeoData=geoData;

            geoData.timezone = geoData.timezone || geoData.time_zone || '';
            geoData.latitude = geoData.latitude || geoData.lat || '';
            geoData.longitude = geoData.longitude || geoData.lon || geoData.lng || '';

            if(translationEnabled){
                geoData.translatedCountry = await myAppTranslate(geoData.country||'');
                geoData.translatedRegion  = await myAppTranslate(geoData.region||'');
                geoData.translatedCity    = await myAppTranslate(geoData.city||'');
                geoData.translatedISP     = await myAppTranslate(geoData.isp||'');
                geoData.translatedASNOrg  = await myAppTranslate(geoData.asn_organization||'');
                geoData.language = currentLang;
            }

            await myAppIP.updateUI(geoData,elID);
            saveIPCache(geoData);
        }
    },

    updateUI: async(data,elID)=>{
        try{
            const lang = await getRealTimeLanguage();
            const text = translationsIP[lang] || translationsIP['zh'];
            const country = translationEnabled && data.translatedCountry ? data.translatedCountry : data.country || text.unknown;
            const region  = translationEnabled && data.translatedRegion  ? data.translatedRegion  : data.region  || "";
            const city    = translationEnabled && data.translatedCity    ? data.translatedCity    : data.city    || "";
            const isp     = translationEnabled && data.translatedISP     ? data.translatedISP     : data.isp     || "";
            const asnOrg  = translationEnabled && data.translatedASNOrg  ? data.translatedASNOrg  : data.asn_organization || "";

            let location = region && city && region!==city ? `${region} ${city}` : region||city||'';
            let displayISP = isp;
            let displayASN = asnOrg;
            if(isp && asnOrg && asnOrg.includes(isp)) displayISP=''; 
            else if(isp && asnOrg && isp.includes(asnOrg)) displayASN='';

            document.getElementById('d-ip').innerHTML = `
                <div class="ip-main" style="cursor:pointer;" onclick="myAppIP.showDetailModal()">
                    ${cachedIP} <span class="badge badge-primary" style="color:#fd7e14;background:#f8f9fa;border-radius:4px;padding:2px 6px;border:1px solid #ddd;">${country}</span>
                </div>`;
            document.getElementById('ipip').innerHTML = `<span style="margin-left:8px; position: relative; top: -3px;">${location} ${displayISP} ${data.asn||''} ${displayASN}</span>`;

            const countryContainer = document.querySelector('.ip-main');
            if(countryContainer && !document.querySelector('.translation-toggle')){
                const toggle=createTranslationToggle();
                toggle.style.display='inline-flex';
                toggle.style.alignItems='center';
                toggle.style.justifyContent='center';
                toggle.style.width='24px';
                toggle.style.height='20px';
                toggle.style.marginLeft='8px';
                toggle.style.border='1px solid #ddd';
                toggle.style.borderRadius='5px';
                toggle.style.backgroundColor='#f8f9fa';
                toggle.style.fontSize='12px';
                toggle.style.verticalAlign='middle';
                toggle.style.lineHeight='1';
                toggle.style.padding='0';
                toggle.style.textAlign='center';
                toggle.title = text.translate || 'Translate';
                countryContainer.appendChild(toggle);
                setTimeout(setupHoverEffect,100);
            }

            const oldBtn = document.getElementById('openEditModal');
            if(oldBtn) oldBtn.remove();

            const editBtn = document.createElement('button');
            editBtn.id = 'openEditModal';
            editBtn.innerHTML = '<i class="bi bi-file-earmark-code"></i>';
            editBtn.title = text.editDatabase;

            Object.assign(editBtn.style, {
                display: 'inline-flex',
                alignItems: 'center',
                justifyContent: 'center',
                width: '24px',
                height: '20px',
                border: '1px solid #ddd',
                borderRadius: '5px',
                backgroundColor: '#f8f9fa',
                fontSize: '12px',
                lineHeight: '1',
                padding: '0',
                textAlign: 'center',
                cursor: 'pointer',
                opacity: '0',
                transition: 'opacity 0.2s',
                marginLeft: '8px'
            });

            editBtn.onclick = (event) => {
                event.stopPropagation();
                showEditModal();
            };

            countryContainer.appendChild(editBtn);

            countryContainer.addEventListener('mouseenter', () => {
                editBtn.style.opacity = '1';
            });
            countryContainer.addEventListener('mouseleave', () => {
                editBtn.style.opacity = '0';
            });

            const countryCode = data.country_code||'unknown';
            const flagSrc = (countryCode!=='unknown')?_IMG+"flags/"+countryCode.toLowerCase()+".png":'/luci-static/ipip/flags/cn.png';
            $("#flag").attr("src",flagSrc);

        } catch(e){
            console.error("updateUI error:",e);
            document.getElementById('d-ip').innerHTML = text.failedUpdate;   
            $("#flag").attr("src","/luci-static/ipip/flags/cn.png");
        }
    },

    getIpipnetIP: async ()=>{
        if(myAppIP.isRefreshing) return;
        myAppIP.isRefreshing = true;
        const lang = await getRealTimeLanguage();
        const text = translationsIP[lang] || translationsIP['zh'];

        document.getElementById('d-ip').textContent = text.checking;
        document.getElementById('ipip').innerHTML="";

        const flag = document.getElementById("flag");
        const loading = document.getElementById("loading");

        loading.style.display = 'flex';
        flag.style.visibility = 'hidden';

        try {
            const ip = await myAppIP.fetchIP();
            await myAppIP.Ipip(ip, 'ipip');
        } catch (e) {
            console.error("getIpipnetIP error:", e);
            document.getElementById('ipip').innerHTML = text.failed;
        } finally {
            loading.style.display = 'none';
            flag.style.visibility = 'visible';
            myAppIP.isRefreshing = false;
        }
    },

    showDetailModal: async function() {
        if (!myAppIP.lastGeoData) return;
            const lang = await getRealTimeLanguage();
            const text = translationsIP[lang] || translationsIP['zh'];
            const data = myAppIP.lastGeoData;
            const country = translationEnabled && data.translatedCountry ? data.translatedCountry : data.country || text.unknown;
            const region = translationEnabled && data.translatedRegion ? data.translatedRegion : data.region || "";
            const city = translationEnabled && data.translatedCity ? data.translatedCity : data.city || "";
            const isp = translationEnabled && data.translatedISP ? data.translatedISP : data.isp || "";
            const asnOrg = translationEnabled && data.translatedASNOrg ? data.translatedASNOrg : data.asn_organization || "";
            const timezone = data.timezone || data.time_zone || 'N/A';
            const latitude = data.latitude || data.lat || 'N/A';
            const longitude = data.longitude || data.lon || data.lng || 'N/A';

            let locationParts = [country];
    
            if (region && region !== country) {
                locationParts.push(region);
            }
    
            if (city && city !== region && city !== country) {
                locationParts.push(city);
            }
    
            const locationDisplay = locationParts.join(' ');

            let countryCode = data.country_code || 'unknown';
            if (countryCode.toUpperCase() === 'TW') {
                countryCode = 'CN';
            } else if (countryCode.toUpperCase() === 'HK' || countryCode.toUpperCase() === 'MO') {
                countryCode = 'CN';
            }

        const translations = {
            'zh': {
                title: 'IP 地址详情',
                ip: 'IP 地址',
                location: '地理位置',
                isp: '网络服务商',
                asn: '自治系统号',
                countryCode: '国家代码',
                timezone: '时区',
                coordinates: '坐标',
                translation: '翻译',
                enabled: '已启用',
                disabled: '已禁用',
                close: '关闭',
                refresh: '刷新',
                mapView: '地图视图',
                viewOnGoogleMaps: '在Google地图中查看',
                latitude: '纬度',
                longitude: '经度'
            },
            'en': {
                title: 'IP Address Details',
                ip: 'IP Address',
                location: 'Location',
                isp: 'ISP',
                asn: 'ASN',
                countryCode: 'Country Code',
                timezone: 'Timezone',
                coordinates: 'Coordinates',
                translation: 'Translation',
                enabled: 'Enabled',
                disabled: 'Disabled',
                close: 'Close',
                refresh: 'Refresh',
                mapView: 'Map View',
                viewOnGoogleMaps: 'View on Google Maps',
                latitude: 'Latitude',
                longitude: 'Longitude'
            },
            'ja': {
                title: 'IPアドレス詳細',
                ip: 'IPアドレス',
                location: '所在地',
                isp: 'ISP',
                asn: 'AS番号',
                countryCode: '国コード',
                timezone: 'タイムゾーン',
                coordinates: '座標',
                translation: '翻訳',
                enabled: '有効',
                disabled: '無効',
                close: '閉じる',
                refresh: '更新',
                mapView: '地図表示',
                viewOnGoogleMaps: 'Googleマップで表示',
                latitude: '緯度',
                longitude: '経度'
            },
            'hk': {
                title: 'IP 地址詳情',
                ip: 'IP 地址',
                location: '地理位置',
                isp: '網絡服務商',
                asn: '自治系統號',
                countryCode: '國家代碼',
                timezone: '時區',
                coordinates: '坐標',
                translation: '翻譯',
                enabled: '已啟用',
                disabled: '已禁用',
                close: '關閉',
                refresh: '刷新',
                mapView: '地圖視圖',
                viewOnGoogleMaps: '在Google地圖中查看',
                latitude: '緯度',
                longitude: '經度'
            },
            'ko': {
                title: 'IP 주소 세부정보',
                ip: 'IP 주소',
                location: '위치',
                isp: '인터넷 서비스 제공업체',
                asn: 'ASN',
                countryCode: '국가 코드',
                timezone: '시간대',
                coordinates: '좌표',
                translation: '번역',
                enabled: '사용',
                disabled: '사용 안 함',
                close: '닫기',
                refresh: '새로고침',
                mapView: '지도 보기',
                viewOnGoogleMaps: 'Google 지도에서 보기',
                latitude: '위도',
                longitude: '경도'
            },
            'ru': {
                title: 'Детали IP-адреса',
                ip: 'IP-адрес',
                location: 'Местоположение',
                isp: 'Интернет-провайдер',
                asn: 'ASN',
                countryCode: 'Код страны',
                timezone: 'Часовой пояс',
                coordinates: 'Координаты',
                translation: 'Перевод',
                enabled: 'Включено',
                disabled: 'Отключено',
                close: 'Закрыть',
                refresh: 'Обновить',
                mapView: 'Просмотр карты',
                viewOnGoogleMaps: 'Посмотреть в Google Картах',
                latitude: 'Широта',
                longitude: 'Долгота'
            },
            'ar': {
                title: 'تفاصيل عنوان IP',
                ip: 'عنوان IP',
                location: 'الموقع',
                isp: 'مزود خدمة الإنترنت',
                asn: 'ASN',
                countryCode: 'رمز الدولة',
                timezone: 'المنطقة الزمنية',
                coordinates: 'الإحداثيات',
                translation: 'ترجمة',
                enabled: 'مُمكّن',
                disabled: 'معطّل',
                close: 'إغلاق',
                refresh: 'تحديث',
                mapView: 'عرض الخريطة',
                viewOnGoogleMaps: 'عرض على خرائط Google',
                latitude: 'خط العرض',
                longitude: 'خط الطول'
            },
            'es': {
                title: 'Detalles de la dirección IP',
                ip: 'Dirección IP',
                location: 'Ubicación',
                isp: 'Proveedor de Internet',
                asn: 'ASN',
                countryCode: 'Código de país',
                timezone: 'Zona horaria',
                coordinates: 'Coordenadas',
                translation: 'Traducción',
                enabled: 'Habilitado',
                disabled: 'Deshabilitado',
                close: 'Cerrar',
                refresh: 'Actualizar',
                mapView: 'Vista de mapa',
                viewOnGoogleMaps: 'Ver en Google Maps',
                latitude: 'Latitud',
                longitude: 'Longitud'
            },
            'de': {
                title: 'IP-Adressdetails',
                ip: 'IP-Adresse',
                location: 'Standort',
                isp: 'ISP',
                asn: 'ASN',
                countryCode: 'Ländercode',
                timezone: 'Zeitzone',
                coordinates: 'Koordinaten',
                translation: 'Übersetzung',
                enabled: 'Aktiviert',
                disabled: 'Deaktiviert',
                close: 'Schließen',
                refresh: 'Aktualisieren',
                mapView: 'Kartenansicht',
                viewOnGoogleMaps: 'In Google Maps ansehen',
                latitude: 'Breitengrad',
                longitude: 'Längengrad'
            },
            'fr': {
                title: 'Détails de l’adresse IP',
                ip: 'Adresse IP',
                location: 'Emplacement',
                isp: 'FAI',
                asn: 'ASN',
                countryCode: 'Code du pays',
                timezone: 'Fuseau horaire',
                coordinates: 'Coordonnées',
                translation: 'Traduction',
                enabled: 'Activé',
                disabled: 'Désactivé',
                close: 'Fermer',
                refresh: 'Rafraîchir',
                mapView: 'Vue carte',
                viewOnGoogleMaps: 'Voir sur Google Maps',
                latitude: 'Latitude',
                longitude: 'Longitude'
            },
            'vi': {
                title: 'Chi tiết địa chỉ IP',
                ip: 'Địa chỉ IP',
                location: 'Vị trí',
                isp: 'Nhà cung cấp dịch vụ Internet',
                asn: 'ASN',
                countryCode: 'Mã quốc gia',
                timezone: 'Múi giờ',
                coordinates: 'Tọa độ',
                translation: 'Dịch',
                enabled: 'Bật',
                disabled: 'Tắt',
                close: 'Đóng',
                refresh: 'Làm mới',
                mapView: 'Xem bản đồ',
                viewOnGoogleMaps: 'Xem trên Google Maps',
                latitude: 'Vĩ độ',
                longitude: 'Kinh độ'
            },
            'bn': {
                title: 'IP ঠিকানার বিবরণ',
                ip: 'IP ঠিকানা',
                location: 'অবস্থান',
                isp: 'আইএসপি',
                asn: 'ASN',
                countryCode: 'দেশ কোড',
                timezone: 'সময় অঞ্চল',
                coordinates: 'অবস্থানাঙ্ক',
                translation: 'অনুবাদ',
                enabled: 'সক্রিয়',
                disabled: 'নিষ্ক্রিয়',
                close: 'বন্ধ করুন',
                refresh: 'রিফ্রেশ',
                mapView: 'মানচিত্র ভিউ',
                viewOnGoogleMaps: 'Google মানচিত্রে দেখুন',
                latitude: 'অক্ষাংশ',
                longitude: 'দ্রাঘিমাংশ'
            },
            'th': {
                title: 'รายละเอียดที่อยู่ IP',
                ip: 'ที่อยู่ IP',
                location: 'ตำแหน่งที่ตั้ง',
                isp: 'ผู้ให้บริการอินเทอร์เน็ต',
                asn: 'ASN',
                countryCode: 'รหัสประเทศ',
                timezone: 'เขตเวลา',
                coordinates: 'พิกัด',
                translation: 'การแปล',
                enabled: 'เปิดใช้งาน',
                disabled: 'ปิดใช้งาน',
                close: 'ปิด',
                refresh: 'รีเฟรช',
                mapView: 'มุมมองแผนที่',
                viewOnGoogleMaps: 'ดูบน Google Maps',
                latitude: 'ละติจูด',
                longitude: 'ลองจิจูด'
            }
        };

        const getLanguageText = async () => {
            try {
                const currentLang = await getRealTimeLanguage();
                return translations[currentLang] || translations['zh-CN'];
            } catch (error) {
                console.error('Failed to get language:', error);
                return translations['zh-CN'];
            }
        };

        const modalOverlay = document.createElement('div');
        modalOverlay.className = 'ip-modal-overlay';
        modalOverlay.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 10000;
            opacity: 0;
            transition: opacity 0.3s ease;
        `;
    
        const modalContent = document.createElement('div');
        modalContent.className = 'ip-modal-content';
        modalContent.style.cssText = `
            background: white;
            border-radius: 12px;
            width: 90%;
            max-width: 800px;
            max-height: 80vh;
            overflow: hidden;
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
            transform: scale(0.9);
            transition: transform 0.3s ease;
        `;

        modalContent.innerHTML = `
            <div class="ip-modal-header" style="
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                color: white;
                padding: 20px;
                display: flex;
                justify-content: space-between;
                align-items: center;
            ">
                <h3 style="margin: 0; font-size: 1.2em;">
                    <span style="margin-right: 10px;">📋</span>
                    Loading...
                </h3>
                <button class="ip-modal-close" style="
                    background: none;
                    border: none;
                    color: white;
                    font-size: 1.5em;
                    cursor: pointer;
                    padding: 0;
                    width: 30px;
                    height: 30px;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                ">×</button>
            </div>
        
            <div class="ip-modal-body" style="padding: 20px; max-height: 60vh; overflow-y: auto;">
                <div style="text-align: center; padding: 40px;">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            </div>
        `;
    
        modalOverlay.appendChild(modalContent);
        document.body.appendChild(modalOverlay);
    
        setTimeout(() => {
            modalOverlay.style.opacity = '1';
            modalContent.style.transform = 'scale(1)';
        }, 10);

        getLanguageText().then(langText => {
            modalContent.innerHTML = `
                <div class="ip-modal-header" style="
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                    color: white;
                    padding: 20px;
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                ">
                    <h3 style="margin: 0; font-size: 1.3em;  font-weight:600; background:none; border:none; color:white;">
                        <span style="margin-right: 10px;"><i class="bi bi-clipboard"></i></span>
                        ${langText.title}
                    </h3>
                    <button class="ip-modal-close" style="
                        background:white;
                        border:none;
                        color:#4a6cf7;
                        font-size:1.1em;
                        cursor:pointer;
                        width:25px;
                        height:25px;
                        border-radius:6px;
                        display:flex;
                        align-items:center;
                        justify-content:center;
                        transition: transform 0.2s, color 0.2s;
                    "
                    onmouseover="this.firstElementChild.style.color='#1a73e8'; this.style.transform='scale(1.1)';"
                    onmouseout="this.firstElementChild.style.color='#4a6cf7'; this.style.transform='scale(1)';">
                        <i class="bi bi-x-lg"></i>
                    </button>
                </div>
            
                <div class="ip-modal-body" style="padding: 20px; max-height: 60vh; overflow-y: auto;">
                    <div style="display: flex; margin-bottom: 20px;">
                        <div style="flex: 1; text-align: center;">
                            <img src="${_IMG}flags/${(data.country_code || 'unknown').toLowerCase()}.png" 
                                style="max-height: 80px; border: 1px solid #ddd; border-radius: 4px;" 
                                onerror="this.src='/luci-static/ipip/flags/unknown.png'">
                            <div style="margin-top: 10px; font-weight: bold; color: black;">${country}</div>
                        </div>
                        <div style="flex: 2; margin-left: 20px;">
                            <div class="detail-item" style="margin-bottom: 10px; display: flex; gap: 20px;">
                                <span style="width: 180px; font-weight: 500; color: #6c757d;"><i class="bi bi-globe2"></i>  ${langText.ip}:</span>
                                <span style="flex: 1; word-break: break-word;">${cachedIP}</span>
                            </div>
                            <div class="detail-item" style="margin-bottom: 10px; display: flex; gap: 20px;">
                                <span style="width: 180px; font-weight: 500; color: #6c757d;"><i class="bi bi-geo-alt"></i>  ${langText.location}:</span>
                                <span style="flex: 1;">${locationDisplay}</span>
                            </div>
                            <div class="detail-item" style="margin-bottom: 10px; display: flex; gap: 20px;">
                                <span style="width: 180px; font-weight: 500; color: #6c757d;"><i class="bi bi-building"></i>  ${langText.isp}:</span>
                                <span style="flex: 1;">${isp}</span>
                            </div>
                            <div class="detail-item" style="margin-bottom: 10px; display: flex; gap: 20px;">
                                <span style="width: 180px; font-weight: 500; color: #6c757d;"><i class="bi bi-link-45deg"></i>  ${langText.asn}:</span>
                                <span style="flex: 1;">${data.asn || ''} ${asnOrg}</span>
                            </div>
                            <div class="detail-item" style="margin-bottom: 10px; display: flex; gap: 20px;">
                                <span style="width: 180px; font-weight: 500; color: #6c757d;"><i class="bi bi-flag"></i>  ${langText.countryCode}:</span>
                                <span style="flex: 1;">${countryCode}</span>
                            </div>
                            <div class="detail-item" style="margin-bottom: 10px; display: flex; gap: 20px;">
                                <span style="width: 180px; font-weight: 500; color: #6c757d;"><i class="bi bi-clock"></i>  ${langText.timezone}:</span>
                                <span style="flex: 1;">${timezone}</span>
                            </div>
                            <div class="detail-item" style="margin-bottom: 10px; display: flex; gap: 20px;">
                                <span style="width: 180px; font-weight: 500; color: #6c757d;"><i class="bi bi-geo"></i>  ${langText.coordinates}:</span>
                                <span style="flex: 1;">
                                    ${latitude !== 'N/A' && longitude !== 'N/A' ? 
                                        `${latitude}, ${longitude}` : 
                                        'N/A'}
                                </span>
                            </div>
                            <div class="detail-item" style="margin-bottom: 10px; display: flex; gap: 20px;">
                                <span style="width: 180px; font-weight: 500; color: #6c757d;"><i class="bi bi-translate"></i>  ${langText.translation}:</span>
                                <span style="flex: 1;">
                                    <span style="
                                        padding: 4px 8px;
                                        border-radius: 4px;
                                        font-size: 0.9em;
                                        background: ${translationEnabled ? '#28a745' : '#6c757d'};
                                        color: white !important;
                                    ">
                                        ${translationEnabled ? langText.enabled : langText.disabled}
                                    </span>
                                </span>
                            </div>
                        </div>
                    </div>

                    ${latitude !== 'N/A' && longitude !== 'N/A' ? `
                    <div style="margin-top: 20px; padding: 15px; background: #f8f9fa; border-radius: 8px;">
                        <div style="display: flex; align-items: center; margin-bottom: 10px;">
                            <span style="font-weight: 500; color: #6c757d; margin-right: 10px;"><i class="bi bi-map"></i>  ${langText.mapView}:</span>
                            <a href="https://maps.google.com/?q=${latitude},${longitude}" 
                               target="_blank" 
                               style="color: #007bff; text-decoration: none;"
                               onmouseover="this.style.textDecoration='underline'" 
                               onmouseout="this.style.textDecoration='none'">
                                ${langText.viewOnGoogleMaps}
                            </a>
                        </div>
                        <div style="font-size: 0.9em; color: #6c757d;">
                            ${langText.latitude}: ${latitude}, ${langText.longitude}: ${longitude}
                        </div>
                    </div>
                    ` : ''}
                </div>
            
                <div class="ip-modal-footer" style="
                    padding: 15px 20px;
                    background: #f8f9fa;
                    display: flex;
                    justify-content: flex-end;
                    border-top: 1px solid #dee2e6;
                ">

                    <button class="cbi-button cbi-button-remove">${langText.close}</button>
                    <button class="cbi-button cbi-button-apply">${langText.refresh}</button>
                </div>
            `;

        const translationMsg = translationEnabled 
            ? `${langText.translation} ${langText.enabled}` 
            : `${langText.translation} ${langText.disabled}`;

        showWeatherLog(encodeURIComponent(translationMsg), 'info');
        if (typeof speakWeatherMessage === 'function') speakWeatherMessage(translationMsg);

            setupModalEvents(modalOverlay, modalContent);
        }).catch(error => {
            console.error('Failed to load language:', error);
        });

        const setupModalEvents = (overlay, content) => {
            const closeBtn = content.querySelector('.ip-modal-close');
            const closeModalBtn = content.querySelector('.cbi-button-remove');
        
            const closeModal = () => {
                overlay.style.opacity = '0';
                content.style.transform = 'scale(0.9)';
                setTimeout(() => {
                    if (overlay.parentNode) {
                        overlay.parentNode.removeChild(overlay);
                    }
                }, 300);
            };
        
            closeBtn.addEventListener('click', closeModal);
            closeModalBtn.addEventListener('click', closeModal);
        
            overlay.addEventListener('click', (e) => {
                if (e.target === overlay) {
                    closeModal();
                }
            });

            const refreshBtn = content.querySelector('.cbi-button-apply');
            refreshBtn.addEventListener('click', () => {
                closeModal();
                setTimeout(() => {
                    this.getIpipnetIP();
                }, 300);
            });
        };

        setupModalEvents(modalOverlay, modalContent);
    },
};

document.addEventListener('DOMContentLoaded', function() {
    setupLanguageChangeListener();
    
    const flagElement = document.getElementById('flag');
    if (flagElement) {
        flagElement.addEventListener('click', () => myAppIP.getIpipnetIP());
    }
    
    myAppIP.getIpipnetIP();
    setInterval(() => myAppIP.getIpipnetIP(), 180000);
});
</script>

<script>
const translations = {
    zh: { title: '编辑 IP 数据库', close: '关闭', save: '保存', fullscreen: '全屏 (F11)', 
          jsonError: 'JSON格式错误，请检查！', saveSuccess: '保存成功', saveFail: '保存失败', loading: '加载编辑器中...',
          clear: '清空', clearConfirm: '确定要清空 IP 数据库吗？', clearSuccess: '已清空 IP 数据库', clearFail: '清空失败' },
    en: { title: 'Edit IP Database', close: 'Close', save: 'Save', fullscreen: 'Fullscreen (F11)', 
          jsonError: 'Invalid JSON format!', saveSuccess: 'Saved successfully', saveFail: 'Save failed', loading: 'Loading editor...',
          clear: 'Clear', clearConfirm: 'Are you sure to clear the IP database?', clearSuccess: 'IP database cleared', clearFail: 'Clear failed' },
    hk: { title: '編輯 IP 數據庫', close: '關閉', save: '儲存', fullscreen: '全螢幕 (F11)', 
          jsonError: 'JSON格式錯誤，請檢查！', saveSuccess: '儲存成功', saveFail: '儲存失敗', loading: '載入編輯器中...',
          clear: '清空', clearConfirm: '確定要清空 IP 數據庫嗎？', clearSuccess: '已清空 IP 數據庫', clearFail: '清空失敗' },
    de: { title: 'IP-Datenbank bearbeiten', close: 'Schließen', save: 'Speichern', fullscreen: 'Vollbild (F11)', 
          jsonError: 'Ungültiges JSON-Format!', saveSuccess: 'Erfolgreich gespeichert', saveFail: 'Speichern fehlgeschlagen', loading: 'Editor wird geladen...',
          clear: 'Leeren', clearConfirm: 'Möchten Sie die IP-Datenbank wirklich leeren?', clearSuccess: 'IP-Datenbank geleert', clearFail: 'Leeren fehlgeschlagen' },
    fr: { title: 'Modifier la base IP', close: 'Fermer', save: 'Enregistrer', fullscreen: 'Plein écran (F11)', 
          jsonError: 'Format JSON invalide !', saveSuccess: 'Enregistrement réussi', saveFail: 'Échec de l\'enregistrement', loading: 'Chargement de l\'éditeur...',
          clear: 'Vider', clearConfirm: 'Êtes-vous sûr de vouloir vider la base IP ?', clearSuccess: 'Base IP vidée', clearFail: 'Échec du vidage' },
    ko: { title: 'IP 데이터베이스 편집', close: '닫기', save: '저장', fullscreen: '전체 화면 (F11)', 
          jsonError: 'JSON 형식 오류!', saveSuccess: '저장 성공', saveFail: '저장 실패', loading: '편집기 로딩 중...',
          clear: '초기화', clearConfirm: 'IP 데이터베이스를 초기화하시겠습니까?', clearSuccess: 'IP 데이터베이스가 초기화되었습니다', clearFail: '초기화 실패' },
    ja: { title: 'IPデータベースを編集', close: '閉じる', save: '保存', fullscreen: '全画面 (F11)', 
          jsonError: 'JSON形式が正しくありません！', saveSuccess: '保存しました', saveFail: '保存に失敗しました', loading: 'エディターを読み込み中...',
          clear: 'クリア', clearConfirm: 'IPデータベースをクリアしてもよろしいですか？', clearSuccess: 'IPデータベースをクリアしました', clearFail: 'クリアに失敗しました' },
    bn: { title: 'IP ডাটাবেস সম্পাদনা', close: 'বন্ধ', save: 'সংরক্ষণ', fullscreen: 'পূর্ণ স্ক্রিন (F11)', 
          jsonError: 'অবৈধ JSON ফরম্যাট!', saveSuccess: 'সফলভাবে সংরক্ষিত', saveFail: 'সংরক্ষণ ব্যর্থ', loading: 'সম্পাদক লোড হচ্ছে...',
          clear: 'সাফ করুন', clearConfirm: 'IP ডাটাবেস মুছে ফেলতে চান?', clearSuccess: 'IP ডাটাবেস মুছে ফেলা হয়েছে', clearFail: 'মুছে ফেলতে ব্যর্থ' },
    vi: { title: 'Chỉnh sửa cơ sở dữ liệu IP', close: 'Đóng', save: 'Lưu', fullscreen: 'Toàn màn hình (F11)', 
          jsonError: 'Định dạng JSON không hợp lệ!', saveSuccess: 'Lưu thành công', saveFail: 'Lưu thất bại', loading: 'Đang tải trình chỉnh sửa...',
          clear: 'Xóa', clearConfirm: 'Bạn có chắc muốn xóa cơ sở dữ liệu IP không?', clearSuccess: 'Đã xóa cơ sở dữ liệu IP', clearFail: 'Xóa thất bại' },
    th: { title: 'แก้ไขฐานข้อมูล IP', close: 'ปิด', save: 'บันทึก', fullscreen: 'เต็มจอ (F11)', 
          jsonError: 'รูปแบบ JSON ไม่ถูกต้อง!', saveSuccess: 'บันทึกสำเร็จ', saveFail: 'บันทึกไม่สำเร็จ', loading: 'กำลังโหลดตัวแก้ไข...',
          clear: 'ล้าง', clearConfirm: 'คุณแน่ใจหรือไม่ว่าจะล้างฐานข้อมูล IP?', clearSuccess: 'ล้างฐานข้อมูล IP เรียบร้อย', clearFail: 'ล้างไม่สำเร็จ' },
    ar: { title: 'تحرير قاعدة بيانات IP', close: 'إغلاق', save: 'حفظ', fullscreen: 'ملء الشاشة (F11)', 
          jsonError: 'تنسيق JSON غير صالح!', saveSuccess: 'تم الحفظ بنجاح', saveFail: 'فشل الحفظ', loading: 'جاري تحميل المحرر...',
          clear: 'مسح', clearConfirm: 'هل أنت متأكد من مسح قاعدة بيانات IP؟', clearSuccess: 'تم مسح قاعدة بيانات IP', clearFail: 'فشل المسح' },
    ru: { title: 'Редактировать базу IP', close: 'Закрыть', save: 'Сохранить', fullscreen: 'Полный экран (F11)', 
          jsonError: 'Неверный формат JSON!', saveSuccess: 'Успешно сохранено', saveFail: 'Ошибка сохранения', loading: 'Загрузка редактора...',
          clear: 'Очистить', clearConfirm: 'Вы уверены, что хотите очистить базу IP?', clearSuccess: 'База IP очищена', clearFail: 'Не удалось очистить' },
    es: { title: 'Editar base de datos IP', close: 'Cerrar', save: 'Guardar', fullscreen: 'Pantalla completa (F11)', 
          jsonError: '¡Formato JSON inválido!', saveSuccess: 'Guardado exitosamente', saveFail: 'Error al guardar', loading: 'Cargando editor...',
          clear: 'Borrar', clearConfirm: '¿Está seguro de borrar la base de datos IP?', clearSuccess: 'Base de datos IP borrada', clearFail: 'Error al borrar' }
};

let isCodeMirrorLoaded = false;
let codeMirrorLoadingPromise = null;

async function loadCodeMirror() {
    if (isCodeMirrorLoaded) {
        return Promise.resolve();
    }
    
    if (codeMirrorLoadingPromise) {
        return codeMirrorLoadingPromise;
    }
    
    codeMirrorLoadingPromise = new Promise((resolve, reject) => {
        const cssLink = document.createElement('link');
        cssLink.rel = 'stylesheet';
        cssLink.href = 'https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/codemirror.min.css';
        document.head.appendChild(cssLink);
        
        const script = document.createElement('script');
        script.src = 'https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/codemirror.min.js';
        script.onload = () => {
            const jsonModeScript = document.createElement('script');
            jsonModeScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/mode/javascript/javascript.min.js';
            jsonModeScript.onload = () => {
                const themeLink = document.createElement('link');
                themeLink.rel = 'stylesheet';
                themeLink.href = 'https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/theme/material.min.css';
                document.head.appendChild(themeLink);
                
                const lintScript = document.createElement('script');
                lintScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/addon/lint/lint.min.js';
                lintScript.onload = () => {
                    const lintCss = document.createElement('link');
                    lintCss.rel = 'stylesheet';
                    lintCss.href = 'https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/addon/lint/lint.min.css';
                    document.head.appendChild(lintCss);
                    
                    CodeMirror.registerHelper("lint", "json", function(text) {
                        const found = [];
                        if (!text) return found;
                        
                        try {
                            JSON.parse(text);
                        } catch (e) {
                            const match = e.message.match(/line (\d+)/);
                            const line = match ? parseInt(match[1]) - 1 : 0;
                            
                            let errorLine = line;
                            let errorChar = 0;
                            
                            const lines = text.split('\n');
                            if (e.message.includes('Unexpected token')) {
                                const token = e.message.match(/Unexpected token (.+?) in/);
                                if (token) {
                                    for (let i = 0; i < lines.length; i++) {
                                        const pos = lines[i].indexOf(token[1]);
                                        if (pos !== -1) {
                                            errorLine = i;
                                            errorChar = pos;
                                            break;
                                        }
                                    }
                                }
                            }
                            
                            found.push({
                                from: CodeMirror.Pos(errorLine, errorChar),
                                to: CodeMirror.Pos(errorLine, errorChar + 1),
                                message: e.message,
                                severity: "error"
                            });
                        }
                        return found;
                    });
                    
                    const foldScript = document.createElement('script');
                    foldScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/addon/fold/foldcode.min.js';
                    foldScript.onload = () => {
                        const foldGutterScript = document.createElement('script');
                        foldGutterScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/addon/fold/foldgutter.min.js';
                        foldGutterScript.onload = () => {
                            const braceFoldScript = document.createElement('script');
                            braceFoldScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/addon/fold/brace-fold.min.js';
                            braceFoldScript.onload = () => {
                                const foldGutterCss = document.createElement('link');
                                foldGutterCss.rel = 'stylesheet';
                                foldGutterCss.href = 'https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/addon/fold/foldgutter.min.css';
                                document.head.appendChild(foldGutterCss);
                                
                                isCodeMirrorLoaded = true;
                                resolve();
                            };
                            braceFoldScript.onerror = reject;
                            document.head.appendChild(braceFoldScript);
                        };
                        foldGutterScript.onerror = reject;
                        document.head.appendChild(foldGutterScript);
                    };
                    foldScript.onerror = reject;
                    document.head.appendChild(foldScript);
                };
                lintScript.onerror = reject;
                document.head.appendChild(lintScript);
            };
            jsonModeScript.onerror = reject;
            document.head.appendChild(jsonModeScript);
        };
        script.onerror = reject;
        document.head.appendChild(script);
    });
    
    return codeMirrorLoadingPromise;
}

async function getCurrentLangText() {
    try {
        const lang = await getRealTimeLanguage();
        return translations[lang] || translations['zh'];
    } catch (e) {
        console.error('Failed to get language:', e);
        return translations['zh'];
    }
}

async function showEditModal() {
    const lang = await getCurrentLangText();

    const overlay = document.createElement('div');
    overlay.style.cssText = `
        position: fixed; top:0; left:0; width:100%; height:100%;
        background: rgba(0,0,0,0.5); display:flex; justify-content:center; align-items:center;
        z-index:10000; opacity:0; transition: opacity 0.3s;
    `;

    const content = document.createElement('div');
    content.style.cssText = `
        background:white; border-radius:8px; width:90%; max-width:900px; max-height:80vh;
        display:flex; flex-direction:column; box-shadow:0 5px 20px rgba(0,0,0,0.15);
        transform: scale(0.9); transition: transform 0.3s ease; overflow: hidden;
    `;

    content.innerHTML = `
        <div style="background:#4a6cf7; color:white; padding:12px 16px; display:flex; justify-content:space-between; align-items:center;">
            <h3 style="margin:0; font-size:1.3em; font-weight:500; background:none; border:none; color:white;"><i class="bi bi-server"></i> ${lang.title}</h3>
            <div style="display:flex; align-items:center; gap:8px;">
                <button class="fullscreenBtn" title="${lang.fullscreen}" style="
                    background:white;
                    border:none;
                    color:#4a6cf7;
                    font-size:1.1em;
                    cursor:pointer;
                    width:25px;
                    height:25px;
                    opacity: 1 !important;
                    border-radius:6px;
                    display:flex;
                    align-items:center;
                    justify-content:center;
                    transition: transform 0.2s, color 0.2s;
                "
                onmouseover="this.firstElementChild.style.color='#1a73e8'; this.style.transform='scale(1.1)';"
                onmouseout="this.firstElementChild.style.color='#4a6cf7'; this.style.transform='scale(1)';">
                    <i class="bi bi-arrows-fullscreen"></i>
                </button>
        
                <button class="closeBtn" title="${lang.close}" style="
                    background:white;
                    border:none;
                    color:#4a6cf7;
                    font-size:1.1em;
                    cursor:pointer;
                    width:25px;
                    height:25px;
                    border-radius:6px;
                    display:flex;
                    align-items:center;
                    justify-content:center;
                    transition: transform 0.2s, color 0.2s;
                "
                onmouseover="this.firstElementChild.style.color='#1a73e8'; this.style.transform='scale(1.1)';"
                onmouseout="this.firstElementChild.style.color='#4a6cf7'; this.style.transform='scale(1)';">
                    <i class="bi bi-x-lg"></i>
                </button>
            </div>
        </div>

        <div style="flex:1; position:relative;">
            <div id="loadingIndicator" style="
                position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);
                text-align: center; color: #666; font-size: 14px; z-index: 10;
            ">
                <div style="margin-bottom: 10px;">
                    <div style="display: inline-block; width: 20px; height: 20px; border: 2px solid #f3f3f3; border-top: 2px solid #4a6cf7; border-radius: 50%; animation: spin 1s linear infinite;"></div>
                </div>
                ${lang.loading}
            </div>
            <div id="editorContainer" style="display: none; width:100%; height:450px;"></div>
        </div>
        <div style="padding:12px 16px; background:#f8f9fa; display:flex; justify-content:flex-end; border-radius:0 0 8px 8px;">
            <button class="cbi-button cbi-button-apply">${lang.clear}</button>
            <button class="cbi-button cbi-button-remove">${lang.close}</button>
            <button class="cbi-button cbi-button-save">${lang.save}</button>
        </div>
        <style>
            @keyframes spin {
                0% { transform: rotate(0deg); }
                100% { transform: rotate(360deg); }
            }
            .fullscreen-mode {
                position: fixed !important;
                top: 0 !important;
                left: 0 !important;
                width: 100vw !important;
                height: 100vh !important;
                max-width: none !important;
                max-height: none !important;
                border-radius: 0 !important;
                z-index: 20000 !important;
            }
            .fullscreen-mode .fullscreenBtn svg {
                transform: rotate(180deg);
            }
        </style>
    `;

    overlay.appendChild(content);
    document.body.appendChild(overlay);
    setTimeout(() => { overlay.style.opacity='1'; content.style.transform='scale(1)'; }, 10);

    let codeMirrorEditor = null;
    let isFullscreen = false;

    const toggleFullscreen = () => {
        isFullscreen = !isFullscreen;
        if (isFullscreen) {
            content.classList.add('fullscreen-mode');
            setTimeout(() => {
                if (codeMirrorEditor) {
                    codeMirrorEditor.setSize('100%', 'calc(100vh - 140px)');
                    codeMirrorEditor.refresh();
                }
            }, 100);
        } else {
            content.classList.remove('fullscreen-mode');
            setTimeout(() => {
                if (codeMirrorEditor) {
                    codeMirrorEditor.setSize('100%', '450px');
                    codeMirrorEditor.refresh();
                }
            }, 100);
        }
    };

    content.querySelector('.cbi-button-apply').addEventListener('click', async () => {
        if (!confirm(lang.clearConfirm || 'Are you sure to clear the IP database?')) return;

        try {
            const res = await fetch('/luci-static/spectra/bgm/edit_ip_cache.php', {
                method: 'POST',
                headers: {'Content-Type':'application/json'},
                body: JSON.stringify({})
            });
            const data = await res.json();
            if (data.success) {
                alert(lang.clearSuccess || 'IP database cleared');
                if (codeMirrorEditor) {
                    codeMirrorEditor.setValue('{}');
                }
            } else {
                alert(lang.clearFail || 'Clear failed');
            }
        } catch(e) {
            alert(lang.clearFail || 'Clear failed');
            console.error(e);
        }
    });

    const closeModal = () => {
        overlay.style.opacity='0';
        content.style.transform='scale(0.9)';
        setTimeout(() => {
            if (codeMirrorEditor && typeof codeMirrorEditor.toTextArea === 'function') {
                try {
                    codeMirrorEditor.toTextArea();
                } catch(e) {
                    console.warn('Error destroying CodeMirror:', e);
                }
            }
            codeMirrorEditor = null;
            if (overlay.parentNode) {
                overlay.parentNode.removeChild(overlay);
            }
        }, 300);
    };

    content.querySelector('.fullscreenBtn').addEventListener('click', toggleFullscreen);
    content.querySelector('.closeBtn').addEventListener('click', closeModal);
    content.querySelector('.cbi-button-remove').addEventListener('click', closeModal);

    try {
        const [_, jsonData] = await Promise.all([
            loadCodeMirror(),
            fetch('/luci-static/spectra/bgm/ip_cache.json?_=' + Date.now())
                .then(r => r.json())
                .catch(() => ({}))
        ]);

        content.querySelector('#loadingIndicator').style.display = 'none';
        content.querySelector('#editorContainer').style.display = 'block';

        const editorContainer = content.querySelector('#editorContainer');
        codeMirrorEditor = CodeMirror(editorContainer, {
            value: JSON.stringify(jsonData, null, 2),
            mode: 'application/json',
            theme: 'material',
            lineNumbers: true,
            lineWrapping: true,
            indentUnit: 2,
            tabSize: 2,
            autoCloseBrackets: true,
            matchBrackets: true,
            foldGutter: true,
            lint: {delay: 300},
            gutters: ['CodeMirror-lint-markers', 'CodeMirror-linenumbers', 'CodeMirror-foldgutter'],
            extraKeys: {
                'Ctrl-Q': function(cm) {
                    cm.foldCode(cm.getCursor());
                },
                'F11': function(cm) {
                    toggleFullscreen();
                },
                'Esc': function(cm) {
                    if (isFullscreen) {
                        toggleFullscreen();
                    }
                }
            }
        });

        codeMirrorEditor.setSize('100%', '450px');
        
        setTimeout(() => {
            if (codeMirrorEditor && codeMirrorEditor.getValue) {
                try {
                    const currentValue = codeMirrorEditor.getValue();
                    if (currentValue.trim()) {
                        const formatted = JSON.stringify(JSON.parse(currentValue), null, 2);
                        codeMirrorEditor.setValue(formatted);
                        codeMirrorEditor.setCursor(0, 0);
                    }
                } catch(e) {
                    console.warn('JSON formatting failed:', e);
                }
            }
        }, 200);

    } catch (error) {
        console.error('Failed to load CodeMirror or JSON data:', error);
        content.querySelector('#loadingIndicator').innerHTML = `
            <div style="color: #d32f2f;">
            </div>
        `;
    }

    content.querySelector('.cbi-button-save').addEventListener('click', () => {
        if (!codeMirrorEditor) {
            alert(lang.saveFail);
            return;
        }

        let newContent;
        try { 
            newContent = JSON.parse(codeMirrorEditor.getValue()); 
        } catch(e) { 
            alert(lang.jsonError); 
            return; 
        }

        fetch('/luci-static/spectra/bgm/edit_ip_cache.php', {
            method:'POST',
            headers:{'Content-Type':'application/json'},
            body: JSON.stringify(newContent)
        })
        .then(r => r.json())
        .then(res => {
            if(res.success) { 
                alert(lang.saveSuccess); 
                closeModal(); 
            } else {
                alert(lang.saveFail);
            }
        })
        .catch(() => alert(lang.saveFail));
    });
}

document.getElementById('openEditModal').addEventListener('click', showEditModal);
</script>

<script>
const translationsPing = {
    zh: { ping: '延迟', timeout: '连接超时' },
    en: { ping: 'Ping', timeout: 'Connection timeout' },
    hk: { ping: '延遲', timeout: '連接超時' },
    de: { ping: 'Ping', timeout: 'Verbindungszeitüberschreitung' },
    fr: { ping: 'Ping', timeout: 'Délai de connexion' },
    ko: { ping: '핑', timeout: '연결 시간 초과' },
    ja: { ping: 'ピング', timeout: '接続タイムアウト' },
    bn: { ping: 'পিং', timeout: 'কানেকশন টাইমআউট' },
    vi: { ping: 'Độ trễ', timeout: 'Hết thời gian kết nối' },
    th: { ping: 'ดีเลย์', timeout: 'หมดเวลาการเชื่อมต่อ' },
    ar: { ping: 'تأخير', timeout: 'انتهت مهلة الاتصال' },
    ru: { ping: 'Пинг', timeout: 'Время ожидания соединения' },
    es: { ping: 'Ping', timeout: 'Tiempo de conexión agotado' }
};

async function getPingLangText() {
    try {
        const lang = await getRealTimeLanguage();
        return translationsPing[lang] || translationsPing['zh'];
    } catch (e) {
        console.error('Failed to get ping language:', e);
        return translationsPing['zh'];
    }
}

async function pingHost(id, name, url) {    
    const lang = await getPingLangText(); 
    const normal = document.getElementById(`${id}-normal`);
    const gray = document.getElementById(`${id}-gray`);
    const overlay = document.getElementById('result-overlay');
    const start = performance.now();

    fetch(url, { mode: 'no-cors' })
        .then(() => {
            const end = performance.now();
            const ping = Math.round(end - start);
            normal.style.display = 'inline';
            gray.style.display = 'none';

            let color = '#00c800';
            if (ping > 300) {
                color = 'red';
            } else if (ping > 150) {
                color = 'orange';
            }

            overlay.innerHTML = `${name} ${lang.ping}: ${ping} ms`;
            overlay.style.color = color;
            overlay.style.display = 'block';
            clearTimeout(overlay.timer);
            overlay.timer = setTimeout(() => {
                overlay.style.display = 'none';
            }, 5000);
        })
        .catch(() => {
            normal.style.display = 'none';
            gray.style.display = 'inline';
            overlay.innerHTML = `${name} ${lang.timeout}`;
            overlay.style.color = 'red';
            overlay.style.display = 'block';
            clearTimeout(overlay.timer);
            overlay.timer = setTimeout(() => {
                overlay.style.display = 'none';
            }, 5000);
        });
}

function checkAllSites() {
    const sites = [
        {id: 'baidu', name: 'Baidu', url: 'https://www.baidu.com'},
        {id: 'taobao', name: 'Taobao', url: 'https://www.taobao.com'},
        {id: 'google', name: 'Google', url: 'https://www.google.com'},
        {id: 'youtube', name: 'YouTube', url: 'https://www.youtube.com'}
    ];
    sites.forEach(site => {
        const normal = document.getElementById(`${site.id}-normal`);
        const gray = document.getElementById(`${site.id}-gray`);
        fetch(site.url, { mode: 'no-cors' })
            .then(() => {
                normal.style.display = 'inline';
                gray.style.display = 'none';
            })
            .catch(() => {
                normal.style.display = 'none';
                gray.style.display = 'inline';
            });
    });
}

window.addEventListener('load', () => {
    checkAllSites();
    
    setInterval(checkAllSites, 180000);
});
</script>

<script>
function moveNavbar() {
    const navbar = document.querySelector('.navbar-container');
    const screenWidth = window.innerWidth;

    if (screenWidth < 768) {
        navbar.style.marginLeft = '0';
        navbar.style.width = '100%';
    } else if (screenWidth <= 1633) {
        navbar.style.marginLeft = 'calc(15rem - 32px)';
        navbar.style.width = '';
    } else if (screenWidth > 1700) {
        navbar.style.marginLeft = '15rem';
        navbar.style.width = ''; 
    } else {
        navbar.style.marginLeft = '15rem';
        navbar.style.width = '';
    }
}

window.addEventListener('load', moveNavbar);
window.addEventListener('resize', moveNavbar);
</script>

<style>
.weather-log-box {
    position: fixed;
    left: 20px;
    padding: 12px 16px;
    background: var(--sand-bg);
    color: white;
    border-radius: 8px;
    z-index: 9999;
    max-width: 320px;
    font-size: 15px;
    word-wrap: break-word;
    line-height: 1.5;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.15);
    border: 1px solid rgba(255, 255, 255, 0.15);
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(2px);
    transform: translateY(0);
    opacity: 0;
    animation: scrollUp 12s cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards;
    display: inline-block;
    margin-bottom: 10px;
    transition: transform 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);
}
@keyframes scrollUp {
    0% { top: 90%; opacity: 0; }
    20% { opacity: 1; }
    80% { top: 50%; opacity: 1; }
    100% { top: 45%; opacity: 0; }
}
.weather-log-box.exiting { animation: fadeOut 0.3s forwards; }
@keyframes fadeOut { to { opacity: 0; transform: translateY(-20px) scale(0.95); } }
.weather-log-content { padding: 6px 20px 6px 8px; color: white; }
.weather-close-btn {
    position: absolute;
    top: 6px;
    right: 10px;
    background: transparent;
    border: none;
    color: inherit;
    cursor: pointer;
    font-size: 20px;
    line-height: 1;
    opacity: 0;
    pointer-events: none;
    transition: opacity 0.2s;
}
.weather-log-box:hover .weather-close-btn { opacity: 0.7; pointer-events: auto; }
.weather-log-box:hover .weather-close-btn:hover { opacity: 1; }
.weather-log-icon { display: inline-block; width: 20px; height: 20px; margin-right: 3px; vertical-align: middle; }
.weather-log-box.error { background: linear-gradient(145deg, #ff4444, #cc0000); }
.weather-log-box.warning { background: linear-gradient(145deg, #ffc107, #ffab00); }
.weather-log-box.info { background: linear-gradient(145deg, #2196F3, #1976D2); }
</style>

<script>
const showWeatherLog = (function() {
    const activeLogs = new Set();
    const BASE_OFFSET = 20;
    const MARGIN = 10;

    function createIcon(type) {
        const icons = {
            error: 'M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z',
            warning: 'M1 21h22L12 2 1 21zm12-3h-2v-2h2v2zm0-4h-2v-4h2v4z',
            info: 'M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z'
        };
        const svg = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="#fff" d="${icons[type] || icons.info}"/></svg>`;
        return `data:image/svg+xml;base64,${btoa(svg)}`;
    }

    function updatePositions() {
        let verticalPos = BASE_OFFSET;
        activeLogs.forEach(log => {
            log.style.transform = `translateY(${verticalPos}px)`;
            verticalPos += log.offsetHeight + MARGIN;
        });
    }

    return function(message, type='info') {
        const logBox = document.createElement('div');
        logBox.className = `weather-log-box ${type}`;
        logBox.innerHTML = `
            <div class="weather-log-content">
                <span class="weather-log-icon" style="background-image:url('${createIcon(type)}')"></span>
                ${decodeURIComponent(message)}
                <button class="weather-close-btn">&times;</button>
            </div>
        `;
        logBox.querySelector('.weather-close-btn').onclick = () => {
            logBox.classList.add('exiting');
            setTimeout(() => { logBox.remove(); activeLogs.delete(logBox); updatePositions(); }, 300);
        };
        logBox.addEventListener('mouseenter', () => logBox.style.animationPlayState = 'paused');
        logBox.addEventListener('mouseleave', () => logBox.style.animationPlayState = 'running');

        document.body.appendChild(logBox);
        activeLogs.add(logBox);
        requestAnimationFrame(() => { updatePositions(); });

        setTimeout(() => {
            logBox.classList.add('exiting');
            setTimeout(() => { logBox.remove(); activeLogs.delete(logBox); updatePositions(); }, 300);
        }, 12000);
    };
})();

function speakWeatherMessage(message, lang='zh-CN') {
    const utterance = new SpeechSynthesisUtterance(message);
    utterance.lang = lang;
    speechSynthesis.speak(utterance);
}
</script>

<div id="cityModal" 
     style="display:none; 
            position:fixed; 
            top:50%; 
            left:50%; 
            transform:translate(-50%, -50%); 
            width:350px; 
            padding:20px; 
            border-radius:12px; 
            background: linear-gradient(135deg, #1E90FF, #00BFFF); 
            color:white;
            box-shadow:0 4px 15px rgba(0,0,0,0.4); 
            z-index:9999;">
  <h3 id="modalTitle" style="margin-bottom:15px;"></h3>
  <input id="cityInput" placeholder="" 
         style="padding:8px; width:100%; border-radius:6px; border:none; margin-bottom:15px;">
  <div style="text-align:right;">
    <button id="saveCityBtn" class="cbi-button cbi-button-save"></button>
    <button id="closeCityModal" class="cbi-button cbi-button-remove"></button>
  </div>
</div>

<audio id="bell-audio" preload="auto">
  <source src="/luci-static/spectra/img/bells.mp3" type="audio/mp3">
</audio>

<script>
let city = localStorage.getItem('city') || 'Beijing';
const apiKey = 'fc8bd2637768c286c6f1ed5f1915eb22';
let currentWeatherData = null;

const weatherIcon = document.getElementById('weatherIcon');
const weatherText = document.getElementById('weatherText');
const cityNameDisplay = document.getElementById('cityNameDisplay');
const cityInput = document.getElementById('cityInput');
const saveCityBtn = document.getElementById('saveCityBtn');
const setCityBtn = document.getElementById('setCityBtn');
const cityModal = document.getElementById('cityModal');
const closeCityModal = document.getElementById('closeCityModal');
const modalTitle = document.getElementById('modalTitle');

const modalTranslations = {
  zh: {
    modalTitle: "设置城市",
    saveBtn: "保存",
    cancelBtn: "取消",
    invalidCityEmpty: "城市不能为空",
    invalidCityChinese: "城市不能包含中文",
    invalidCityFormat: "城市必须以大写英文字母开头",
    citySaved: "已保存城市: {city}"
  },
  en: {
    modalTitle: "Set City",
    saveBtn: "Save",
    cancelBtn: "Cancel",
    invalidCityEmpty: "City cannot be empty",
    invalidCityChinese: "City cannot contain Chinese characters",
    invalidCityFormat: "City must start with uppercase English letter",
    citySaved: "City saved: {city}"
  },
  hk: {
    modalTitle: "設置城市",
    saveBtn: "儲存",
    cancelBtn: "取消",
    invalidCityEmpty: "城市不能為空",
    invalidCityChinese: "城市不能包含中文",
    invalidCityFormat: "城市必須以大寫英文字母開頭",
    citySaved: "已儲存城市: {city}"
  },
  de: {
    modalTitle: "Stadt festlegen",
    saveBtn: "Speichern",
    cancelBtn: "Abbrechen",
    invalidCityEmpty: "Stadt darf nicht leer sein",
    invalidCityChinese: "Stadt darf keine chinesischen Zeichen enthalten",
    invalidCityFormat: "Stadt muss mit einem Großbuchstaben beginnen",
    citySaved: "Stadt gespeichert: {city}"
  },
  fr: {
    modalTitle: "Définir la ville",
    saveBtn: "Enregistrer",
    cancelBtn: "Annuler",
    invalidCityEmpty: "La ville ne peut pas être vide",
    invalidCityChinese: "La ville ne peut pas contenir de caractères chinois",
    invalidCityFormat: "La ville doit commencer par une lettre majuscule",
    citySaved: "Ville enregistrée: {city}"
  },
  ko: {
    modalTitle: "도시 설정",
    saveBtn: "저장",
    cancelBtn: "취소",
    invalidCityEmpty: "도시는 비어 있을 수 없습니다",
    invalidCityChinese: "도시에는 한자(중국어)를 포함할 수 없습니다",
    invalidCityFormat: "도시는 영어 대문자로 시작해야 합니다",
    citySaved: "도시 저장됨: {city}"
  },
  ja: {
    modalTitle: "都市設定",
    saveBtn: "保存",
    cancelBtn: "キャンセル",
    invalidCityEmpty: "都市は空にできません",
    invalidCityChinese: "都市に漢字を含めることはできません",
    invalidCityFormat: "都市は英語の大文字で始まる必要があります",
    citySaved: "都市を保存しました: {city}"
  },
  bn: {
    modalTitle: "শহর সেট করুন",
    saveBtn: "সংরক্ষণ",
    cancelBtn: "বাতিল",
    invalidCityEmpty: "শহর খালি থাকতে পারে না",
    invalidCityChinese: "শহরে চীনা অক্ষর থাকতে পারে না",
    invalidCityFormat: "শহরটি ইংরেজি বড় হাতের অক্ষর দিয়ে শুরু করতে হবে",
    citySaved: "শহর সংরক্ষিত: {city}"
  },
  vi: {
    modalTitle: "Đặt thành phố",
    saveBtn: "Lưu",
    cancelBtn: "Hủy",
    invalidCityEmpty: "Thành phố không được để trống",
    invalidCityChinese: "Thành phố không được chứa chữ Hán",
    invalidCityFormat: "Thành phố phải bắt đầu bằng chữ cái tiếng Anh viết hoa",
    citySaved: "Đã lưu thành phố: {city}"
  },
  tr: {
    modalTitle: "Şehir Ayarla",
    saveBtn: "Kaydet",
    cancelBtn: "İptal",
    invalidCityEmpty: "Şehir boş olamaz",
    invalidCityChinese: "Şehir Çince karakter içeremez",
    invalidCityFormat: "Şehir büyük İngilizce harf ile başlamalı",
    citySaved: "Şehir kaydedildi: {city}"
  },
  ar: {
    modalTitle: "تعيين المدينة",
    saveBtn: "حفظ",
    cancelBtn: "إلغاء",
    invalidCityEmpty: "لا يمكن أن تكون المدينة فارغة",
    invalidCityChinese: "لا يمكن أن تحتوي المدينة على أحرف صينية",
    invalidCityFormat: "يجب أن تبدأ المدينة بحرف إنجليزي كبير",
    citySaved: "تم حفظ المدينة: {city}"
  },
  ru: {
    modalTitle: "Установить город",
    saveBtn: "Сохранить",
    cancelBtn: "Отмена",
    invalidCityEmpty: "Город не может быть пустым",
    invalidCityChinese: "Город не может содержать китайские иероглифы",
    invalidCityFormat: "Город должен начинаться с заглавной английской буквы",
    citySaved: "Город сохранен: {city}"
  },
  es: {
    modalTitle: "Establecer ciudad",
    saveBtn: "Guardar",
    cancelBtn: "Cancelar",
    invalidCityEmpty: "La ciudad no puede estar vacía",
    invalidCityChinese: "La ciudad no puede contener caracteres chinos",
    invalidCityFormat: "La ciudad debe comenzar con letra mayúscula",
    citySaved: "Ciudad guardada: {city}"
  }
};

async function getModalLang() {
  try {
    const lang = await getRealTimeLanguage();
    return modalTranslations[lang] ? lang : 'en';
  } catch(e) {
    return 'en';
  }
}

async function updateModalLanguage() {
  const lang = await getModalLang();
  modalTitle.textContent = modalTranslations[lang].modalTitle;
  saveCityBtn.textContent = modalTranslations[lang].saveBtn;
  closeCityModal.textContent = modalTranslations[lang].cancelBtn;
  cityInput.placeholder = modalTranslations[lang].modalTitle;
}

async function showModalMessage(key, params={}) {
  const lang = await getModalLang();
  let msg = modalTranslations[lang][key] || key;
  for(const k in params) msg = msg.replace(`{${k}}`, params[k]);
  showWeatherLog(encodeURIComponent(msg), key === 'citySaved' ? 'info' : 'warning');
  if (typeof speakWeatherMessage === 'function') speakWeatherMessage(msg);
}

function validateCity(value){
  const chinesePattern = /[\u4e00-\u9fff]/;
  const startsUpper = /^[A-Z]/;
  if(!value) return "invalidCityEmpty";
  if(chinesePattern.test(value)) return "invalidCityChinese";
  if(!startsUpper.test(value)) return "invalidCityFormat";
  return null;
}

async function saveCity(){
  const value = cityInput.value.trim();
  const errKey = validateCity(value);
  if(errKey){
    await showModalMessage(errKey);
    return;
  }
  city = value;
  localStorage.setItem('city', city);
  await showModalMessage("citySaved",{city});
  fetchWeather();
  closeModal();
}

function openCityModal(){
  cityInput.value = city;
  cityModal.style.display = 'block';
  updateModalLanguage();
}
function closeModal(){
  cityModal.style.display = 'none';
}

function owmCodeToWiClass(code) {
  const map = {
    '01d': 'wi-day-sunny',    '01n': 'wi-night-clear',
    '02d': 'wi-day-cloudy',   '02n': 'wi-night-cloudy',
    '03d': 'wi-cloud',        '03n': 'wi-cloud',
    '04d': 'wi-cloudy',       '04n': 'wi-cloudy',
    '09d': 'wi-showers',      '09n': 'wi-showers',
    '10d': 'wi-day-rain',     '10n': 'wi-night-alt-rain',
    '11d': 'wi-thunderstorm', '11n': 'wi-thunderstorm',
    '13d': 'wi-snow',         '13n': 'wi-snow',
    '50d': 'wi-fog',          '50n': 'wi-fog'
  };
  return map[code] || 'wi-na';
}

async function getWeatherLangParam() {
  try {
    let lang = (await getRealTimeLanguage()).toLowerCase();
    const map = {
      'zh': 'zh_cn',
      'hk': 'zh_tw',
      'en': 'en',
      'ja': 'ja',
      'ko': 'kr',
      'fr': 'fr',
      'de': 'de',
      'es': 'es',
      'ru': 'ru',
      'th': 'th',
      'bn': 'bn',
      'ar': 'ar',
      'vi': 'vi'
    };

    return map[lang] || 'en';
  } catch(e) {
    return 'en';
  }
}

const CACHE_REFRESH_INTERVAL = 5 * 60 * 1000;

async function getTranslationCache(cityName) {
  try {
    const res = await fetch('/luci-static/spectra/bgm/weather_translation.php');
    if (!res.ok) throw 'Failed to load cache';
    const data = await res.json();
    const cityData = data.cities?.[cityName] || {};
    
    return {
      translations: cityData.translations || {},
      default_language: cityData.default_language || 'en',
      updated: cityData.updated || null
    };
  } catch (e) {
    return {
      translations: {},
      default_language: 'en',
      updated: null
    };
  }
}

async function updateTranslationCache(cityName, translations) {
  try {
    await fetch('/luci-static/spectra/bgm/weather_translation.php', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        city: cityName,
        translations: translations
      })
    });
  } catch (e) {
    console.error('Failed to update translation cache', e);
  }
}

function isCacheExpired(updatedTime) {
  if (!updatedTime) return true;
  const updated = new Date(updatedTime);
  return (Date.now() - updated.getTime()) > CACHE_REFRESH_INTERVAL;
}

async function translateWeatherDesc(descList) {
  if (!Array.isArray(descList) || descList.length === 0) return { text: '', city };

  const cache = await getTranslationCache(city);
  const lang = (await getRealTimeLanguage()).toLowerCase();

  const cachedLangData = cache.translations?.[lang] || { weather: {}, city: '' };
  const cachedWeather = cachedLangData.weather || {};
  let cachedCity = cachedLangData.city || '';

  const result = [];
  const translationsToUpdate = { weather: {}, city: cachedCity };

  for (const desc of descList) {
    if (cachedWeather[desc]) {
      result.push(cachedWeather[desc]);
    } else {
      try {
        const t = await myAppTranslate(desc, lang);
        translationsToUpdate.weather[desc] = t;
        result.push(t);
      } catch {
        translationsToUpdate.weather[desc] = desc;
        result.push(desc);
      }
    }
  }

  if (!cachedCity) {
    try {
      const tCity = await myAppTranslate(city, lang);
      translationsToUpdate.city = tCity;
      cachedCity = tCity;
    } catch {
      translationsToUpdate.city = city;
      cachedCity = city;
    }
  } else {
    translationsToUpdate.city = cachedCity;
  }

  const updatedCache = {
    ...cache.translations,
    [lang]: {
      weather: { ...cachedWeather, ...translationsToUpdate.weather },
      city: translationsToUpdate.city
    },
    default_language: lang
  };

  await updateTranslationCache(city, updatedCache);

  return { text: result.join('，'), city: cachedCity };
}

function hasUntranslatedContent(langData) {
  if (!langData || !langData.weather) return true;
  
  for (const [key, value] of Object.entries(langData.weather)) {
    if (!isProperlyTranslated(value, key, 'any')) {
      return true;
    }
  }
  
  if (langData.city && !isProperlyTranslated(langData.city, langData.city, 'any')) {
    return true;
  }
  
  return false;
}

function isProperlyTranslated(translatedText, originalText, lang) {
  if (translatedText === originalText) {
    return false;
  }
  
  if (lang !== 'en' && isMostlyEnglish(translatedText)) {
    return false;
  }
  
  if (['zh', 'ja', 'ko', 'hk', 'tw'].includes(lang) && !containsNonLatin(translatedText)) {
    return false;
  }
  
  return true;
}

function isMostlyEnglish(text) {
  const englishPattern = /^[a-zA-Z\s.,!?']+$/;
  return englishPattern.test(text);
}

function containsNonLatin(text) {
  const nonLatinPattern = /[^\u0000-\u007F]/;
  return nonLatinPattern.test(text);
}

setInterval(async () => {
  const cache = await getTranslationCache();
  if (cache.city !== city || isCacheExpired(cache.updated)) {
    if (currentWeatherData) {
      const descList = currentWeatherData.weather.map(w => w.description);
      await translateWeatherDesc(descList);
    }
  }
}, CACHE_REFRESH_INTERVAL);

async function updateWeatherUI(data) {
  document.getElementById('loadingIcon').style.display = 'none';

  const iconCode = data.weather[0].icon;
  const weatherIcon = document.getElementById('weatherIcon');
  weatherIcon.className = `wi ${owmCodeToWiClass(iconCode)}`;
  weatherIcon.style.display = 'inline-block';
  weatherIcon.style.color = '#FFD700';

  const temp = Math.round(data.main.temp);
  const descList = data.weather.map(w => w.description);
  const { text: translatedDesc, city: translatedCity } = await translateWeatherDesc(descList);

  document.getElementById('weatherText').textContent = `${translatedDesc} ${temp}℃`;
  cityNameDisplay.textContent = translatedCity;
}

async function updateCityNameDisplay(name) {
  try {
    const lang = await getRealTimeLanguage();
    const translatedCityName = await myAppTranslate(name, lang);
    cityNameDisplay.textContent = translatedCityName;
  } catch(e) {
    cityNameDisplay.textContent = name;
  }
}

async function fetchWeather() {
  const url = `https://api.openweathermap.org/data/2.5/weather?q=${encodeURIComponent(city)}&appid=${apiKey}&units=metric&lang=en`;
  fetch(url)
    .then(res => res.ok ? res.json() : Promise.reject('Network not OK'))
    .then(data => {
      if(data.weather && data.main){
        currentWeatherData = data;
        updateWeatherUI(data);
      }
    })
    .catch(err => showWeatherLog(encodeURIComponent('Error fetching weather'), 'error'));
}

setCityBtn.addEventListener('click', openCityModal);
closeCityModal.addEventListener('click', closeModal);
saveCityBtn.addEventListener('click', saveCity);

document.addEventListener('DOMContentLoaded', async () => {
  await updateModalLanguage();
  fetchWeather();
  setInterval(fetchWeather, 10*60*1000);
});

let lastSpokenHour = null;
const audio = document.getElementById("bell-audio");

document.addEventListener("click", () => {
  audio.muted = false;
  audio.play().then(() => {
    audio.pause();
    audio.currentTime = 0;
  }).catch(() => {});
}, { once: true });

async function speakTimeNow() {
  const now = new Date();
  const hour = now.getHours();
  const minute = now.getMinutes();
  const second = now.getSeconds();

  if (minute === 59 && second === 50 && lastSpokenHour !== (hour + 1) % 24) {
    lastSpokenHour = (hour + 1) % 24;
    try {
      audio.currentTime = 0;
      await audio.play();

      setTimeout(() => {
        doSpeak(lastSpokenHour);
      }, 10000);
    } catch {}
  }
}

async function doSpeak(hour) {
  const lang = await getRealTimeLanguage();
  let message = '';

  if (lang.startsWith('zh') || lang.startsWith('zh-tw') || lang.startsWith('hk')) {
    let period = '';
    if (hour >= 0 && hour < 6) period = '凌晨';
    else if (hour >= 6 && hour < 12) period = '早上';
    else if (hour >= 12 && hour < 18) period = '下午';
    else period = '晚上';
    message = `整点报时，现在是北京时间${period}${hour}点整`;
  } else {
    const displayHour = hour % 12 || 12;
    const period = hour >= 12 ? 'PM' : 'AM';
    message = `It is now ${displayHour} ${period}.`;
  }

  if (typeof speakWeatherMessage === 'function') {
    speakWeatherMessage(message);
  }
}

setInterval(speakTimeNow, 1000);

async function refreshUIAfterLanguageChange() {
    await updateModalLanguage();

    if (currentWeatherData) {
        await updateWeatherUI(currentWeatherData);
    }
}

let lastLang = null;
setInterval(async () => {
    const lang = await getRealTimeLanguage();
    if (lang !== lastLang) {
        lastLang = lang;
        refreshUIAfterLanguageChange();
    }
}, 8000);

const weatherCard = document.querySelector('.weather-card');
const loadingIcon = document.getElementById('loadingIcon');

weatherCard.style.cursor = 'pointer';

weatherCard.addEventListener('click', async (event) => {
  if (event.target.closest('#setCityBtn') || event.target.closest('#saveCityBtn')) return;

  loadingIcon.style.display = 'inline-block';

  try {
    await fetchWeather();
  } finally {
    loadingIcon.style.display = 'none';
  }
});
</script> 

<script>
function updatemenu(){1==document.getElementById("responsive-menu").checked?(document.getElementById("menu").style.borderBottomRightRadius="0",document.getElementById("menu").style.borderBottomLeftRadius="0"):document.getElementById("menu").style.borderRadius="0px"}
</script>

</header>

	<div class="main">
		<div class="main-left" id="mainmenu" style="display:none">
			<div class="sidenav-header d-flex align-items-center">
				<a id="logo" href="#" class="royal-style"><%=brand_name%></a>	
				<div class="ml-auto">
					<!-- Sidenav toggler -->
					<div class="sidenav-toggler d-none d-xl-block active" data-action="sidenav-unpin"
						data-target="#sidenav-main">
						<div class="sidenav-toggler-inner">
							<i class="sidenav-toggler-line"></i>
							<i class="sidenav-toggler-line"></i>
							<i class="sidenav-toggler-line"></i>
						</div>
					</div>
				</div>
			</div>
		</div>
		<div class="main-right">
			
				
			
			<div class="darkMask"></div>
			<div id="maincontent">
				<div class="container">
					<%- if luci.sys.process.info("uid") == 0 and luci.sys.user.getuser("root") and not luci.sys.user.getpasswd("root") then -%>
					<div class="alert-message error">
						<h4><%:No password set!%></h4>
						<p><%:There is no password set on this router. Please configure a root password to protect the web interface.%>
						</p>
						<% if disp.lookup("admin/system/admin") then %>
						<div class="right"><a class="btn"
								href="<%=url("admin/system/admin")%>"><%:Go to password configuration...%></a></div>
						<% end %>
					</div>
					<%- end -%>

					<noscript>
						<div class="alert-message error">
							<h4><%:JavaScript required!%></h4>
							<p><%:You must enable JavaScript in your browser or LuCI will not work properly.%></p>
						</div>
					</noscript>

					<div id="tabmenu" style="display:none"></div>
