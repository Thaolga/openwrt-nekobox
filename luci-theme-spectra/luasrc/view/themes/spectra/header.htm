<%#
	Argon is a clean HTML5 theme for LuCI. It is based on luci-theme-material Argon Template

	luci-theme-argon
	Copyright 2020 Jerrykuku <jerrykuku@qq.com>

	Have a bug? Please create an issue here on GitHub!
	https://github.com/jerrykuku/luci-theme-argon/issues

	luci-theme-material:
	Copyright 2015 Lutty Yang <lutty@wcan.in>

	Argon Theme
	https://demos.creative-tim.com/argon-dashboard/index.html

	Licensed to the public under the Apache License 2.0
-%>

<%
	local sys = require "luci.sys"
	local util = require "luci.util"
	local http = require "luci.http"
	local disp = require "luci.dispatcher"
	local ver = require "luci.version"
        local mode = 'normal'
	local boardinfo = util.ubus("system", "board")

	local node = disp.context.dispatched

	local fs = require "nixio.fs"
	local nutil = require "nixio.util"
	local uci = require 'luci.model.uci'.cursor()

	-- send as HTML5
	http.prepare_content("text/html")

	-- Custom settings
	local mode = 'normal'
	local dark_css = fs.readfile('/www/luci-static/spectra/css/dark.css')
	local bar_color = '#5e72e4'
	local primary, dark_primary, blur_radius, blur_radius_dark, blur_opacity
	if fs.access('/etc/config/spectra') then
		primary = uci:get_first('spectra', 'global', 'primary')
		dark_primary = uci:get_first('spectra', 'global', 'dark_primary')
		blur_radius = uci:get_first('spectra', 'global', 'blur')
		blur_radius_dark = uci:get_first('spectra', 'global', 'blur_dark')
		blur_opacity = uci:get_first('spectra', 'global', 'transparency')
		blur_opacity_dark = uci:get_first('spectra', 'global', 'transparency_dark')
		mode = uci:get_first('spectra', 'global', 'mode')
		bar_color = mode == 'dark' and dark_primary or primary
	end

	-- Brand name
	local brand_name = boardinfo.hostname or "?"
-%>

<!DOCTYPE html>
<html lang="<%=luci.i18n.context.lang%>">

<head>
<script>
(function() {
    try {
        const savedSettings = localStorage.getItem('appColorSettings');
        if (savedSettings) {
            const settings = JSON.parse(savedSettings);
            const root = document.documentElement;
            
            root.style.setProperty('--base-hue', settings.hue || 260);
            root.style.setProperty('--base-chroma', settings.chroma || 0.10);
            root.style.setProperty('--base-lightness', settings.lightness || 30);
            
            const hue = settings.hue || 260;
            root.style.setProperty('--base-hue-1', hue + 20);
            root.style.setProperty('--base-hue-2', hue + 200);
            root.style.setProperty('--base-hue-3', hue + 135);
            root.style.setProperty('--base-hue-4', hue + 80);
            root.style.setProperty('--base-hue-5', hue + 270);
            root.style.setProperty('--base-hue-6', hue + 170);
            root.style.setProperty('--base-hue-7', hue + 340);
            
            const isLight = (settings.lightness || 30) > 60;
            root.setAttribute('data-theme', isLight ? 'light' : 'dark');
            
            const textL = isLight ? 20 : 95;
            root.style.setProperty('--text-primary', `oklch(${textL}% 0 0)`);
        }
    } catch (e) {
        console.error('Error loading saved colors:', e);
    }
})();
</script>
    <meta charset="utf-8">
    <title>
        <%=striptags( (boardinfo.hostname or "?") .. ( (node and node.title) and ' - ' .. translate(node.title) or '')) %>
        - LuCI</title>
    <meta content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0" name="viewport" />
    <meta name="format-detection" content="telephone=no, email=no" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="mobile-web-app-capable" content="yes">
    <meta name="x5-fullscreen" content="true">
    <meta name="full-screen" content="yes">
    <meta name="x5-page-mode" content="app">
    <meta name="browsermode" content="application">
    <meta name="msapplication-tap-highlight" content="no">
    <meta name="msapplication-TileColor" content="<%=bar_color%>">
    <meta name="application-name" content="<%=striptags( (boardinfo.hostname or "?") ) %> - LuCI">
    <meta name="apple-mobile-web-app-title" content="<%=striptags( (boardinfo.hostname or "?") ) %> - LuCI">
    <link rel="apple-touch-icon" sizes="60x60" href="<%=media%>/icon/apple-icon-60x60.png">
    <link rel="apple-touch-icon" sizes="72x72" href="<%=media%>/icon/apple-icon-72x72.png">
    <link rel="apple-touch-icon" sizes="144x144" href="<%=media%>/icon/apple-icon-144x144.png">
    <link rel="icon" type="image/png" sizes="192x192" href="<%=media%>/icon/android-icon-192x192.png">
    <link rel="icon" type="image/png" sizes="32x32" href="<%=media%>/icon/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="96x96" href="<%=media%>/icon/favicon-96x96.png">
    <link rel="icon" type="image/png" sizes="16x16" href="<%=media%>/icon/favicon-16x16.png">
    <link rel="manifest" href="<%=media%>/icon/manifest.json"  crossorigin="use-credentials">
    <meta name="msapplication-TileColor" content="<%=bar_color%>">
    <meta name="msapplication-TileImage" content="<%=media%>/icon/ms-icon-144x144.png">
    <meta name="theme-color" content="<%=bar_color%>">
    <link rel="stylesheet" href="<%=media%>/css/cascade.css?v=2.2.10.10">
    <script src="/luci-static/spectra/js/custom.js"></script>
    <script src="/luci-static/spectra/js/i18n.js"></script>
    <link href="/luci-static/spectra/css/bootstrap-icons.css" rel="stylesheet">
    <link href="/luci-static/spectra/css/weather-icons.min.css" rel="stylesheet">
    <link href="/luci-static/spectra/css/all.min.css" rel="stylesheet">
    <link href="/luci-static/spectra/css/spark.css" rel="stylesheet">
    <style title="text/css">
        <% if mode == 'normal' then %>
            @media (prefers-color-scheme: dark) {
                <%=dark_css%>
            }
        <% elseif mode == 'dark' then %>
            <%=dark_css%>
        <% end -%>
        <% if fs.access('/etc/config/spectra') then %>
        :root {
            --primary: <%=primary%>;
            --dark-primary: <%=dark_primary%>;
            --blur-radius:<%=blur_radius%>px;
            --blur-opacity:<%=blur_opacity%>;
            --blur-radius-dark:<%=blur_radius_dark%>px;
            --blur-opacity-dark:<%=blur_opacity_dark%>;
        }
        <% end -%>
    </style>
	<link rel="shortcut icon" href="<%=media%>/favicon.ico">
        <link rel="stylesheet" href="<%=resource%>/spectra/easeicon.css?v=2.4">
	<% if node and node.css then %>
	<link rel="stylesheet" href="<%=resource%>/<%=node.css%>">
	<% end -%>
	<% if css then %>
	<style title="text/css">
		<%=css %>
	</style>
	<% end -%>
	<script src="<%=media%>/js/polyfill.min.js?v=2.2.10.10"></script>
	<script src="<%=url('admin/translations', luci.i18n.context.lang)%>?v=<%=ver.luciversion%>"></script>
	<script src="<%=resource%>/cbi.js?v=<%=ver.luciversion%>"></script>
	<script src="<%=resource%>/luci.js?v=<%=ver.luciversion%>"></script>
	<script src="<%=media%>/js/jquery.min.js?v=3.5.1"></script>
</head>

<body
	theme="<%=mode%>"
	class="lang_<%=luci.i18n.context.lang%> <% if node then %><%= striptags( node.title ) %><% end %> <% if luci.dispatcher.context.authsession then %>logged-in<% end %>"
	data-page="<%= table.concat(disp.context.requestpath, "-") %>">

<div class="wrapper">
		<span></span>
		<span></span>
		<span></span>
		<span></span>
		<span></span>
		<span></span>
		<span></span>
		<span></span>
		<span></span>
		<span></span>
		<span></span>
		<span></span>
		<span></span>
</div>
<header>
    <div class="fill">
        <div class="container">
            <a class="showSide"></a>
        <div class="navbar-container">
            <div class="navbar-left">
                <div class="nav-icon">
                    <a id="oc" href="/cgi-bin/luci/admin/services/openclash">
                        <img src="<%=media%>/navbar/clash.gif" title="OpenClash">
                    </a>
                </div>
                <div class="nav-icon">
                    <a href="/cgi-bin/luci/admin/services/nekobox">
                        <img src="<%=media%>/navbar/yacd.gif" title="NekoBox">
                    </a>
                </div>
                <div class="nav-icon">
                    <a href="/cgi-bin/luci/admin/services/spectra">
                        <img src="<%=media%>/navbar/tinyfm.gif" title="Spectra">
                    </a>
                </div>
                <div class="nav-icon">
                    <a href="/cgi-bin/luci/admin/status/realtime">
                        <img src="<%=media%>/navbar/netmon.gif" title="Realtime">
                    </a>
                </div>
                <div class="nav-icon">
                    <a href="/cgi-bin/luci/admin/services/ttyd">
                        <img src="<%=media%>/navbar/terminal.gif" title="TTYD">
                    </a>
                </div>
                <div class="nav-icon">
                    <a href="/cgi-bin/luci/admin/services/homeproxy">
                        <img src="<%=media%>/navbar/modem.gif" title="HomeProxy">
                    </a>
                </div>
                <div class="nav-icon" id="networkIcon">
                    <a href="/cgi-bin/luci/admin/network/network">
                        <img src="<%=media%>/navbar/wifi.gif" title="Interface">
                    </a>
                </div>
                <div class="nav-icon" id="wifiIcon">
                        <img id="settings-icon" src="<%=media%>/navbar/interface.gif" alt="Interface" style="cursor:pointer;">
                </div>
                <div class="app-icon-btn"  id="panel">
                   <a onclick="openControlPanel()" style="cursor: pointer;" data-title="ui_control">
                       <i class="fas fa-sliders-h"></i>
                   </a>
               </div>

                <div class="icon-group">
                        <button  class="app-icon-btn" id="clear-cache-btn" onclick="clearCache()" data-title="clear_button"><i class="fa-solid fa-broom"></i></button>
                        <button class="app-icon-btn" onclick="openMusicModal()" data-title="music_player"><i class="bi bi-music-note-beamed"></i></button>
                        <button class="app-icon-btn" id="themeLoaderToggle" data-title="theme_loader_btn_title"> <i class="fa fa-atom"></i> </button>
                        <button class="app-icon-btn" onclick="myAppIP.showDetailModal()" data-title="ip_details"><i class="fas fa-globe"></i></button>
                        <button class="translation-toggle app-icon-btn" onclick="toggleTranslation()" data-title="online_translation"><i class="fas fa-language"></i></button>
                        <button type="button" class="app-icon-btn" id="openEditModal" data-title="edit_ip_database"><i class="fas fa-edit"></i></button>
                        <button id="setCityBtn" class="app-icon-btn"><i class="fas fa-location-dot"></i></button>
                        <button type="button" class="app-icon-btn" id="colorPickerBtn" onclick="document.getElementById('colorPicker').click()" data-title="selectBackgroundColor"><i class="fas fa-moon"></i></button>
                        <input type="color" id="colorPicker" value="#0f3460" style="display: none;">
                        <button type="button" class="app-icon-btn" onclick="openLanguageModal()" data-title="select_language"><i class="bi bi-translate"></i></button>
                </div>
            </div>

            <div class="weather-card" style="position:relative; display:flex; align-items:center; padding:10px; border-radius:8px; color:white;  height:50px; margin-top:3px;">
              <div style="flex:1; display:flex; align-items:center; gap:25px;">   
                  <div id="iconContainer" style="position:relative; width:50px; height:48px; overflow:hidden;"> 
                      <img id="loadingIcon" src="/luci-static/ipip/img/loading.svg" style="position:absolute; top:50%; left:50%; transform:translate(-50%, -50%); width:50px; height:50px;" />
                      <i id="weatherIcon" class="wi" style="position:absolute; top:57%; left:50%; transform:translate(-50%, -50%); font-size:35px; width:40px; height:40px; display:none; color:#FFD700;"></i>
                  </div>
                <div style="display:flex; flex-direction:column; justify-content:center; line-height:1;">
                  <div id="cityNameDisplay" style="font-weight:bold; font-size:16px; color:var(--color-green); margin-bottom:8px;">
                  </div>
                  <div id="weatherText" style="font-size:16px; color:rgb(255, 0, 255);">
                  </div>
                </div>
              </div>
            </div>

            <div class="ip-container">
                <div class="imgBox">
                    <img id="flag" title="">
                    <div class="loading" id="loading" style="display:none;">
                        <img src="/luci-static/ipip/img/loading.svg" alt="loading">
                     </div>
                </div>
                <div class="ip-text">
                    <span id="d-ip"></span>
                    <span id="ipip"></span>
                </div>
            </div>

            <div id="result-overlay"></div>

            <div id="result" class="navbar-right">
                <div class="site-icon" onclick="pingHost('baidu', 'Baidu', 'https://www.baidu.com')">
                    <img src="/luci-static/ipip/img/site_icon_01.png" id="baidu-normal" alt="Baidu">
                    <img src="/luci-static/ipip/img/site_icon1_01.png" id="baidu-gray" alt="Baidu">
                </div>
                <div class="site-icon" onclick="pingHost('taobao', 'Taobao', 'https://www.taobao.com')">
                    <img src="/luci-static/ipip/img/site_icon_02.png" id="taobao-normal" alt="Taobao">
                    <img src="/luci-static/ipip/img/site_icon1_02.png" id="taobao-gray" alt="Taobao">
                </div>
                <div class="site-icon" onclick="pingHost('google', 'Google', 'https://www.google.com')">
                    <img src="/luci-static/ipip/img/site_icon_03.png" id="google-normal" alt="Google">
                    <img src="/luci-static/ipip/img/site_icon1_03.png" id="google-gray" alt="Google">
                </div>
                <div class="site-icon" onclick="pingHost('youtube', 'YouTube', 'https://www.youtube.com')">
                    <img src="/luci-static/ipip/img/site_icon_04.png" id="youtube-normal" alt="YouTube">
                    <img src="/luci-static/ipip/img/site_icon1_04.png" id="youtube-gray" alt="YouTube">
                </div>
            </div>
        </div>
    </div>
</div>

<div id="languageModal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 9999;">
    <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background: var(--bg-container); padding: 20px; border-radius: 8px; min-width: 550px;">
        <div style="display: flex; align-items: center; margin-bottom: 15px;">
            <img id="currentFlag" src="/luci-static/ipip/flags/cn.png" style="width: 45px; height: 34px; margin-right: 10px; object-fit: contain;">
            <h3 style="margin: 0; font-size:20px; color:var(--accent-color);" data-translate="select_language"></h3>
        </div>
        <select id="languageSelect" style="width: 100%; padding: 8px; margin: 10px 0; border:1px solid #ccc;">
            <option value="zh" data-translate="simplified_chinese"></option>
            <option value="hk" data-translate="traditional_chinese"></option>
            <option value="en" data-translate="english"></option>
            <option value="ko" data-translate="korean"></option>
            <option value="vi" data-translate="vietnamese"></option>
            <option value="th" data-translate="thailand"></option>
            <option value="ja" data-translate="japanese"></option>
            <option value="ru" data-translate="russian"></option>
            <option value="de" data-translate="germany"></option>
            <option value="fr" data-translate="france"></option>
            <option value="ar" data-translate="arabic"></option>
            <option value="es" data-translate="spanish"></option>
            <option value="bn" data-translate="bangladesh"></option>
        </select>
        <div id="chineseVoiceSelect" style="margin-top:15px; display:none;">
          <label style="font-weight:bold; color:var(--accent-color);" id="chineseVoiceTitle" data-translate="chinese_voice_title"></label>
          <div style="margin-top:8px; color: var(--text-primary); display: flex; align-items: center; padding-left:4px;">
            <label style="display:inline-flex; align-items:center; margin-right:12px;">
              <input type="radio" name="chineseVoice" value="zh-CN" style="vertical-align: middle; margin:0 2px 0 0; position: relative; top: -0.1px;"> <span data-translate="chinese_voice_mandarin"></span>
            </label>
            <label style="display:inline-flex; align-items:center; margin-right:12px;">
              <input type="radio" name="chineseVoice" value="zh-HK" style="vertical-align: middle; margin:0 2px 0 0; position: relative; top: -0.1px;"> <span data-translate="chinese_voice_cantonese"></span>
            </label>
            <label style="display:inline-flex; align-items:center;">
              <input type="radio" name="chineseVoice" value="zh-TW" style="vertical-align: middle; margin:0 2px 0 0; position: relative; top: -0.1px;"> <span data-translate="chinese_voice_taiwan"></span>
            </label>
          </div>
        </div>
        <div style="display:flex; align-items: center; margin: 25px 0;">
            <input type="checkbox" id="voiceToggle" checked style="vertical-align: middle; margin:0;">
            <label for="voiceToggle" id="voiceLabel" data-translate="voice_label" style="margin-left:8px; color: var(--text-primary); display:inline-flex; align-items:center;"></label>
        </div>
        <div style="text-align: right; margin-top: 15px;">
            <button type="button" class="cbi-button cbi-button-remove" onclick="closeLanguageModal()" data-translate="cancel" style="margin-right: 10px;"></button>
            <button type="button" class="cbi-button cbi-button-save" onclick="saveLanguage()" data-translate="save"></button>
        </div>
    </div>
</div>

<div id="floatingLyrics">
    <div class="floating-controls">
        <button class="ctrl-btn" onclick="changeTrack(-1, true)" data-title="previous_track">
            <i class="fas fa-backward"></i>
        </button>
        <button class="ctrl-btn" id="floatingPlayBtn" onclick="togglePlay()" data-title="play_pause">
            <i class="bi bi-play-fill"></i>
        </button>
        <button class="ctrl-btn" onclick="changeTrack(1, true)" data-title="next_track">
            <i class="fas fa-forward"></i>
        </button>
        <button class="ctrl-btn" id="floatingRepeatBtn" onclick="toggleRepeat()">
            <i class="bi bi-arrow-repeat"></i>
        </button>
        <button class="ctrl-btn" id="speedToggle" data-title="playback_speed">
            <span id="speedLabel">1×</span>
        </button>
        <button class="ctrl-btn" id="muteToggle" data-title="volume">
            <i class="bi bi-volume-up-fill"></i>
        </button>
        <button class="ctrl-btn" id="updatePlaylistBtn" onclick="updatePlaylist()" 
                data-title="update_playlist">
            <i class="fa fa-sync-alt"></i>
        </button>
        <button class="ctrl-btn" id="goFirstBtn">
            <i class="fas fa-circle-left"></i>
        </button>
        <button class="ctrl-btn toggleFloatingLyricsBtn" data-title="toggle_floating_lyrics">
            <i class="bi bi-display floatingIcon"></i>
        </button>
    </div>
    <div id="floatingCurrentSong" class="vertical-title"></div>
    <div class="vertical-lyrics"></div>
</div>

<div class="music-modal" id="musicModal">
    <div class="modal-content">
        <div class="music-modal-header">
            <h5 class="modal-title"><i class="fa-solid fa-music"></i> <span data-translate="music_player">Music Player</span></h5>
            <button type="button" class="close-btn" onclick="closeMusicModal()">&times;</button>
        </div>
        <div class="modal-body">
            <div id="floatingLyrics"></div>
            <div id="currentSong" class="current-song"></div>
            <div class="lyrics-container" id="lyricsContainer"></div>
            <div class="non-lyrics-content">
                <div class="progress-container">
                    <div class="progress">
                        <div class="progress-bar" id="progressBar"></div>
                    </div>
                </div>
                <div class="time-display">
                    <span id="currentTime">0:00</span>
                    <span id="duration">0:00</span>
                </div>          
                <div class="controls">
                    <button class="control-btn toggleFloatingLyricsBtn" data-title="toggle_floating_lyrics">
                        <i class="bi bi-display floating-icon"></i>
                    </button>
                    <button class="control-btn" id="repeatBtn" onclick="toggleRepeat()">
                        <i class="bi bi-arrow-repeat"></i>
                    </button>
                    <button class="control-btn" onclick="changeTrack(-1, true)" data-title="previous_track">
                        <i class="bi bi-caret-left-fill"></i>
                    </button>
                    <button class="control-btn play-pause-btn" id="playPauseBtn" onclick="togglePlay()" data-title="play_pause">
                        <i class="bi bi-play-fill"></i>
                    </button>
                    <button class="control-btn" onclick="changeTrack(1, true)" data-title="next_track">
                        <i class="bi bi-caret-right-fill"></i>
                    </button>
                    <button class="control-btn" onclick="openUrlModal()" data-title="custom_playlist">
                        <i class="bi bi-music-note-list"></i>
                    </button>
                    <button class="control-btn volume-btn" id="volumeToggle" data-title="volume">
                        <i class="bi bi-volume-up-fill"></i>
                        <div class="volume-slider-container" id="volumePanel">
                            <input type="range" class="volume-slider" id="volumeSlider" min="0" max="1" step="0.01" value="1">
                        </div>
                    </button>
                </div>
                <div class="playlist" id="playlist"></div>
            </div>
        </div>
        <div class="music-modal-footer">
            <button class="lyrics-toggle-btn" id="lyricsToggle">
                <i class="bi bi-chevron-down" id="lyricsIcon"></i>
            </button>
            <button type="button" class="cancel-btn" onclick="closeMusicModal()" data-translate="cancel">Cancel</button>
        </div>
    </div>
</div>
<style>
.control-panel {
    display: none;
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 90%;
    max-width: 800px;
    background: var(--bg-container);
    backdrop-filter: var(--glass-blur);
    border: var(--glass-border);
    border-radius: var(--radius);
    box-shadow: var(--breathing-glow);
    z-index: 10001;
    padding: 20px;
    color: var(--text-primary);
}

.control-panel-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    border-bottom: var(--border-light);
    padding-bottom: 15px;
    margin-bottom: 20px;
}

.control-panel-title {
    margin: 0;
    font-size: 1.3rem;
    color: var(--accent-color);
    display: flex;
    align-items: center;
    gap: 10px;
}

.control-panel-close {
    background: none;
    border: none;
    color: var(--text-secondary);
    font-size: 1.2rem;
    cursor: pointer;
    width: 32px;
    height: 32px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: var(--transition);
}

.control-panel-close:hover {
    background: var(--color-red);
    color: white;
}

.control-panel-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 15px;
}

.control-card {
    background: var(--bg-body);
    border-radius: var(--radius);
    padding: 15px;
    border: var(--border-light);
    text-align: center;
    cursor: pointer;
    transition: var(--transition);
    box-shadow: 0 2px 8px color-mix(in oklch, var(--bg-container), black 20%);
}

.control-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px color-mix(in oklch, var(--bg-container), black 30%);
}

.control-card-icon {
    font-size: 20px;
    margin-bottom: 8px;
}

.control-card-title {
    font-size: 13px;
    margin-bottom: 5px;
}

.control-card-status {
    font-size: 11px;
    color: var(--text-secondary);
}

.reset-button {
    background: var(--btn-danger-bg);
    color: #fff;
    border: none;
    padding: 8px 20px;
    border-radius: var(--radius);
    cursor: pointer;
    font-size: 13px;
    transition: var(--transition);
    display: inline-flex;
    align-items: center;
    gap: 8px;
    box-shadow: 0 2px 6px color-mix(in oklch, var(--btn-danger-bg), black 40%);
}

.reset-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px color-mix(in oklch, var(--btn-danger-bg), black 50%);
}

.overlay {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    z-index: 10000;
}

.lyrics-container {
    height: 300px;
    flex: none;
    overflow-y: auto;
    padding: 20px;
    margin: 15px 0;
    border-radius: var(--radius);
    background: var(--card-bg);
    border: var(--glass-border);
    backdrop-filter: var(--glass-blur);
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: flex-start;
    transition: all var(--transition-speed) ease;
}

.lyrics-container:hover {
    transform: translateY(-1px);
}

.lyric-line {
    opacity: 1;
    color: var(--text-primary);
    font-size: 1.4rem;
    font-weight: 500;
    transition: all 0.4s ease;
    margin: 12px 0;
    text-align: center;
    line-height: 1.6;
    padding: 8px 16px;
    border-radius: 12px;
    background: color-mix(in oklch, var(--card-bg), transparent 95%);
    backdrop-filter: blur(10px);
}

.lyric-line.highlight {
    color: var(--text-primary);
    font-size: 1.8rem;
    font-weight: 700;
    background: color-mix(in oklch, var(--accent-color), transparent 92%);
    border: 1px solid color-mix(in oklch, var(--accent-color), transparent 70%);
    box-shadow:
        0 4px 20px color-mix(in oklch, var(--accent-color), transparent 60%),
        0 0 0 1px color-mix(in oklch, var(--accent-color), transparent 30%);
    transform: scale(1.02);
    position: relative;
    z-index: 2;
}

.lyric-line .char {
    display: inline-block;
    white-space: nowrap;
    margin: 0 2px;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    position: relative;
    font-weight: inherit;
}

.lyric-line .char {
    color: var(--text-primary);
    opacity: 0.7;
    text-shadow: var(--text-shadow);
}

.modal-content {

    transition: cursor 0.2s ease;
}

.lyric-line .char.played {
    color: var(--text-primary);
    opacity: 0.5;
    transform: scale(0.95);
    filter: grayscale(0.3);
}

.lyric-line.highlight .char.active {
    opacity: 1;
    transform: scale(1.4);
    color: transparent;
    background: linear-gradient(135deg,
            oklch(calc(var(--l) + 15%) calc(var(--c) + 0.3) calc(var(--base-hue) + 0)) 0%,
            oklch(calc(var(--l) + 20%) calc(var(--c) + 0.4) calc(var(--base-hue) + 60)) 25%,
            oklch(calc(var(--l) + 25%) calc(var(--c) + 0.35) calc(var(--base-hue) + 120)) 50%,
            oklch(calc(var(--l) + 20%) calc(var(--c) + 0.4) calc(var(--base-hue) + 180)) 75%,
            oklch(calc(var(--l) + 15%) calc(var(--c) + 0.3) calc(var(--base-hue) + 240)) 100%);
    background-size: 300% 300%;
    background-clip: text;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    animation: shimmer 2s ease-in-out infinite, float 3s ease-in-out infinite;
    text-shadow:
        0 0 20px color-mix(in oklch, var(--accent-color), transparent 30%),
        0 0 40px color-mix(in oklch, var(--accent-color), transparent 50%),
        0 0 60px color-mix(in oklch, var(--accent-color), transparent 20%);
    position: relative;
    z-index: 3;
}

[data-theme="dark"] .lyric-line.highlight .char.active {
    background: linear-gradient(135deg,
            oklch(85% 0.35 calc(var(--base-hue) + 0)) 0%,
            oklch(90% 0.4 calc(var(--base-hue) + 90)) 50%,
            oklch(85% 0.35 calc(var(--base-hue) + 180)) 100%);
    background-size: 200% 200%;
    background-clip: text;
    animation: shimmer 1.5s ease-in-out infinite;
}

[data-theme="light"] .lyric-line.highlight .char.active {
    background: linear-gradient(135deg,
            oklch(60% 0.4 calc(var(--base-hue) + 0)) 0%,
            oklch(70% 0.45 calc(var(--base-hue) + 120)) 50%,
            oklch(60% 0.4 calc(var(--base-hue) + 240)) 100%);
    background-size: 200% 200%;
    background-clip: text;
    animation: shimmer 2s ease-in-out infinite;
}

.char.space {
    display: inline;
    min-width: 0.4em;
    margin: 0 1px;
}

.lyric-line .word {
    display: inline-block;
    margin: 0 4px;
}

.lyric-line .word .char {
    margin: 0 1px;
    display: inline;
}

.lyric-line.highlight .word.active {
    transform: scale(1.2);
}

@keyframes shimmer {

    0%,
    100% {
        background-position: 0% 50%;
        filter: hue-rotate(0deg);
    }

    50% {
        background-position: 100% 50%;
        filter: hue-rotate(20deg);
    }
}

@keyframes float {

    0%,
    100% {
        transform: scale(1.4) translateY(0px);
    }

    50% {
        transform: scale(1.45) translateY(-2px);
    }
}

@keyframes glow-pulse {

    0%,
    100% {
        text-shadow:
            0 0 20px color-mix(in oklch, var(--accent-color), transparent 30%),
            0 0 40px color-mix(in oklch, var(--accent-color), transparent 50%);
    }

    50% {
        text-shadow:
            0 0 30px color-mix(in oklch, var(--accent-color), transparent 40%),
            0 0 60px color-mix(in oklch, var(--accent-color), transparent 60%),
            0 0 80px color-mix(in oklch, var(--accent-color), transparent 30%);
    }
}

@keyframes textPop {
    from {
        opacity: 0;
        transform: translateY(20px) scale(0.9);
    }

    to {
        opacity: 1;
        transform: translateY(0) scale(1);
    }
}

.lyric-line.enter-active {
    animation: textPop 0.6s cubic-bezier(0.34, 1.56, 0.64, 1);
}

#no-lyrics {
    text-align: center;
    color: var(--text-primary);
    padding: 3rem 2rem;
    font-size: 1.6rem;
    font-weight: 300;
    opacity: 0.8;
    font-style: italic;
}

.lyrics-loading {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 200px;
    color: var(--text-primary);
    font-size: 1.2rem;
}

@media (max-width: 768px) {
    .lyrics-container {
        padding: 15px;
        margin: 10px 0;
    }

    .lyric-line {
        font-size: 1.2rem;
        margin: 8px 0;
        padding: 6px 12px;
    }

    .lyric-line.highlight {
        font-size: 1.5rem;
    }

    .lyric-line.highlight .char.active {
        transform: scale(1.3);
    }
}

.music-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 1050;
    display: none;
    align-items: center;
    justify-content: center;
}

.music-modal.active {
    display: flex;
}

.modal-overlay {
    display: none;
}

.modal-content {
    position: relative;
    background: var(--bg-container);
    border-radius: var(--radius);
    box-shadow:
        0 25px 50px color-mix(in oklch, var(--bg-container), black 60%),
        0 0 0 1px color-mix(in oklch, var(--border-color), transparent 50%);
    width: 90%;
    max-width: 1200px;
    max-height: 90vh;
    overflow: hidden;
    backdrop-filter: var(--glass-blur);
    border: var(--glass-border);
    animation: modalSlideIn 0.4s cubic-bezier(0.34, 1.56, 0.64, 1);
    margin: auto;
}

@keyframes modalSlideIn {
    from {
        opacity: 0;
        transform: scale(0.9) translateY(30px);
    }

    to {
        opacity: 1;
        transform: scale(1) translateY(0);
    }
}

.music-modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 15px 25px;
    background: var(--header-bg);
    border-bottom: 1px solid var(--border-color);
    height: 70px;
    box-sizing: border-box;
    flex-shrink: 0;
}

.modal-title {
    color: var(--accent-color);
    font-size: 1.5rem;
    font-weight: 700;
    line-height: 70px;
    margin: 0;
    text-shadow: var(--text-shadow);
}

.modal-body {
    padding: 25px;
    display: flex;
    flex-direction: column;
    gap: 20px;
}

.current-song {
    text-align: center;
    font-size: 1.8rem;
    font-weight: 700;
    color: var(--accent-color);
    text-shadow: 0px 1px 2px rgba(0, 0, 0, 0.3),
        0px -1px 2px rgba(255, 255, 255, 0.4);
}

.non-lyrics-content {
    display: flex;
    flex-direction: column;
    gap: 20px;
}

.progress-container {
    width: 100%;
    height: 8px;
    background: color-mix(in oklch, var(--border-color), transparent 60%);
    border-radius: 4px;
    overflow: hidden;
    cursor: pointer;
    position: relative;
    box-shadow: inset 0 1px 3px color-mix(in oklch, black, transparent 80%);
}

.progress {
    width: 100%;
    height: 100%;
    background: color-mix(in oklch, var(--border-color), transparent 40%);
    border-radius: 4px;
    position: relative;
}

.progress-bar {
    height: 100%;
    background: linear-gradient(90deg,
            var(--accent-color),
            color-mix(in oklch, var(--accent-color), white 20%));
    border-radius: 4px;
    transition: width 0.1s ease;
    position: relative;
    box-shadow:
        0 0 10px color-mix(in oklch, var(--accent-color), transparent 50%),
        inset 0 1px 0 color-mix(in oklch, white, transparent 30%);
}

.time-display {
    display: flex;
    justify-content: space-between;
    font-size: 0.9rem;
    color: var(--text-primary);
    font-weight: 500;

}

.controls {
    display: flex;
    justify-content: center;
    gap: 20px;
    margin-top: 15px;
}

.control-btn,
#volumeToggle {
    background: var(--card-bg);
    border: 1px solid var(--border-color);
    color: var(--text-primary);
    width: 48px;
    height: 48px;
    border-radius: 50%;
    cursor: pointer;
    font-size: 1.2rem;
    transition: all 0.3s ease;
}

.control-btn:hover,
#volumeToggle:hover {
    background: var(--item-hover-bg);
    transform: scale(1.1);
}

#playPauseBtn {
    width: 60px;
    height: 60px;
    font-size: 1.5rem;
    background: var(--accent-color);
    color: var(--text-primary);
    box-shadow: 0 4px 20px rgba(var(--accent-color), 0.3);
}

.play-pause-btn:hover {
    background: color-mix(in oklch, var(--accent-color), white 15%);
    box-shadow:
        0 10px 30px color-mix(in oklch, var(--accent-color), transparent 40%),
        0 4px 12px color-mix(in oklch, var(--accent-color), transparent 20%);
}

.volume-btn {
    position: relative;
}

.volume-slider-container {
    position: absolute;
    bottom: 100%;
    left: 50%;
    transform: translateX(-50%);
    background: var(--card-bg);
    border: 1px solid var(--border-color);
    border-radius: 25px;
    padding: 15px 10px;
    margin-bottom: 15px;
    box-shadow:
        0 10px 30px color-mix(in oklch, var(--bg-container), black 50%),
        0 0 0 1px color-mix(in oklch, var(--border-color), transparent 30%);
    backdrop-filter: blur(20px);
    display: none;
    z-index: 10;
}

.volume-slider-container.show {
    display: block;
    animation: slideDown 0.3s ease;
}

@keyframes slideDown {
    from {
        opacity: 0;
        transform: translateX(-50%) translateY(-10px);
    }

    to {
        opacity: 1;
        transform: translateX(-50%) translateY(0);
    }
}

.volume-slider {
    width: 120px;
    height: 6px;
    border-radius: 3px;
    background: var(--border-color);
    outline: none;
    accent-color: var(--accent-color);
    cursor: pointer;
}

.playlist {
    margin-top: 0px;
    max-height: 300px;
    overflow-y: auto;
    padding: 10px;
    border-radius: var(--radius);
    background: var(--card-bg);
    border: 1px solid var(--border-color);
}

.playlist:hover {
    transform: translateY(-1px);
}

.playlist-item {
    padding: 12px 16px;
    border-radius: 10px;
    cursor: pointer;
    transition: all 0.3s ease;
    font-size: 0.95rem;
    color: var(--text-primary);
    margin: 4px 0;
    border: 1px solid transparent;
}

.playlist-item:hover {
    background: var(--item-hover-bg);
    color: #fff;
    border-color: color-mix(in oklch, var(--accent-color), transparent 70%);
    transform: translateX(5px);
    box-shadow: 0 4px 12px color-mix(in oklch, var(--item-hover-bg), transparent 70%);
}

.playlist-item.active {
    background: var(--accent-color);
    color: white;
    font-weight: bold;
}

.lyrics-container::-webkit-scrollbar,
.playlist::-webkit-scrollbar,
#floatingLyrics::-webkit-scrollbar {
    width: 6px;
}

.lyrics-container::-webkit-scrollbar-track,
.playlist::-webkit-scrollbar-track,
#floatingLyrics::-webkit-scrollbar-track {
    background: var(--card-bg);
    border-radius: 3px;
}

.lyrics-container::-webkit-scrollbar-thumb,
.playlist::-webkit-scrollbar-thumb,
#floatingLyrics::-webkit-scrollbar-thumb {
    background: var(--accent-color);
    border-radius: 3px;
    transition: all 0.3s ease;
}

.lyrics-container::-webkit-scrollbar-thumb:hover,
.playlist::-webkit-scrollbar-thumb:hover,
#floatingLyrics::-webkit-scrollbar-thumb:hover {
    background: var(--accent-color);
    opacity: 0.8;
}

.lyrics-container,
.playlist,
#floatingLyrics {
    scrollbar-width: thin;
    scrollbar-color: var(--accent-color) var(--card-bg);
}

.music-modal-footer {
    display: flex;
    justify-content: flex-end;
    align-items: center;
    padding: 10px 25px;
    background: var(--header-bg);
    border-top: 1px solid var(--border-color);
    height: 70px;
    box-sizing: border-box;
    flex-shrink: 0;
    gap: 10px; 
}

.lyrics-toggle-btn,
.cancel-btn {
    background: var(--btn-primary-bg);
    border: 1px solid var(--border-color);
    color: #fff;
    padding: 10px 20px;
    border-radius: 25px;
    cursor: pointer;
    font-size: 0.9rem;
    font-weight: 500;
    transition: all var(--transition-speed) ease;
    display: flex;
    align-items: center;
    gap: 8px;
}

.lyrics-toggle-btn:hover,
.cancel-btn:hover {
    background: var(--btn-primary-hover);
    transform: translateY(-2px);
    box-shadow: 0 4px 12px color-mix(in oklch, var(--btn-primary-bg), transparent 60%);
}

.cancel-btn {
    background: red;
    color: #fff;
}

.cancel-btn:hover {
    background: color-mix(in oklch, var(--btn-danger-bg), transparent 60%);
}

@media (max-width: 768px) {
    .modal-content {
        width: 95%;
        margin: 10px;
    }

    .music-modal-header {
        padding: 15px 20px;
    }

    .modal-body {
        padding: 20px;
    }

    .controls {
        gap: 10px;
    }

    .control-btn {
        width: 45px;
        height: 45px;
        font-size: 1.2rem;
    }

    .play-pause-btn {
        width: 55px;
        height: 55px;
        font-size: 1.4rem;
    }

    .current-song {
        font-size: 1.5rem;
    }
}

.lyrics-mode {
    .non-lyrics-content {
        display: none !important;
    }

    #lyricsContainer {
        height: calc(70vh - 150px) !important;
        position: relative;
        z-index: 1000;
    }

    #currentSong {
        font-size: 1.5rem;
        margin-bottom: 1rem;
    }

    #floatingLyrics {
        display: none;
    }
}

#lyricsToggle .bi {
    transition: transform 0.3s;
}

.lyrics-mode #lyricsToggle .bi {
    transform: rotate(180deg);
}

#floatingLyrics {
    position: fixed;
    top: 1%;
    left: 4.5%;
    background: var(--bg-container);
    padding: 15px 10px;
    border-radius: 20px;
    backdrop-filter: var(--glass-blur);
    display: none;
    opacity: 0;
    pointer-events: none;
    cursor: grab;
    transition: opacity 0.3s ease;
    writing-mode: vertical-rl;
    text-orientation: mixed;
    line-height: 2;
    z-index: 9999;
    flex-direction: column;
    gap: 0.5em;
    width: 230px;
    resize: none;
    overflow: auto;
    user-select: none;
    border: 1px solid var(--border-color, #999);
}

@keyframes float {
    from {
        transform: translateY(0);
    }

    to {
        transform: translateY(-10px);
    }
}

@keyframes breath {

    0%,
    100% {
        --glow-primary: oklch(85% 0.32 var(--glow-base));
        box-shadow: 0 0 10px 2px color-mix(in oklch, var(--glow-primary), transparent 50%),
            inset 0 -10px 20px color-mix(in oklch, var(--glow-primary), transparent 70%);
    }

    50% {
        --glow-primary: oklch(85% 0.45 240deg);
        box-shadow: 0 0 20px 4px color-mix(in oklch, oklch(85% 0.45 240deg), transparent 30%),
            inset 0 -15px 30px color-mix(in oklch, oklch(85% 0.45 240deg), transparent 50%);
    }
}

[data-theme="dark"] #floatingLyrics {
    --glow-base: var(--base-hue);
    --glow-primary: oklch(88% 0.35 var(--glow-base));
    --glow-secondary: oklch(85% 0.3 calc(var(--glow-base) + 15));
    border: 1px solid color-mix(in oklch, var(--glow-primary), transparent 10%);
    box-shadow: 0 0 12px 2px color-mix(in oklch, var(--glow-primary), transparent 40%),
        inset 0 -12px 24px color-mix(in oklch, var(--glow-primary), transparent 60%);
    animation: float 3s ease-in-out infinite alternate,
        breath 4s ease-in-out infinite;
}

[data-theme="dark"] #floatingLyrics:hover {
    animation-play-state: paused;
    --glow-primary: oklch(92% 0.38 var(--glow-base));
    box-shadow: 0 0 20px 4px color-mix(in oklch, var(--glow-primary), transparent 30%),
        inset 0 -15px 30px color-mix(in oklch, var(--glow-primary), transparent 50%);
}

#floatingLyrics.visible {
    display: flex;
    opacity: 1;
    pointer-events: auto;
    cursor: move;
}

#floatingLyrics #floatingCurrentSong.vertical-title {
    font-size: 1.8rem;
    font-weight: 700;
    color: var(--accent-color);
    writing-mode: vertical-rl;
    white-space: nowrap;
    padding-right: 0.5em;
    margin-right: 0.5em;
    text-shadow: 0px 1px 2px rgba(0, 0, 0, 0.3),
        0px -1px 2px rgba(255, 255, 255, 0.4);
}

#floatingLyrics .vertical-lyrics {
    writing-mode: vertical-rl;
    text-combine-upright: all;
}

#floatingLyrics .char {
    font-size: 1.6rem;
    transition: transform 0.3s ease;
    display: inline-block;
    position: relative;
    margin-bottom: 10px;
}

.floating-controls {
    display: flex;
    flex-direction: row;
    gap: 0.8em;
    margin-bottom: 1em;
    order: -1;
}

.ctrl-btn {
    background: var(--bg-body);
    border: 1px solid rgba(255, 255, 255, 0.3);
    border-radius: 50%;
    width: 36px;
    height: 36px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--text-primary);
    transition: all 0.3s ease;
    backdrop-filter: blur(5px);
    margin-right: 5px;
}

.ctrl-btn:hover {
    background: var(--item-hover-bg);
    transform: scale(1.1);
    transform-origin: center center;
}

.ctrl-btn i {
    font-size: 1.6rem;
    display: block;
    vertical-align: middle;
    line-height: 1;
    margin: 0;
    padding: 0;
}

.ctrl-btn.clicked {
    transform: scale(0.9);
    background: rgba(50, 205, 50, 0.5);
}

#currentSong.vertical-title {
    margin-top: 0.5em;
    border-right: none;
    padding-right: 0;
    padding-bottom: 0.8em;
    margin-right: 0;
    writing-mode: horizontal-tb;
}

.vertical-lyrics {
    margin-top: 0.5em;
    overflow-x: hidden;
    max-width: 100%;
    word-break: break-all;
}

.char {
    transition: all 0.3s ease;
    display: inline-block;
    margin-right: 2px;
    color: var(--text-primary);
}

#floatingLyrics .char.active {
    color: var(--accent-color);
    animation: bounce-scale 0.6s ease-out;
    transform: scale(1.3);
    position: relative;
    text-shadow: none !important;
}

@keyframes bounce-scale {
    0% {
        transform: scale(1);
    }

    50% {
        transform: scale(1.3);
    }

    70% {
        transform: scale(1.1);
    }

    100% {
        transform: scale(1);
    }
}

.char.played {

    transform: scale(1) !important;
}

.playlist {
    counter-reset: list-item;
}

.playlist-item::before {
    content: counter(list-item) ".";
    counter-increment: list-item;
    margin-right: 8px;
    opacity: 0.6;
}

.progress-container {
    cursor: pointer;
}

.char.active {
    transform: scale(1.2);
}

.char[data-start]+.char[data-start] {
    margin-left: 12px;
}

.lyrics-loading {
    position: relative;
    min-height: 100px;
}

#no-lyrics {
    text-align: center;
    color: var(--text-primary);
    padding: 2rem;
    font-size: 1.8em;
}

#noLyricsFloating {
    width: min-content;
    max-width: 4em;
    text-align: center;
    color: var(--text-primary) !important;
    line-height: 1.2;
    font-size: 1.5rem;
    padding: 10px 2px;
    letter-spacing: 0.2em;
    writing-mode: vertical-rl;
    text-orientation: upright;
}

@keyframes glow {
    0% {
        opacity: 0.8;
    }

    50% {
        opacity: 1;
    }

    100% {
        opacity: 0.8;
    }
}

.progress-bar {
    height: 100%;
    background: var(--btn-success-bg);
    border-radius: 4px;
    transition: width 0.1s linear;
}

.progress-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 2;
}

#volumePanel {
    position: absolute;
    bottom: 100%;
    left: 50%;
    transform: translateX(-50%);
    margin-bottom: 10px;
    background-color: var(--card-bg);
    border: 1px solid var(--border-color);
    border-radius: 0.5rem;
    padding: 10px;
    width: 160px;
    box-shadow: 0 4px 10px var(--border-color);
    z-index: 1000;
    display: none;
}

#volumeSlider {
    width: 100%;
    accent-color: var(--text-color);
}

#volumeLabel {
    color: var(--text-color);
    font-size: 0.9rem;
    text-align: right;
    margin-top: 5px;
}

.heart {
    position: absolute;
    font-size: 2rem;
    color: #ff69b4;
    pointer-events: none;
    opacity: 0;
    z-index: 9999;
    animation: heartAnimation 1s ease-in-out forwards;
}

@keyframes heartAnimation {
    0% {
        transform: scale(1) translateY(0);
        opacity: 1;
    }

    50% {
        transform: scale(1.5) translateY(-50px);
        opacity: 1;
    }

    100% {
        transform: scale(0) translateY(-100px);
        opacity: 0;
    }
}

.global-modal {
    display: none;
    position: fixed;
    z-index: 100000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0,0,0,0.5);
    opacity: 0;
    transition: opacity 0.3s ease;
}

.global-modal-content {
    background-color: var(--bg-container);
    color: var(--text-primary);
    margin: 10% auto;
    padding: 0;
    border-radius: var(--radius);
    width: 600px;
    max-width: 90%;
    text-align: left;
    position: relative;
    box-shadow: var(--glow-shadow-default);
    border: var(--glow-border);
    display: flex;
    flex-direction: column;
    overflow: hidden;
    opacity: 0;
    transition: opacity 0.3s ease;}

#global-modal-text {
    padding: 20px 25px;
    font-size: 1rem;
    line-height: 1.4;
    flex: 1;
    overflow-y: auto;
}

.global-modal.show {
    opacity: 1;
}

.global-modal.show .global-modal-content {
    opacity: 1;
}
</style>

<div id="controlPanel" class="control-panel">
    <div class="control-panel-header">
        <h6 class="control-panel-title">
            <i class="fas fa-sliders-h"></i>
            <span data-translate="ui_control">UI Control</span>
        </h6>
        <button onclick="closeControlPanel()" class="control-panel-close">
            &times;
        </button>
    </div>

    <div class="control-panel-grid">
        <div class="control-card" onclick="toggleVisibility('.icon-group')">
            <i class="fas fa-icons control-card-icon" style="color: var(--color-green);"></i>
            <div class="control-card-title" data-translate="tool_icons">Tool Icons</div>
            <div id="iconGroupStatus" class="control-card-status"  data-translate="status_show">Show</div>
        </div>

        <div class="control-card" onclick="toggleVisibility('.weather-card')">
            <i class="fas fa-cloud control-card-icon" style="color: var(--color-blue);"></i>
            <div class="control-card-title" data-translate="weather_info">Weather Info</div>
            <div id="weatherStatus" class="control-card-status" data-translate="status_show">Show</div>
        </div>

        <div class="control-card" onclick="toggleVisibility('.ip-container')">
            <i class="fas fa-globe control-card-icon" style="color: var(--color-violet);"></i>
            <div class="control-card-title" data-translate="ip_info">IP Info</div>
            <div id="ipStatus" class="control-card-status" data-translate="status_show">Show</div>
        </div>

        <div class="control-card" onclick="toggleVisibility('#result')">
            <i class="fas fa-star control-card-icon" style="color: var(--color-yellow);"></i>
            <div class="control-card-title" data-translate="site_status">Site Status</div>
            <div id="navbarRightStatus" class="control-card-status" data-translate="status_show">Show</div>
        </div>
    </div>

    <div style="margin-top: 20px; text-align: center;">
        <button onclick="resetAllSettings()" class="reset-button">
            <i class="fas fa-undo-alt"></i>
            <span data-translate="reset_all">Reset All Settings</span>
        </button>
    </div>
</div>

<div id="overlay" class="overlay" onclick="closeControlPanel()"></div>

<script>
document.addEventListener('DOMContentLoaded', () => {
    const currentSong = document.querySelector('#currentSong');
    const floatingCurrentSong = document.getElementById('floatingCurrentSong');
    const logo = document.querySelector('#logo.royal-style');

    let usedColors = [];
    let usedLogBoxColors = [];
    let usedWeatherColors = [];

    function getColorListFromTheme() {
        const styles = getComputedStyle(document.documentElement);
        const lightness = styles.getPropertyValue('--l').trim();
        const chroma = styles.getPropertyValue('--c').trim();

        const colors = [];
        for (let i = 1; i <= 7; i++) {
            const hue = styles.getPropertyValue(`--base-hue-${i}`).trim();
            const color = `oklch(${lightness} ${chroma} ${hue})`;
            colors.push(color);
        }
        return colors;
    }

    function getNextColor(colorList) {
        if (usedColors.length === colorList.length) {
            usedColors = [];
        }
        const remaining = colorList.filter(c => !usedColors.includes(c));
        const next = remaining[Math.floor(Math.random() * remaining.length)];
        usedColors.push(next);
        return next;
    }

    function rotateColors() {
        const colorList = getColorListFromTheme();

        if (currentSong) {
            currentSong.style.color = getNextColor(colorList);
        }
        if (floatingCurrentSong) {
            floatingCurrentSong.style.color = getNextColor(colorList);
        }
        if (logo) {
            logo.style.color = getNextColor(colorList);
        }
    }

    function getLogBoxColorListFromTheme() {
        const styles = getComputedStyle(document.documentElement);
        const lightness = '35%';
        const chroma = styles.getPropertyValue('--c').trim();

        const colors = new Set();
        for (let i = 1; i <= 7; i++) {
            let hue = styles.getPropertyValue(`--base-hue-${i}`).trim();
            if (!hue) continue;
            let color = `oklch(${lightness} ${chroma} ${hue})`;
            colors.add(color);
        }
        return Array.from(colors);
    }

    function getNextLogBoxColor(colorList) {
        if (usedLogBoxColors.length >= colorList.length) {
            usedLogBoxColors = [];
        }
        const remaining = colorList.filter(c => !usedLogBoxColors.includes(c));
        const next = remaining[Math.floor(Math.random() * remaining.length)];
        usedLogBoxColors.push(next);
        return next;
    }

    function getWeatherGradientColors() {
        const styles = getComputedStyle(document.documentElement);
        const colors = [];
        
        for (let i = 1; i <= 7; i++) {
            const hue = styles.getPropertyValue(`--base-hue-${i}`).trim();
            if (!hue) continue;
            
            const mainColor = `oklch(60% 0.2 ${hue})`;
            const darkColor = `oklch(45% 0.2 ${hue})`;
            colors.push([mainColor, darkColor]);
        }
        return colors;
    }

    function getNextWeatherGradient(colorList) {
        if (usedWeatherColors.length >= colorList.length) {
            usedWeatherColors = [];
        }
        const remaining = colorList.filter((c, index) => !usedWeatherColors.includes(index));
        const nextIndex = remaining.length > 0 ? 
            colorList.indexOf(remaining[Math.floor(Math.random() * remaining.length)]) : 
            Math.floor(Math.random() * colorList.length);
        
        usedWeatherColors.push(nextIndex);
        return colorList[nextIndex];
    }

    function rotateLogBoxColors() {
        const colorList = getLogBoxColorListFromTheme();
        if (colorList.length === 0) return;

        document.querySelectorAll('.log-box[data-dynamic-bg="true"]').forEach(box => {
            const color = getNextLogBoxColor(colorList);
            box.style.background = color;
        });
    }

    function rotateWeatherBoxColors() {
        const gradientColors = getWeatherGradientColors();
        if (gradientColors.length === 0) return;

        document.querySelectorAll('.weather-log-box.info').forEach(box => {
            const [color1, color2] = getNextWeatherGradient(gradientColors);
            box.style.background = `linear-gradient(145deg, ${color1}, ${color2})`;
        });
    }

    rotateColors();
    rotateLogBoxColors();
    rotateWeatherBoxColors();
    
    setInterval(rotateColors, 4000);
    setInterval(rotateLogBoxColors, 4000);
    setInterval(rotateWeatherBoxColors, 2000);
});
</script>

<div id="global-modal" class="global-modal">
    <div class="global-modal-content">
        <div class="music-modal-header">
            <h3 style="margin:0; font-size:20px; color:var(--accent-color);"><i class="bi bi-lightning-charge-fill"></i> <span data-translate="modal_title">Confirm Modal</span></h3>
            <span class="close-btn">&times;</span>
        </div>
        <p id="global-modal-text"></p>
        <div class="music-modal-footer">
            <button class="cbi-button cbi-button-save" id="global-modal-confirm-btn" data-translate="modal_confirm">Confirm</button>
            <button class="cbi-button cbi-button-remove" id="global-modal-cancel-btn" data-translate="cancel">Cancel</button>
        </div>
    </div>
</div>

<script>
function showGlobalModal(options = {}) {
    const modal = document.getElementById('global-modal');
    const modalText = document.getElementById('global-modal-text');
    const confirmBtn = document.getElementById('global-modal-confirm-btn');
    const cancelBtn = document.getElementById('global-modal-cancel-btn');
    const closeBtn = modal.querySelector('.close-btn');

    modalText.innerHTML = (options.iconHTML || '') + (options.defaultText || '');
    confirmBtn.style.display = options.showConfirm === false ? 'none' : 'inline-block';

    modal.style.display = 'block';
    setTimeout(() => modal.classList.add('show'), 10);

    const hideModal = () => {
        modal.classList.remove('show');
        setTimeout(() => modal.style.display = 'none', 300);
    };

    confirmBtn.onclick = () => { hideModal(); options.onConfirm && options.onConfirm(); };
    cancelBtn.onclick = () => { hideModal(); options.onCancel && options.onCancel(); };
    closeBtn.onclick = () => { hideModal(); options.onCancel && options.onCancel(); };

    if (typeof updateUIText === 'function') updateUIText();
}
</script>

<script>
function clearCache() {
    const translations = languageTranslations[currentLang] || languageTranslations['zh'];
    const confirmText = translations.cache_clear_confirm || 'Are you sure you want to clear the cache?';

    speakMessage(confirmText);

    showGlobalModal({
        iconHTML: '<i class="fa-solid fa-broom" style="margin-right:5px;"></i>',
        defaultText: confirmText,
        onConfirm: () => {
            localStorage.clear();
            sessionStorage.clear();
            sessionStorage.setItem('cacheCleared', 'true');
            location.reload(true);
        }
    });
}

window.addEventListener('load', function() {
    const translations = languageTranslations[currentLang] || languageTranslations['zh'];  
    if (sessionStorage.getItem('cacheCleared') === 'true') {
        const message = translations['cache_clear_done'] || 'Cache cleared';
        showLogMessage(message);
        speakMessage(message);
        sessionStorage.removeItem('cacheCleared');
    }
});
</script>

<script>
const STORAGE_PREFIX = 'musicPlayer_';
let translations = languageTranslations[currentLang] || languageTranslations['en'];
const audioPlayer = new Audio();
let songs = JSON.parse(localStorage.getItem(`${STORAGE_PREFIX}cachedPlaylist`) || '[]');
let currentTrackIndex = 0;
let isPlaying = false;
let repeatMode = 0;
let isHovering = false;
let isManualScroll = false;
let isSmallScreen = window.innerWidth < 768;
let currentPlaylistUrl = 'https://raw.githubusercontent.com/Thaolga/Rules/main/music/songs.txt';

function throttle(func, limit) {
    let lastFunc;
    let lastRan;
    return function(...args) {
        const context = this;
        if (!lastRan) {
            func.apply(context, args);
            lastRan = Date.now();
        } else {
            clearTimeout(lastFunc);
            lastFunc = setTimeout(function() {
                if (Date.now() - lastRan >= limit) {
                    func.apply(context, args);
                    lastRan = Date.now();
                }
            }, limit - (Date.now() - lastRan));
        }
    };
}

function saveCurrentTime(currentTrack, currentTime) {
    const playbackData = {
        currentTrack: currentTrack,
        currentTime: currentTime
    };
    localStorage.setItem(`${STORAGE_PREFIX}currentPlayback`, JSON.stringify(playbackData));
}

function loadCurrentTime(currentTrack) {
    const playbackData = JSON.parse(localStorage.getItem(`${STORAGE_PREFIX}currentPlayback`) || '{}');
    return playbackData.currentTrack === currentTrack ? playbackData.currentTime || 0 : 0;
}

document.addEventListener('DOMContentLoaded', () => {
    loadPlayerState();
    loadPlaylistUrl();
    initializePlayer();
    audioPlayer.addEventListener('timeupdate', throttle(() => {
        if (songs[currentTrackIndex]) {
            saveCurrentTime(songs[currentTrackIndex], audioPlayer.currentTime);
        }
    }, 1000));
});

function loadPlaylistUrl() {
    fetch('/luci-static/spectra/bgm/playlist_config.php', {
        method: 'GET',
        headers: {
            'Content-Type': 'application/json'
        }
    })
        .then(response => response.json())
        .then(data => {
            currentPlaylistUrl = data.url || 'https://raw.githubusercontent.com/Thaolga/Rules/main/music/songs.txt';
            loadDefaultPlaylist();
        })
        .catch(error => {
            console.error('Failed to load playlist URL from PHP:', error);
            currentPlaylistUrl = 'https://raw.githubusercontent.com/Thaolga/Rules/main/music/songs.txt';
            loadDefaultPlaylist();
        });
}

function openUrlModal() {
    const modal = document.getElementById('urlModal');
    modal.style.display = 'block';
    fetch('/luci-static/spectra/bgm/playlist_config.php', {
        method: 'GET',
        headers: {
            'Content-Type': 'application/json'
        }
    })
        .then(response => response.json())
        .then(data => {
            document.getElementById('playlistUrl').value = data.url || '';
        })
        .catch(error => {
            console.error('Failed to load current URL for modal:', error);
            document.getElementById('playlistUrl').value = currentPlaylistUrl;
        });
    if (typeof updateUIText === 'function') {
        updateUIText();
    }
}

function closeUrlModal() {
    const modal = document.getElementById('urlModal');
    modal.style.display = 'none';
}

function savePlaylistUrl() {
    const translations = languageTranslations[currentLang] || languageTranslations['zh'];  
    const urlInput = document.getElementById('playlistUrl');
    const newUrl = urlInput.value.trim();
    if (newUrl) {
        fetch('/luci-static/spectra/bgm/playlist_config.php', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ url: newUrl })
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    currentPlaylistUrl = newUrl;
                    loadDefaultPlaylist();
                    showLogMessage(translations['playlist_url_saved'] || 'Playlist URL saved successfully');
                    speakMessage(translations['playlist_url_saved'] || 'Playlist URL saved successfully');
                } else {
                    showLogMessage(translations['save_fail'] || data.message || 'Failed to save playlist URL', 'error');
                    speakMessage(translations['save_fail'] || data.message || 'Failed to save playlist URL');
                }
            })
            .catch(error => {
                console.error('Failed to save playlist URL:', error);
                showLogMessage(translations['save_fail'] || 'Failed to save playlist URL', 'error');
                speakMessage(translations['save_fail'] || 'Failed to save playlist URL');
            });
    } else {
        showLogMessage(translations['invalid_url'] || 'Please enter a valid URL', 'error');
        speakMessage(translations['invalid_url'] || 'Please enter a valid URL');
    }
    closeUrlModal();
}

function resetToDefault() {
    const translations = languageTranslations[currentLang] || languageTranslations['zh'];  
    const defaultUrl = 'https://raw.githubusercontent.com/Thaolga/Rules/main/music/songs.txt';
    fetch('/luci-static/spectra/bgm/playlist_config.php', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ url: defaultUrl })
    })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                currentPlaylistUrl = defaultUrl;
                document.getElementById('playlistUrl').value = defaultUrl;
                loadDefaultPlaylist();
                showLogMessage(translations['reset_to_default'] || 'Reset to default playlist');
                speakMessage(translations['reset_to_default'] || 'Reset to default playlist');
            } else {
                showLogMessage(translations['reset_failed'] || data.message || 'Failed to reset to default playlist', 'error');
                speakMessage(translations['reset_failed'] || data.message || 'Failed to reset to default playlist');
            }
        })
        .catch(error => {
            console.error('Failed to reset playlist URL:', error);
            showLogMessage(translations['reset_failed'] || 'Failed to reset to default playlist', 'error');
            speakMessage(translations['reset_failed'] || 'Failed to reset to default playlist');
        });
    closeUrlModal();
}

function openMusicModal() {
    const modal = document.getElementById('musicModal');
    modal.style.display = 'block';
    updatePlayButton();
    updatePlaylistUI();
}

function closeMusicModal() {
    const modal = document.getElementById('musicModal');
    modal.style.display = 'none';
}

function updatePlayerTranslations() {
    if (typeof updateUIText === 'function') {
        updateUIText();
    }
}

function togglePlay() {
    const translations = languageTranslations[currentLang] || languageTranslations['zh'];    
    if (isPlaying) {
        audioPlayer.pause();
        const pauseMessage = translations['pause_playing'] || 'Pause_Playing';
        showLogMessage(pauseMessage);
        speakMessage(pauseMessage);
    } else {
        audioPlayer.play();
        const playMessage = translations['start_playing'] || 'Start_Playing';
        showLogMessage(playMessage);
        speakMessage(playMessage);
    }
    isPlaying = !isPlaying;
    updatePlayButton();
    savePlayerState();

    const btn = event.target.closest('button');
    if (btn) {
        btn.classList.add('clicked');
        setTimeout(() => btn.classList.remove('clicked'), 200);
    }
}

function updatePlayButton() {
    const btn = document.getElementById('playPauseBtn');
    const floatingBtn = document.getElementById('floatingPlayBtn');
    const icon = isPlaying ? 'bi-pause-fill' : 'bi-play-fill';
    if (btn) btn.innerHTML = `<i class="bi ${icon}"></i>`;
    if (floatingBtn) floatingBtn.innerHTML = `<i class="bi ${icon}"></i>`;
}

function changeTrack(direction, isManual = false) {
    const translations = languageTranslations[currentLang] || languageTranslations['zh'];    
    const oldSong = songs[currentTrackIndex];
    if (repeatMode === 2 && !isManual) { 
        currentTrackIndex = Math.floor(Math.random() * songs.length);
    } else {
        currentTrackIndex = (currentTrackIndex + direction + songs.length) % songs.length;
    }

    const songName = decodeURIComponent(
        songs[currentTrackIndex].split('/').pop().replace(/\.\w+$/, '')
    );

    if (isManual) {
        const action = direction === -1
            ? translations['previous_track'] || 'Previous Track'
            : translations['next_track'] || 'Next Track';
        showLogMessage(`${translations['manual_switch'] || 'Manual Switch'}${action}：${songName}`);
        speakMessage(`${translations['switch_to'] || 'Switch to'}${action}：${songName}`);
    } else {
        showLogMessage(`${translations['auto_switch'] || 'Auto Switch to'}：${songName}`);
        speakMessage(`${translations['auto_play'] || 'Auto Play'}：${songName}`);
    }

    loadTrack(songs[currentTrackIndex]);
}

function toggleRepeat() {
    const translations = languageTranslations[currentLang] || languageTranslations['zh'];    
    repeatMode = (repeatMode + 1) % 3;
    const mainBtn = document.getElementById('repeatBtn');
    const floatingBtn = document.getElementById('floatingRepeatBtn');

    [mainBtn, floatingBtn].forEach(btn => {
        if (btn) {
            btn.classList.remove('btn-success', 'btn-warning');
            btn.title = [
                translations['order_play'] || 'Order_Play',
                translations['single_loop'] || 'Single_Loop',
                translations['shuffle_play'] || 'Shuffle_Play'
            ][repeatMode];

            switch (repeatMode) {
                case 0:
                    btn.innerHTML = '<i class="bi bi-arrow-repeat"></i>';
                    break;
                case 1:
                    btn.innerHTML = '<i class="bi bi-repeat-1"></i>';
                    btn.classList.add('btn-success');
                    break;
                case 2:
                    btn.innerHTML = '<i class="bi bi-shuffle"></i>';
                    btn.classList.add('btn-warning');
                    break;
            }
        }
    });

    showLogMessage([
        translations['order_play'] || 'Order_Play',
        translations['single_loop'] || 'Single_Loop',
        translations['shuffle_play'] || 'Shuffle_Play'
    ][repeatMode]);
    speakMessage([
        translations['order_play'] || 'Order_Play',
        translations['single_loop'] || 'Single_Loop',
        translations['shuffle_play'] || 'Shuffle_Play'
    ][repeatMode]);
    savePlayerState();
}

function updatePlaylistUI() {
    const playlist = document.getElementById('playlist');
    if (playlist) {
        playlist.innerHTML = songs.map((url, index) => `
            <div class="playlist-item ${index === currentTrackIndex ? 'active' : ''} ${!isPlaying && index === currentTrackIndex ? 'paused' : ''}" 
                 onclick="playTrack(${index})">
                ${decodeURIComponent(url.split('/').pop().replace(/\.\w+$/, ''))}
            </div>
        `).join('');
        setTimeout(() => scrollToCurrentTrack(), 100);
    }
}

function updatePlaylist() {
    const translations = languageTranslations[currentLang] || languageTranslations['zh'];  
    const btn = document.getElementById('updatePlaylistBtn');
    if (btn) {
        const originalHTML = btn.innerHTML;
        btn.innerHTML = '<i class="bi bi-arrow-repeat spinning"></i>';
        
        fetch(currentPlaylistUrl)
            .then(response => response.text())
            .then(data => {
                const newSongs = data.split('\n').filter(url => url.trim());
                songs = newSongs;
                localStorage.setItem(`${STORAGE_PREFIX}cachedPlaylist`, JSON.stringify(songs));
                if (currentTrackIndex >= songs.length) {
                    currentTrackIndex = 0;
                    savePlayerState();
                }
                updatePlaylistUI();
                if (songs.length > 0 && songs[currentTrackIndex]) {
                    loadTrack(songs[currentTrackIndex]);
                }
                btn.innerHTML = originalHTML;
                const successMsg = translations['playlist_updated'] || 'Playlist updated successfully';
                const songCountMsg = translations['song_count']?.replace('{count}', songs.length) || `Total ${songs.length} songs`;
                showLogMessage(`${successMsg}，${songCountMsg}`);
                speakMessage(`${successMsg}，${songCountMsg}`);
            })
            .catch(error => {
                console.error('Playlist update failed:', error);
                btn.innerHTML = '<i class="bi bi-x-circle"></i>';
                setTimeout(() => btn.innerHTML = originalHTML, 1000);
                const errorMsg = translations['update_failed'] || 'Playlist update failed';
                showLogMessage(errorMsg, 'error');
                speakMessage(errorMsg);
            });
    }
}

function playTrack(index) {
    const translations = languageTranslations[currentLang] || languageTranslations['zh'];    
    const songName = decodeURIComponent(songs[index].split('/').pop().replace(/\.\w+$/, ''));
    const message = `${translations['playlist_click'] || 'Playlist Click'}：${translations['index'] || 'Index'}：${index + 1}，${translations['song_name'] || 'Song Name'}：${songName}`;
    audioPlayer.pause();
    currentTrackIndex = index;
    loadTrack(songs[index]);
    isPlaying = true;
    audioPlayer.play().catch((error) => {
        isPlaying = false;
    });
    updatePlayButton();
    savePlayerState();
    showLogMessage(message);
    speakMessage(message);
    event.target.classList.add('clicked');
    setTimeout(() => event.target.classList.remove('clicked'), 200);
}

function scrollToCurrentTrack() {
    const playlist = document.getElementById('playlist');
    const activeItem = playlist.querySelector('.playlist-item.active');
    if (activeItem) {
        activeItem.scrollIntoView({ behavior: 'smooth', block: 'center' });
    }
}

function loadLyrics(songUrl) {
    const lyricsUrl = songUrl.replace(/\.\w+$/, '.lrc');
    const translations = languageTranslations[currentLang] || languageTranslations['zh'];
    window.lyrics = {};
    window.lyricTimes = [];
    
    const containers = [
        document.getElementById('lyricsContainer'),
        document.querySelector('#floatingLyrics .vertical-lyrics')
    ];
    
    containers.forEach(container => {
        if (container) {
            const message = translations['loading_lyrics'] || 'Loading Lyrics...';
            const verticalText = message.split('').map(char => `<span class="char">${char}</span>`).join('');
            const statusMsg = container.id === 'lyricsContainer' 
                ? `<div id="no-lyrics">${message}</div>`
                : `<div id="noLyricsFloating" class="vertical-message">${verticalText}</div>`;
            container.innerHTML = statusMsg;
        }
    });

    fetch(lyricsUrl)
        .then(response => {
            if (!response.ok) {
                if (response.status === 404) {
                    throw new Error('LYRICS_NOT_FOUND');
                } else {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
            }
            return response.arrayBuffer();
        })
        .then(buffer => {
            const decoder = new TextDecoder('utf-8');
            parseLyrics(decoder.decode(buffer));
            displayLyrics();
            document.dispatchEvent(new Event('lyricsLoaded'));
        })
        .catch(error => {
            containers.forEach(container => {
                if (container) {
                    if (error.message === 'LYRICS_NOT_FOUND') {
                        if (container.id === 'lyricsContainer') {
                            container.innerHTML = `<div id="no-lyrics">${translations['no_lyrics'] || 'No Lyrics Available'}</div>`;
                        } else {
                            const message = translations['no_lyrics'] || 'No Lyrics Available';
                            const verticalText = message.split('').map(char => `<span class="char">${char}</span>`).join('');
                            container.innerHTML = `<div id="noLyricsFloating" class="vertical-text">${verticalText}</div>`;
                        }
                    } else {
                        console.error(`${translations['lyrics_load_failed'] || 'Lyrics Load Failed'}:`, error);
                        if (container.id === 'lyricsContainer') {
                            container.innerHTML = `<div id="no-lyrics">${translations['lyrics_load_failed'] || 'Failed to load lyrics'}</div>`;
                        } else {
                            const message = translations['lyrics_load_failed'] || 'Failed to load lyrics';
                            const verticalText = message.split('').map(char => `<span class="char">${char}</span>`).join('');
                            container.innerHTML = `<div id="noLyricsFloating" class="vertical-message">${verticalText}</div>`;
                        }
                    }
                }
            });
        });
}

function parseLyrics(text) {
    window.lyrics = {};
    window.lyricTimes = [];
    const regex = /\[(\d{1,2}):(\d{1,2})(?:\.(\d{1,3}))?\](.*)/g;
    let match;
    while ((match = regex.exec(text)) !== null) {
        const time = parseInt(match[1]) * 60 + parseInt(match[2]) + parseInt(match[3])/1000;
        const content = match[4].replace(/\[\d+:\d+\.\d+\]/g, '').trim();
        lyrics[time] = content;
        lyricTimes.push(time);
    }
    lyricTimes.sort((a, b) => a - b);
}

function isEnglishWord(text) {
    return /^[a-zA-Z']+$/.test(text);
}

function createCharSpans(text, startTime, endTime) {
    const elements = [];
    const words = text.split(/(\s+)/); 
    let currentTime = startTime;
    const totalDuration = endTime - startTime;
    const validWords = words.filter(word => word.trim().length > 0);
    const durationPerWord = totalDuration / validWords.length;

    words.forEach(word => {
        if (word.trim().length === 0) return;
        const isEnglish = isEnglishWord(word.replace(/[^a-zA-Z']/g, ''));
        const span = document.createElement('span');
        span.className = 'char';
        if (isEnglish) {
            span.textContent = word;
            span.dataset.start = currentTime;
            span.dataset.end = currentTime + durationPerWord;
            currentTime += durationPerWord;
        } else {
            const chars = word.split('');
            const charDuration = durationPerWord / chars.length;
            chars.forEach((char, index) => {
                const charSpan = document.createElement('span');
                charSpan.className = 'char';
                charSpan.textContent = char;
                charSpan.dataset.start = currentTime + index * charDuration;
                charSpan.dataset.end = currentTime + (index + 1) * charDuration;
                elements.push(charSpan);
            });
            currentTime += durationPerWord;
            return;
        }
        elements.push(span);
    });
    return elements;
}

function displayLyrics() {
    const translations = languageTranslations[currentLang] || languageTranslations['zh'];    
    const lyricsContainer = document.getElementById('lyricsContainer');
    const floatingLyrics = document.querySelector('#floatingLyrics .vertical-lyrics');
    if (lyricsContainer) lyricsContainer.innerHTML = '';
    if (floatingLyrics) floatingLyrics.innerHTML = '';

    if (Object.keys(window.lyrics).length === 0) {
        const message = translations['no_lyrics'] || 'No Lyrics Available';
        const verticalText = message.split('').map(char => `<span class="char">${char}</span>`).join('');
        if (lyricsContainer) lyricsContainer.innerHTML = `<div id="no-lyrics">${message}</div>`;
        if (floatingLyrics) floatingLyrics.innerHTML = `<div id="noLyricsFloating" class="vertical-message">${verticalText}</div>`;
        return;
    }

    lyricTimes.forEach((time, index) => {
        const line = document.createElement('div');
        line.className = 'lyric-line';
        line.dataset.time = time;
        const endTime = index < lyricTimes.length - 1 ? lyricTimes[index + 1] : time + 3; 
        const elements = createCharSpans(lyrics[time], time, endTime);
        elements.forEach(element => line.appendChild(element));
        if (lyricsContainer) lyricsContainer.appendChild(line);
    });

    audioPlayer.addEventListener('timeupdate', syncLyrics);
}

function syncLyrics() {
    const currentTime = audioPlayer.currentTime;
    const lyricsContainer = document.getElementById('lyricsContainer');
    if (!lyricsContainer) return;
    const lines = lyricsContainer.querySelectorAll('.lyric-line');
    let currentLine = null;
    let hasActiveLine = false;

    lines.forEach(line => {
        line.classList.remove('highlight', 'played');
        line.style.color = 'white'; 
    });

    for (let i = lines.length - 1; i >= 0; i--) {
        const line = lines[i];
        const lineTime = parseFloat(line.dataset.time);
        if (currentTime >= lineTime) {
            line.classList.add('highlight');
            currentLine = line;
            hasActiveLine = true;
            break;
        }
    }

    if (currentLine) {
        const chars = currentLine.querySelectorAll('.char');
        chars.forEach(char => {
            const start = parseFloat(char.dataset.start);
            const end = parseFloat(char.dataset.end);
            if (currentTime >= start && currentTime <= end) {
                char.classList.add('active');
            } else if (currentTime > end && !char.classList.contains('played')) {
                char.classList.add('played');
                spawnHeartAbove(char); 
            }
        });

        const floatingContainer = document.getElementById('floatingLyrics');
        if (floatingContainer) {
            const floatingLyrics = floatingContainer.querySelector('.vertical-lyrics');
            if (!floatingLyrics.innerHTML || currentLine.dataset.time !== floatingLyrics.dataset.time) {
                floatingLyrics.innerHTML = currentLine.innerHTML;
                floatingLyrics.dataset.time = currentLine.dataset.time;
                floatingLyrics.classList.add('enter-active');
                setTimeout(() => floatingLyrics.classList.remove('enter-active'), 500);
            }

            const floatingChars = floatingLyrics.querySelectorAll('.char');
            chars.forEach((char, index) => {
                const floatingChar = floatingChars[index];
                if (!floatingChar) return;
                const start = parseFloat(char.dataset.start);
                const end = parseFloat(char.dataset.end);
                if (currentTime >= start && currentTime <= end) {
                    floatingChar.classList.add('active');
                    const progress = (currentTime - start) / (end - start);
                    floatingChar.style.transform = `scale(${1 + progress * 0.2})`;
                } else {
                    floatingChar.classList.remove('active');
                    floatingChar.style.transform = '';
                }
            });
        }

        if (!isSmallScreen && !isHovering && !isManualScroll) {
            const lineRect = currentLine.getBoundingClientRect();
            const containerRect = lyricsContainer.getBoundingClientRect();
            const targetPosition = lineRect.top - containerRect.top + lyricsContainer.scrollTop - (lyricsContainer.clientHeight / 2) + (lineRect.height / 2);
            const buffer = 50;
            if (lineRect.top < containerRect.top + buffer || 
                lineRect.bottom > containerRect.bottom - buffer) {
                lyricsContainer.scrollTo({ top: targetPosition, behavior: 'smooth' });
            }
        }

        if (!hasActiveLine && lyricsContainer.scrollTop !== 0) {
            lyricsContainer.scrollTo({ top: 0, behavior: 'smooth' });
        }
    }
}

function spawnHeartAbove(char) {
    const heart = document.createElement('span');
    heart.className = 'heart';
    heart.textContent = '💖';
    const rect = char.getBoundingClientRect();
    const offsetTop = rect.top + window.scrollY;
    const offsetLeft = rect.left + window.scrollX;
    heart.style.left = `${offsetLeft + char.offsetWidth / 2}px`;
    heart.style.top = `${offsetTop - 30}px`; 
    document.body.appendChild(heart);
    requestAnimationFrame(() => {
        heart.classList.add('pop');
    });
    setTimeout(() => {
        heart.remove(); 
    }, 1000);
}

function loadTrack(url) {
    const translations = languageTranslations[currentLang] || languageTranslations['zh'];  
    window.lyrics = {};
    window.lyricTimes = [];
    const lyricsContainers = [
        document.getElementById('lyricsContainer'),
        document.querySelector('#floatingLyrics .vertical-lyrics')
    ];
    lyricsContainers.forEach(container => {
        if (container) {
            container.innerHTML = `<div class="no-lyrics">${translations['loading_lyrics'] || 'Loading Lyrics...'}</div>`;
        }
    });
    audioPlayer.pause();
    audioPlayer.src = url;
    audioPlayer.load();
    audioPlayer.addEventListener('canplaythrough', () => {
        audioPlayer.currentTime = loadCurrentTime(url);
        audioPlayer.play().catch((error) => {
            console.log(`${translations['autoplay_blocked'] || 'Autoplay Blocked'}:`, error);
            showLogMessage(translations['click_to_play'] || 'Click play button to start');
        });
        isPlaying = true;
        updatePlayButton();
    }, { once: true });
    updatePlayButton(); 
    updatePlaylistUI();
    loadLyrics(url);
    updateCurrentSong(url);
    updateTimeDisplay();
    savePlayerState();
}

function initializePlayer() {
    const translations = languageTranslations[currentLang] || languageTranslations['zh'];    
    if (songs.length > 0 && songs[currentTrackIndex]) {
        audioPlayer.src = songs[currentTrackIndex];
        audioPlayer.currentTime = loadCurrentTime(songs[currentTrackIndex]);
        audioPlayer.addEventListener('loadedmetadata', () => {
            loadLyrics(songs[currentTrackIndex]); 
            updateCurrentSong(songs[currentTrackIndex]);
        });
        updatePlayButton();
        setRepeatButtonState();
        updateTimeDisplay();
        if (isPlaying) {
            audioPlayer.play().catch((error) => {
                console.log(`${translations['autoplay_blocked'] || 'Autoplay Blocked'}:`, error);
                isPlaying = false;
                savePlayerState();
                updatePlayButton();
            });
        }
    }
}

function updateCurrentSong(url) {
    const songName = decodeURIComponent(url.split('/').pop().replace(/\.\w+$/, ''));
    const currentSongElement = document.getElementById('currentSong');
    if (currentSongElement) currentSongElement.textContent = songName;
    const floatingTitle = document.querySelector('#floatingLyrics #floatingCurrentSong');
    if (floatingTitle) floatingTitle.textContent = songName;
    const modalTitle = document.querySelector('#musicModal #currentSong');
    if (modalTitle) modalTitle.textContent = songName;
}

function updateTimeDisplay() {
    const currentTimeElement = document.getElementById('currentTime');
    const durationElement = document.getElementById('duration');
    const progressBar = document.getElementById('progressBar');

    if (currentTimeElement && durationElement && progressBar) {
        audioPlayer.addEventListener('timeupdate', () => {
            const currentTime = audioPlayer.currentTime;
            const duration = audioPlayer.duration || 0;
            const progress = (currentTime / duration) * 100 || 0;
            currentTimeElement.textContent = formatTime(currentTime);
            durationElement.textContent = formatTime(duration);
            progressBar.style.width = `${progress}%`;
            progressBar.setAttribute('aria-valuenow', progress);
        });

        progressBar.parentElement.addEventListener('click', (e) => {
            const rect = progressBar.parentElement.getBoundingClientRect();
            const x = e.clientX - rect.left;
            const clickedPercent = (x / rect.width) * 100;
            const newTime = (clickedPercent / 100) * audioPlayer.duration;
            audioPlayer.currentTime = newTime;
        });
    }
}

function formatTime(seconds) {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = Math.floor(seconds % 60);
    return `${minutes}:${remainingSeconds < 10 ? '0' : ''}${remainingSeconds}`;
}

audioPlayer.addEventListener('ended', () => {
    if (repeatMode === 1) {
        audioPlayer.play();
    } else {
        changeTrack(1); 
    }
});

function savePlayerState() {
    localStorage.setItem(`${STORAGE_PREFIX}playerState`, JSON.stringify({
        isPlaying: isPlaying,
        repeatMode: repeatMode,
        currentTrackIndex: currentTrackIndex,
        currentTrack: songs[currentTrackIndex] || ''
    }));
}

function loadPlayerState() {
    const savedState = localStorage.getItem(`${STORAGE_PREFIX}playerState`);
    if (savedState) {
        const state = JSON.parse(savedState);
        isPlaying = state.isPlaying || false;
        repeatMode = state.repeatMode || 0;
        currentTrackIndex = state.currentTrackIndex || 0;
        if (songs.length > 0 && currentTrackIndex >= songs.length) {
            currentTrackIndex = 0;
        }
        setRepeatButtonState();
    }
}

function setRepeatButtonState() {
    const mainBtn = document.getElementById('repeatBtn');
    const floatingBtn = document.getElementById('floatingRepeatBtn');
    const translations = languageTranslations[currentLang] || languageTranslations['zh'];    
    [mainBtn, floatingBtn].forEach(btn => {
        if (btn) {
            btn.classList.remove('btn-success', 'btn-warning');
            btn.title = [
                translations['order_play'] || 'Order_Play',
                translations['single_loop'] || 'Single_Loop',
                translations['shuffle_play'] || 'Shuffle_Play'
            ][repeatMode];
            switch (repeatMode) {
                case 1:
                    btn.classList.add('btn-success'); 
                    btn.innerHTML = '<i class="bi bi-repeat-1"></i>';
                    break;
                case 2:
                    btn.classList.add('btn-warning'); 
                    btn.innerHTML = '<i class="bi bi-shuffle"></i>';
                    break;
                default:
                    btn.innerHTML = '<i class="bi bi-arrow-repeat"></i>';
            }
        }
    });
}

function loadDefaultPlaylist() {
    fetch(currentPlaylistUrl)
        .then(response => response.text())
        .then(data => {
            const newSongs = data.split('\n').filter(url => url.trim());
            if (JSON.stringify(songs) !== JSON.stringify(newSongs)) {
                songs = [...new Set([...newSongs])];
                localStorage.setItem(`${STORAGE_PREFIX}cachedPlaylist`, JSON.stringify(songs));
            }
            if (currentTrackIndex >= songs.length) {
                currentTrackIndex = 0;
                savePlayerState();
            }
            updatePlaylistUI();
            initializePlayer();
            if (songs[currentTrackIndex]) {
                loadLyrics(songs[currentTrackIndex]);
                updateCurrentSong(songs[currentTrackIndex]);
            }
        })
        .catch(error => console.error('Playlist loading failed:', error));
}

window.addEventListener('resize', () => {
    isSmallScreen = window.innerWidth < 768;
});

document.addEventListener('DOMContentLoaded', () => {
    const lyricsContainer = document.getElementById('lyricsContainer');
    if (lyricsContainer) {
        lyricsContainer.addEventListener('mouseenter', () => {
            isHovering = true;
        });
        lyricsContainer.addEventListener('mouseleave', () => {
            isHovering = false;
            isManualScroll = false;
        });
        lyricsContainer.addEventListener('scroll', () => {
            if (isHovering) {
                isManualScroll = true;
                setTimeout(() => {
                    isManualScroll = false;
                }, 3000); 
            }
        });
    }
});
</script>

<div id="urlModal" 
     style="display:none; 
            position:fixed; 
            top:50%; 
            left:50%; 
            transform:translate(-50%, -50%); 
            width:550px; 
            padding:20px; 
            border-radius:12px; 
            background: var(--bg-container);
            color: var(--text-primary);
            box-shadow:0 4px 15px rgba(0,0,0,0.4); 
            z-index:10009;">
  <h3 style="margin-bottom:15px; font-size:20px; color:var(--accent-color);" data-translate="custom_playlist">Custom Playlist</h3>
  <input id="playlistUrl" placeholder="URL" 
         style="padding:8px; width:100%; border-radius:6px; border:1px solid #ccc; margin-bottom:15px;">
  
  <div style="text-align:right;">
    <button onclick="resetToDefault()" class="cbi-button cbi-button-remove" data-translate="reset_default">Reset to Default</button>
    <button onclick="savePlaylistUrl()" class="cbi-button cbi-button-save" data-translate="save">Save</button>
    <button onclick="closeUrlModal()" class="btn cbi-button-neutral" data-translate="cancel">Cancel</button>
  </div>
</div>

<script>
document.addEventListener('keydown', function (event) {
    const target = event.target;
    const isTyping = target.tagName === 'INPUT' || target.tagName === 'TEXTAREA' || target.isContentEditable;

    if (isTyping) return;

    switch (event.code) {
        case 'Space':
            event.preventDefault();
            togglePlay();
            break;
        case 'ArrowLeft':
            event.preventDefault();
            changeTrack(-1, true);
            break;
        case 'ArrowRight':
            event.preventDefault();
            changeTrack(1, true);
            break;
        case 'ArrowUp':
            event.preventDefault();
            document.querySelector('.toggleFloatingLyricsBtn')?.click();
            break;
        case 'Insert':
            document.getElementById('repeatBtn')?.click();
            break;
        case 'Home':
            event.preventDefault();
            openMusicModal();
            break;
        case 'Escape':
            event.preventDefault();
            closeMusicModal();
            break;
    }
});

document.getElementById('goFirstBtn')?.addEventListener('click', function() {
    const translations = languageTranslations[currentLang] || languageTranslations['zh'];  
    if (currentTrackIndex !== 0) {
        currentTrackIndex = 0;
        loadTrack(songs[0]);
    }
    const message = translations['back_to_first'] || 'Returned to the first song in the playlist';
    showLogMessage(message);
    speakMessage(message);
});
</script>

<script>
(function() {
  const LYRICS_STORAGE_PREFIX = 'musicPlayer_';

  const toggleBtns = document.querySelectorAll('.toggleFloatingLyricsBtn');
  const box = document.getElementById('floatingLyrics');

  const savedState = localStorage.getItem(`${LYRICS_STORAGE_PREFIX}floatingLyricsVisible`) === 'true';
  const savedLeft = localStorage.getItem(`${LYRICS_STORAGE_PREFIX}floatingLyricsLeft`);
  const savedTop = localStorage.getItem(`${LYRICS_STORAGE_PREFIX}floatingLyricsTop`);

  box.classList.toggle('visible', savedState);
  box.style.resize = 'none';
  box.style.overflow = 'auto';
  box.style.position = 'absolute';

  if (savedLeft && savedTop) {
    box.style.left = savedLeft;
    box.style.top = savedTop;
  } else {
    box.style.left = '20px';
    box.style.top = '20px';
  }

  toggleBtns.forEach(btn => {
    btn.addEventListener('click', e => {
      e.stopPropagation();
      const isNowVisible = box.classList.toggle('visible');
      const translations = languageTranslations[currentLang] || languageTranslations['zh'];   
      localStorage.setItem(`${LYRICS_STORAGE_PREFIX}floatingLyricsVisible`, isNowVisible);

      const msgKey = isNowVisible
        ? 'floating_lyrics_enabled'
        : 'floating_lyrics_disabled';
      const message = translations[msgKey] ||
        (isNowVisible
          ? "Floating lyrics enabled"
          : "Floating lyrics disabled");
      showLogMessage(message);
      speakMessage(message); 
   });
  });

  let isDragging = false, offsetX = 0, offsetY = 0;

  box.addEventListener('mousedown', e => {
    if (e.target.closest('.ctrl-btn')) return;
    e.preventDefault();
    isDragging = true;
    offsetX = e.clientX - box.offsetLeft;
    offsetY = e.clientY - box.offsetTop;
  });

  document.addEventListener('mousemove', e => {
    if (!isDragging) return;
    updatePosition(e.clientX, e.clientY);
  });

  document.addEventListener('mouseup', () => {
    if (isDragging) {
      isDragging = false;
      savePosition();
    }
  });

  let touchId = null;

  box.addEventListener('touchstart', e => {
    if (e.target.closest('.ctrl-btn')) return;
    e.preventDefault();
    const touch = e.touches[0];
    touchId = touch.identifier;
    offsetX = touch.clientX - box.offsetLeft;
    offsetY = touch.clientY - box.offsetTop;
  }, { passive: false });

  document.addEventListener('touchmove', e => {
    if (!touchId) return;
    const touch = Array.from(e.touches).find(t => t.identifier === touchId);
    if (!touch) return;
    updatePosition(touch.clientX, touch.clientY);
  }, { passive: false });

  document.addEventListener('touchend', () => {
    if (touchId) {
      touchId = null;
      savePosition();
    }
  });

  function updatePosition(clientX, clientY) {
    const newLeft = (clientX - offsetX) + 'px';
    const newTop = (clientY - offsetY) + 'px';
    box.style.left = newLeft;
    box.style.top = newTop;
  }

  function savePosition() {
    localStorage.setItem(`${LYRICS_STORAGE_PREFIX}floatingLyricsLeft`, box.style.left);
    localStorage.setItem(`${LYRICS_STORAGE_PREFIX}floatingLyricsTop`, box.style.top);
  }
})();
</script>

<script>
const PLAYER_STORAGE_PREFIX = 'musicPlayer_';
let isLyricsMode = localStorage.getItem(`${PLAYER_STORAGE_PREFIX}lyricsMode`) === 'true';

function toggleLyricsMode() {
    const modal = document.getElementById('musicModal');
    const icon = document.getElementById('lyricsIcon');

    isLyricsMode = !isLyricsMode;
    modal.classList.toggle('lyrics-mode', isLyricsMode);
    localStorage.setItem(`${PLAYER_STORAGE_PREFIX}lyricsMode`, isLyricsMode);

    if (isLyricsMode) {
        icon.classList.remove('bi-chevron-down');
        icon.classList.add('bi-chevron-up');
    } else {
        icon.classList.remove('bi-chevron-up');
        icon.classList.add('bi-chevron-down');
    }
}

document.addEventListener('DOMContentLoaded', () => {
    const icon = document.getElementById('lyricsIcon');
    document.getElementById('lyricsToggle').addEventListener('click', toggleLyricsMode);

    if (isLyricsMode) {
        document.getElementById('musicModal').classList.add('lyrics-mode');
        icon.classList.add('bi-chevron-up');
    } else {
        icon.classList.add('bi-chevron-down');
    }
});
</script>

<script>
function makeModalDraggable(modalElement) {
    const modalHeader = modalElement.querySelector('.music-modal-header');
    const modalContent = modalElement.querySelector('.modal-content');
    let isDragging = false;
    let offsetX = 0;
    let offsetY = 0;

    modalHeader.style.cursor = 'grab';
    
    modalHeader.addEventListener('mousedown', startDrag);
    document.addEventListener('mousemove', drag);
    document.addEventListener('mouseup', stopDrag);

    modalHeader.addEventListener('touchstart', handleTouchStart, { passive: false });
    document.addEventListener('touchmove', handleTouchMove, { passive: false });
    document.addEventListener('touchend', handleTouchEnd);

    function startDrag(e) {
        isDragging = true;
        offsetX = e.clientX - modalContent.offsetLeft;
        offsetY = e.clientY - modalContent.offsetTop;
        
        modalContent.style.cursor = 'grabbing';
        modalContent.style.userSelect = 'none';
        
        e.preventDefault();
    }

    function drag(e) {
        if (!isDragging) return;
        
        const newLeft = e.clientX - offsetX;
        const newTop = e.clientY - offsetY;
        
        const maxX = window.innerWidth - modalContent.offsetWidth;
        const maxY = window.innerHeight - modalContent.offsetHeight;
        
        modalContent.style.left = Math.max(0, Math.min(newLeft, maxX)) + 'px';
        modalContent.style.top = Math.max(0, Math.min(newTop, maxY)) + 'px';
        modalContent.style.position = 'fixed';
        modalContent.style.margin = '0';
        modalContent.style.transform = 'none';
    }

    function stopDrag() {
        if (isDragging) {
            isDragging = false;
            modalContent.style.cursor = 'default';
            modalContent.style.userSelect = 'auto';
            
            localStorage.setItem('musicModalLeft', modalContent.style.left);
            localStorage.setItem('musicModalTop', modalContent.style.top);
        }
    }

    function handleTouchStart(e) {
        const touch = e.touches[0];
        isDragging = true;
        offsetX = touch.clientX - modalContent.offsetLeft;
        offsetY = touch.clientY - modalContent.offsetTop;
        
        modalContent.style.cursor = 'grabbing';
        modalContent.style.userSelect = 'none';
        
        e.preventDefault();
    }

    function handleTouchMove(e) {
        if (!isDragging) return;
        
        const touch = e.touches[0];
        const newLeft = touch.clientX - offsetX;
        const newTop = touch.clientY - offsetY;
        
        const maxX = window.innerWidth - modalContent.offsetWidth;
        const maxY = window.innerHeight - modalContent.offsetHeight;
        
        modalContent.style.left = Math.max(0, Math.min(newLeft, maxX)) + 'px';
        modalContent.style.top = Math.max(0, Math.min(newTop, maxY)) + 'px';
        modalContent.style.position = 'fixed';
        modalContent.style.margin = '0';
        modalContent.style.transform = 'none';
        
        e.preventDefault();
    }

    function handleTouchEnd() {
        if (isDragging) {
            isDragging = false;
            modalContent.style.cursor = 'default';
            modalContent.style.userSelect = 'auto';
            
            localStorage.setItem('musicModalLeft', modalContent.style.left);
            localStorage.setItem('musicModalTop', modalContent.style.top);
        }
    }

    const savedLeft = localStorage.getItem('musicModalLeft');
    const savedTop = localStorage.getItem('musicModalTop');
    
    if (savedLeft && savedTop) {
        modalContent.style.left = savedLeft;
        modalContent.style.top = savedTop;
        modalContent.style.position = 'fixed';
        modalContent.style.margin = '0';
        modalContent.style.transform = 'none';
    }
}

document.addEventListener('DOMContentLoaded', function() {
    const musicModal = document.getElementById('musicModal');
    if (musicModal) {
        makeModalDraggable(musicModal);
    }
});

function openMusicModal() {
    const modal = document.getElementById('musicModal');
    const modalContent = modal.querySelector('.modal-content');
    
    modal.classList.add('active');
    
    const savedLeft = localStorage.getItem('musicModalLeft');
    const savedTop = localStorage.getItem('musicModalTop');
    
    if (!savedLeft || !savedTop) {
        modalContent.style.left = '50%';
        modalContent.style.top = '50%';
        modalContent.style.transform = 'translate(-50%, -50%)';
        modalContent.style.position = 'fixed';
    }
}

function closeMusicModal() {
    const modal = document.getElementById('musicModal');
    modal.classList.remove('active');
}
</script>

<script>
const defaultSettings = {
    '.icon-group': true,
    '.weather-card': true,
    '.ip-container': true,
    '#result': true
};

function handlePanelVisibility() {
    const panel = document.getElementById('panel');
    if (!panel) return;
    
    if (window.innerWidth <= 768) {
        panel.style.display = 'none';
    } else {
        panel.style.display = '';
    }
}

function openControlPanel() {
    document.getElementById('controlPanel').style.display = 'block';
    document.getElementById('overlay').style.display = 'block';
    updateStatusDisplay();
}

function closeControlPanel() {
    document.getElementById('controlPanel').style.display = 'none';
    document.getElementById('overlay').style.display = 'none';
}

function toggleVisibility(selector) {
    const element = document.querySelector(selector);
    const currentState = localStorage.getItem(selector);
    const newState = currentState === 'hidden' ? 'visible' : 'hidden';
    
    if (newState === 'hidden') {
        element.classList.add('control-panel-hidden');
    } else {
        element.classList.remove('control-panel-hidden');
    }
    
    localStorage.setItem(selector, newState);
    updateStatusDisplay();
    
    const statusText = newState === 'hidden' ? languageTranslations[currentLang]['status_hide'] : languageTranslations[currentLang]['status_show'];
    const statusMap = {
        '.icon-group': languageTranslations[currentLang]['tool_icons'],
        '.weather-card': languageTranslations[currentLang]['weather_info'],
        '.ip-container': languageTranslations[currentLang]['ip_info'],
        '#result': languageTranslations[currentLang]['site_status']
    };
    const panelName = statusMap[selector] || selector;

    const logMsg = `${panelName} ${statusText}`;
    if (typeof showLogMessage === 'function') showLogMessage(logMsg);
    if (typeof speakMessage === 'function') speakMessage(logMsg);
}

function updateStatusDisplay() {
    const statusMap = {
        '.icon-group': 'iconGroupStatus',
        '.weather-card': 'weatherStatus', 
        '.ip-container': 'ipStatus',
        '#result': 'navbarRightStatus'
    };
    
    Object.entries(statusMap).forEach(([selector, statusId]) => {
        const element = document.querySelector(selector);
        const statusElement = document.getElementById(statusId);
        const savedState = localStorage.getItem(selector);

        if (statusElement) {
            if (savedState === 'hidden' || (element && element.classList.contains('control-panel-hidden'))) {
                statusElement.textContent = languageTranslations[currentLang]['status_hide'];
                statusElement.style.color = 'var(--color-red)';
            } else {
                statusElement.textContent = languageTranslations[currentLang]['status_show'];
                statusElement.style.color = 'var(--color-green)';
            }
        }
    });
}

function resetAllSettings() {
    Object.keys(defaultSettings).forEach(selector => {
        localStorage.removeItem(selector);
        const element = document.querySelector(selector);
        if (element) {
            element.classList.remove('control-panel-hidden');
        }
    });
    updateStatusDisplay();
    const resetText = languageTranslations[currentLang]['reset_all'];
    const logMsg = `${resetText}`;
    if (typeof showLogMessage === 'function') showLogMessage(logMsg);
    if (typeof speakMessage === 'function') speakMessage(logMsg);
}

(function() {
    const style = document.createElement('style');
    style.textContent = '.control-panel-hidden { display: none !important; }';
    document.head.appendChild(style);
    
    const selectors = ['.icon-group', '.weather-card', '.ip-container', '#result'];
    selectors.forEach(selector => {
        if (localStorage.getItem(selector) === 'hidden') {
            const element = document.querySelector(selector);
            if (element) {
                element.classList.add('control-panel-hidden');
            }
        }
    });
})();

document.addEventListener('DOMContentLoaded', function() {
    handlePanelVisibility();
    updateStatusDisplay();
});

window.addEventListener('resize', handlePanelVisibility);
</script>

<script type="text/javascript">
const _IMG = '/luci-static/ipip/';
const translate = {};

let cachedIP = null;
let translationEnabled = localStorage.getItem('translationEnabled') !== 'false';
let currentLanguage = 'zh-CN';

const translationsIP = {
    zh: {
        unknown: '未知',
        panel: '控制面板',
        clickRefresh: '点击刷新 IP 地址',
        failedUpdate: '更新 IP 信息失败',
        checking: '获取中...',
        failed: '获取 IP 信息失败',
        translate: '翻译',
        spectraConfig: "Spectra 主题设置",
        home: "首页",
        manager: "文件助手",
        editDatabase: '编辑数据库',
        login: '登录'
    },
    en: {
        unknown: 'Unknown',
        panel: 'Control Panel',
        clickRefresh: 'Click to refresh IP address',
        failedUpdate: 'Failed to update IP information',
        checking: 'Checking...',
        failed: 'Failed to get IP information',
        translate: 'Translate',
        spectraConfig: 'Spectra Config',
        home: 'Home',
        manager: 'Manager',
        editDatabase: 'Edit Database',
        login: 'Login'
    },
    hk: {
        unknown: '未知',
        panel: '控制面板',
        clickRefresh: '點擊刷新 IP 地址',
        failedUpdate: '更新 IP 資訊失敗',
        checking: '獲取中...',
        failed: '獲取 IP 資訊失敗',
        translate: '翻譯',
        spectraConfig: 'Spectra 主題設定',
        home: '首頁',
        manager: '檔案管理',
        editDatabase: '編輯資料庫',
        login: '登入'
    },
    de: {
        unknown: 'Unbekannt',
        panel: 'Systemsteuerung',
        clickRefresh: 'Klicken, um die IP-Adresse zu aktualisieren',
        failedUpdate: 'IP-Informationen konnten nicht aktualisiert werden',
        checking: 'Überprüfung...',
        failed: 'IP-Informationen konnten nicht abgerufen werden',
        translate: 'Übersetzen',
        spectraConfig: 'Spectra Konfiguration',
        home: 'Startseite',
        manager: 'Dateimanager',
        editDatabase: 'Datenbank bearbeiten'
    },
    fr: {
        unknown: 'Inconnu',
        panel: 'Panneau de configuration',
        clickRefresh: 'Cliquez pour actualiser l\'adresse IP',
        failedUpdate: 'Échec de la mise à jour des informations IP',
        checking: 'Vérification...',
        failed: 'Impossible d\'obtenir les informations IP',
        translate: 'Traduire',
        spectraConfig: 'Configuration Spectra',
        home: 'Accueil',
        manager: 'Gestionnaire de fichiers',
        editDatabase: 'Modifier la base de données'
    },
    ko: {
        unknown: '알 수 없음',
        panel: '제어판',
        clickRefresh: 'IP 주소를 새로 고치려면 클릭',
        failedUpdate: 'IP 정보 업데이트 실패',
        checking: '확인 중...',
        failed: 'IP 정보 가져오기 실패',
        translate: '번역',
        spectraConfig: 'Spectra 설정',
        home: '홈',
        manager: '파일 관리자',
        editDatabase: '데이터베이스 편집'
    },
    ja: {
        unknown: '不明',
        panel: 'コントロールパネル',
        clickRefresh: 'クリックして IP アドレスを更新',
        failedUpdate: 'IP 情報の更新に失敗しました',
        checking: '確認中...',
        failed: 'IP 情報の取得に失敗しました',
        translate: '翻訳',
        spectraConfig: 'Spectra 設定',
        home: 'ホーム',
        manager: 'ファイルマネージャー',
        editDatabase: 'データベースを編集'
    },
    bn: {
        unknown: 'অজানা',
        panel: 'কন্ট্রোল প্যানেল',
        clickRefresh: 'IP ঠিকানা রিফ্রেশ করতে ক্লিক করুন',
        failedUpdate: 'IP তথ্য আপডেট করতে ব্যর্থ',
        checking: 'চেক করা হচ্ছে...',
        failed: 'IP তথ্য পেতে ব্যর্থ',
        translate: 'অনুবাদ',
        spectraConfig: 'Spectra কনফিগারেশন',
        home: 'হোম',
        manager: 'ফাইল ম্যানেজার',
        editDatabase: 'ডাটাবেস সম্পাদনা করুন'
    },
    vi: {
        unknown: 'Không xác định',
        panel: 'Bảng điều khiển',
        clickRefresh: 'Nhấn để làm mới địa chỉ IP',
        failedUpdate: 'Cập nhật thông tin IP thất bại',
        checking: 'Đang kiểm tra...',
        failed: 'Không thể lấy thông tin IP',
        translate: 'Dịch',
        spectraConfig: 'Cấu hình Spectra',
        home: 'Trang chủ',
        manager: 'Trình quản lý tệp',
        editDatabase: 'Chỉnh sửa cơ sở dữ liệu'
    },
    th: {
        unknown: 'ไม่ทราบ',
        panel: 'แผงควบคุม',
        clickRefresh: 'คลิกเพื่อรีเฟรชที่อยู่ IP',
        failedUpdate: 'อัปเดตข้อมูล IP ล้มเหลว',
        checking: 'กำลังตรวจสอบ...',
        failed: 'ไม่สามารถรับข้อมูล IP ได้',
        translate: 'แปล',
        spectraConfig: 'การตั้งค่า Spectra',
        home: 'หน้าหลัก',
        manager: 'ตัวจัดการไฟล์',
        editDatabase: 'แก้ไขฐานข้อมูล'
    },
    ar: {
        unknown: 'غير معروف',
        panel: 'لوحة التحكم',
        clickRefresh: 'انقر لتحديث عنوان IP',
        failedUpdate: 'فشل تحديث معلومات IP',
        checking: 'جارٍ التحقق...',
        failed: 'فشل الحصول على معلومات IP',
        translate: 'ترجمة',
        spectraConfig: 'إعدادات Spectra',
        home: 'الصفحة الرئيسية',
        manager: 'مدير الملفات',
        editDatabase: 'تحرير قاعدة البيانات'
    },
    ru: {
        unknown: 'Неизвестно',
        panel: 'Панель управления',
        clickRefresh: 'Нажмите, чтобы обновить IP-адрес',
        failedUpdate: 'Не удалось обновить информацию об IP',
        checking: 'Проверка...',
        failed: 'Не удалось получить информацию об IP',
        translate: 'Перевести',
        spectraConfig: 'Конфигурация Spectra',
        home: 'Главная',
        manager: 'Файловый менеджер',
        editDatabase: 'Редактировать базу данных'
    },
    es: {
        unknown: 'Desconocido',
        panel: 'Panel de control',
        clickRefresh: 'Haga clic para actualizar la dirección IP',
        failedUpdate: 'Error al actualizar la información IP',
        checking: 'Comprobando...',
        failed: 'Error al obtener información IP',
        translate: 'Traducir',
        spectraConfig: 'Configuración de Spectra',
        home: 'Inicio',
        manager: 'Administrador de archivos',
        editDatabase: 'Editar base de datos'
    }
};

async function initIPDisplay() {
    const lang = await getRealTimeLanguage();
    const text = translationsIP[lang] || translationsIP['zh'];
    const modalText = modalTranslations[lang] || modalTranslations['zh'];

    const flag = document.getElementById('flag');
    if (flag) flag.title = text.clickRefresh || 'Click to Refresh';

    const wifiIcon = document.getElementById('settings-icon');
    if (wifiIcon) wifiIcon.title = text.panel || 'Panel';

    const setCityBtn = document.getElementById('setCityBtn');
    if (setCityBtn) setCityBtn.title = modalText.modalTitle || 'Set City';

    const spectraConfigLink = document.querySelector('a[href*="/spectra"][data-title="Spectra_Config"], a[data-title="Spectra_Config"]');
    if (spectraConfigLink && text.spectraConfig) {
        spectraConfigLink.textContent = text.spectraConfig;
    }

    const homeLink = document.querySelector('a[href$="/spectra/index"], a[href*="/spectra/index"]');
    if (homeLink && text.home) {
        homeLink.textContent = text.home;
    }

    const managerLink = document.querySelector('a[href$="/spectra/filekit"], a[href*="/spectra/filekit"]');
    if (managerLink && text.manager) {
        managerLink.textContent = text.manager;
    }
}

document.addEventListener('DOMContentLoaded', () => {
    initIPDisplay();
});

async function getCurrentLanguage() {
    try {
        const response = await fetch('/luci-static/spectra/bgm/language.txt', {cache: 'no-store'});
        if (response.ok) {
            const lang = await response.text();
            return lang.trim() || 'zh-CN';
        }
    } catch (error) {
        console.error('Failed to read language file:', error);
    }
    return 'zh-CN';
}

async function getRealTimeLanguage() {
    return await getCurrentLanguage();
}

async function onLanguageChange() {
    console.log('Language changed, refreshing display');
    
    const keys = Object.keys(localStorage);
    keys.forEach(key => {
        if (key.startsWith('trans_')) {
            localStorage.removeItem(key);
        }
    });
    
    if (cachedIP) {
        await myAppIP.Ipip(cachedIP, 'ipip');
    }
}

function setupLanguageChangeListener() {
    let lastLanguage = 'zh-CN';

    setInterval(async () => {
        const currentLang = await getRealTimeLanguage();
        if (currentLang !== lastLanguage) {
            console.log('Language changed detected:', currentLang);
            lastLanguage = currentLang;
            onLanguageChange();
        }
    }, 1000);
}

document.addEventListener('DOMContentLoaded', function() {
    const savedState = localStorage.getItem('translationEnabled');
    if (savedState !== null) {
        translationEnabled = savedState === 'true';
    }
    updateTranslationToggleColor();
});

function updateTranslationToggleColor() {
    const existingToggles = document.querySelectorAll('.translation-toggle');
    existingToggles.forEach(toggle => {
        const icon = toggle.querySelector('i');
        if (translationEnabled) {
            icon.style.color = '#28a745';
        } else {
            icon.style.color = '#6c757d';
        }
    });
}

function toggleTranslation() {
    translationEnabled = !translationEnabled;
    localStorage.setItem('translationEnabled', translationEnabled);
    
    updateTranslationToggleColor();
    
    const translations = languageTranslations[currentLang] || languageTranslations['zh'];
    const translationMsg = translationEnabled 
        ? translations['translation_enabled'] 
        : translations['translation_disabled'];
    
    if (typeof showLogMessage === 'function') {
        showLogMessage(encodeURIComponent(translationMsg), 'info');
    }
    
    if (typeof speakMessage === 'function') {
        speakMessage(translationMsg);
    }
    
    if (cachedIP) {
        myAppIP.Ipip(cachedIP, 'ipip');
    }
}

function setupHoverEffect() {
    const ipContainer = document.getElementById('d-ip');
    const toggle = document.querySelector('.translation-toggle');
    if (ipContainer && toggle) {
        ipContainer.addEventListener('mouseenter', () => toggle.style.opacity = '1');
        ipContainer.addEventListener('mouseleave', () => toggle.style.opacity = '0');
    }
}

async function myAppTranslate(text) {
    if (!translationEnabled) return text;
    if (!text || typeof text !== 'string' || text.trim() === '') return text;

    const targetLanguage = await getRealTimeLanguage();
    const langMap = {
        'zh':'zh-CN','zh-tw':'zh-TW','zh-CN':'zh-CN','hk':'zh-TW', 'zh-mo': 'zh-TW',
        'en':'en','ja':'ja','ko':'ko','fr':'fr','de':'de','es':'es',
        'it':'it','pt':'pt','ru':'ru','ar':'ar','hi':'hi','bn':'bn',
        'ms':'ms','id':'id','vi':'vi','th':'th','nl':'nl','pl':'pl',
        'tr':'tr','sv':'sv','no':'no','fi':'fi','da':'da','cs':'cs',
        'he':'he','el':'el','hu':'hu','ro':'ro','sk':'sk','bg':'bg','uk':'uk'
    };
    const targetLang = langMap[targetLanguage] || targetLanguage.split('-')[0];
    if (targetLang.startsWith('en')) return text;

    const cacheKey = `trans_${text}_${targetLang}`;
    const cachedTranslation = localStorage.getItem(cacheKey);
    if (cachedTranslation) return cachedTranslation;

    const apis = [
        { 
            url: `https://api.mymemory.translated.net/get?q=${encodeURIComponent(text)}&langpair=en|${targetLang}`, 
            method: 'GET', 
            parseResponse: d => d && d.responseData && d.responseData.translatedText ? d.responseData.translatedText : text
        },
        { 
            url: `https://translate.googleapis.com/translate_a/single?client=gtx&sl=en&tl=${targetLang}&dt=t&q=${encodeURIComponent(text)}`, 
            method: 'GET', 
            parseResponse: d => Array.isArray(d) && d[0]?.[0]?.[0] ? d[0][0][0] : text
        }
    ];

    for(const api of apis){
        try{
            const response = await fetch(api.url, {
                method: api.method,
                headers: api.headers || {},
                body: api.body || null,
                signal: AbortSignal.timeout(3000)
            });
            
            if(response.ok){
                const data = await response.json();
                const translatedText = api.parseResponse(data);
                
                if (translatedText && translatedText !== text) {
                    localStorage.setItem(cacheKey, translatedText);
                    return translatedText;
                }
            }
        } catch(e){ 
            console.warn(`Translation API ${api.url} failed:`, e);
            continue; 
        }
    }
    return text;
}

async function saveIPCache(data) {
    if (!data.ip) return;
    data.language = await getRealTimeLanguage();
    
    const saveData = {
        ip: data.ip,
        country: data.country || '',
        region: data.region || '',
        city: data.city || '',
        isp: data.isp || '',
        asn: data.asn || '',
        asn_organization: data.asn_organization || '',
        country_code: data.country_code || '',
        timezone: data.timezone || data.time_zone || '',
        latitude: data.latitude || data.lat || '',
        longitude: data.longitude || data.lon || data.lng || '',
        language: data.language,
        translatedCountry: data.translatedCountry || '',
        translatedRegion: data.translatedRegion || '',
        translatedCity: data.translatedCity || '',
        translatedISP: data.translatedISP || '',
        translatedASNOrg: data.translatedASNOrg || ''
    };
    
    console.log('Saving cache with language:', saveData.language);
    
    try {
        const response = await fetch('/luci-static/spectra/bgm/save_ip_cache.php', {
            method: 'POST',
            headers: {'Content-Type':'application/json'},
            body: JSON.stringify(saveData)
        });
            const result = await response.json();
            console.log('Save result:', result);
    } catch (err) { 
        console.error("Failed to save IP cache:", err); 
    }
}

async function getCachedIPInfo(ip) {
    try {
        const resp = await fetch('/luci-static/spectra/bgm/ip_cache.json', {cache:'no-store'});
        const cache = await resp.json();
        const item = cache.find(item=>item.ip===ip);
        if (!item) return null;
        
        const currentLang = await getRealTimeLanguage();
        
        console.log('Cache check - Current language:', currentLang);
        console.log('Available translations:', item.translations ? Object.keys(item.translations) : 'none');
        
        if (item.translations && item.translations[currentLang]) {
            console.log('Using translation for language:', currentLang);
            return {
                ...item,
                ...item.translations[currentLang],
                language: currentLang
            };
        }
        
        console.log('No translation for current language, returning base data');
        return {
            ...item,
            language: currentLang
        };
        
    } catch (err) { 
        console.log('Cache read error:', err);
        return null; 
    }
}

let myAppIP = {
    isRefreshing:false,
    lastGeoData:null,
    ipApis:[
        {url:'https://api.ipify.org?format=json',type:'json',key:'ip'},
        {url:'https://api-ipv4.ip.sb/geoip',type:'json',key:'ip'},
        {url:'https://myip.ipip.net',type:'text'},
        {url:'http://pv.sohu.com/cityjson',type:'text'},
        {url:'https://ipinfo.io/json',type:'json',key:'ip'},
        {url:'https://ipapi.co/json/',type:'json'},
        {url:'https://freegeoip.app/json/',type:'json'},
        {url: ip => `https://ipapi.com/${ip}/json`, type: 'json', concurrent: true},
        {url: ip => `https://api.ip.sb/geoip/${ip}`, type: 'json', concurrent: true},
        {url: ip => `https://ipwho.is/${ip}`, type: 'json', concurrent: true},
        {url: ip => `https://api.ipapi.is/?q=${ip}`, type: 'json', concurrent: true}
    ],

    get:(url,type)=>fetch(url,{method:'GET',cache:'no-store'})
        .then(resp=>type==='text'?Promise.all([resp.ok,resp.status,resp.text(),resp.headers]):Promise.all([resp.ok,resp.status,resp.json(),resp.headers]))
        .then(([ok,status,data,headers])=>ok?{ok,status,data,headers}:Promise.reject(data.error))
        .catch(e=>{console.error("Error fetching data:",e);throw e;}),

    concurrentGeoQuery: async function(ip) {
        const concurrentApis = this.ipApis.filter(api => api.concurrent);
        if (!concurrentApis.length) throw new Error("No concurrent APIs configured");

        return new Promise((resolve, reject) => {
            let resolved = false;
            let completed = 0;

            concurrentApis.forEach(api => {
                const apiUrl = typeof api.url === 'function' ? api.url(ip) : api.url;
                this.get(apiUrl, api.type)
                    .then(resp => {
                        if (!resolved && resp.data) {
                            resolved = true;
                            resolve(resp.data);
                        }
                    })
                    .catch(err => console.warn("Concurrent API failed:", apiUrl, err))
                    .finally(() => {
                        completed++;
                        if (completed === concurrentApis.length && !resolved) {
                            reject(new Error("All concurrent APIs failed"));
                        }
                    });
            });
        });
    },

    fetchIP: async ()=>{
        let error;
        for(let api of myAppIP.ipApis){
            if (api.concurrent) continue;
            
            try{
                const response = await myAppIP.get(api.url,api.type);
                let ipData = api.type==='json' ? (api.key?response.data[api.key]:response.data) : response.data.match(/\d+\.\d+\.\d+\.\d+/)?.[0];
                if(ipData){ cachedIP=ipData; document.getElementById('d-ip').innerHTML=ipData; return ipData; }
            }catch(e){ error=e; continue; }
        }
        throw error||new Error("All IP APIs failed");
    },

    Ipip: async(ip,elID)=>{
        console.log('Ipip called with IP:', ip);
        let cachedData = await getCachedIPInfo(ip);
        const currentLang = await getRealTimeLanguage();       
        console.log('Current language:', currentLang);
        
        if(cachedData && cachedData.translatedCountry) { 
            console.log('Using cached data with translation');
            myAppIP.lastGeoData = cachedData; 
            await myAppIP.updateUI(cachedData,elID); 
            return; 
        }
        
        if(cachedData) {
            console.log('Cached data found but no translation for current language, re-translating');
            
            const baseData = {
                country: cachedData.country || '',
                region: cachedData.region || '',
                city: cachedData.city || '',
                isp: cachedData.isp || '',
                asn_organization: cachedData.asn_organization || '',
                asn: cachedData.asn || '',
                country_code: cachedData.country_code || '',
                timezone: cachedData.timezone || '',
                latitude: cachedData.latitude || '',
                longitude: cachedData.longitude || ''
            };
            
            myAppIP.lastGeoData = {...baseData};
            
            if(translationEnabled){
                console.log('Starting translation for language:', currentLang);
                myAppIP.lastGeoData.translatedCountry = await myAppTranslate(baseData.country);
                myAppIP.lastGeoData.translatedRegion  = await myAppTranslate(baseData.region);
                myAppIP.lastGeoData.translatedCity    = await myAppTranslate(baseData.city);
                myAppIP.lastGeoData.translatedISP     = await myAppTranslate(baseData.isp);
                myAppIP.lastGeoData.translatedASNOrg  = await myAppTranslate(baseData.asn_organization);
                myAppIP.lastGeoData.language = currentLang;
                console.log('Translation completed');
            }
            
            myAppIP.lastGeoData.ip = ip;
            myAppIP.lastGeoData.asn = baseData.asn;
            myAppIP.lastGeoData.country_code = baseData.country_code;          
            await myAppIP.updateUI(myAppIP.lastGeoData,elID);
            saveIPCache(myAppIP.lastGeoData);
            return;
        }

        try {
            const geoData = await this.concurrentGeoQuery(ip);
            cachedIP=ip;
            myAppIP.lastGeoData=geoData;

            const standardizedData = {
                ip: geoData.ip || ip,
                country: geoData.country || geoData.country_name || '',
                region: geoData.region || geoData.region_name || geoData.state || '',
                city: geoData.city || '',
                isp: geoData.isp || geoData.connection?.isp || geoData.org || '',
                asn: geoData.asn || geoData.connection?.asn || '',
                asn_organization: geoData.org || geoData.connection?.org || geoData.connection?.isp || '',
                country_code: geoData.country_code || geoData.countryCode || geoData.country_code || '',
                timezone: geoData.timezone || geoData.time_zone || '',
                latitude: geoData.latitude || geoData.lat || '',
                longitude: geoData.longitude || geoData.lon || geoData.lng || ''
            };

            if(translationEnabled){
                standardizedData.translatedCountry = await myAppTranslate(standardizedData.country||'');
                standardizedData.translatedRegion  = await myAppTranslate(standardizedData.region||'');
                standardizedData.translatedCity    = await myAppTranslate(standardizedData.city||'');
                standardizedData.translatedISP     = await myAppTranslate(standardizedData.isp||'');
                standardizedData.translatedASNOrg  = await myAppTranslate(standardizedData.asn_organization||'');
                standardizedData.language = currentLang;
            }

            await myAppIP.updateUI(standardizedData,elID);
            saveIPCache(standardizedData);
            
        } catch(concurrentError) {
            console.log("Concurrent query failed, falling back to sequential:", concurrentError);
            
            const geoApis = [
                {url:`https://api.ip.sb/geoip/${ip}`,type:'json'},
                {url:'https://myip.ipip.net',type:'text'},
                {url:`http://ip-api.com/json/${ip}`,type:'json'},
                {url:`https://ipinfo.io/${ip}/json`,type:'json'},
                {url:`https://ipapi.co/${ip}/json`,type:'json'},
                {url:`https://freegeoip.app/json/${ip}`,type:'json'}
            ];

            let geoData=null,error;
            for(let api of geoApis){
                try{ 
                    const response = await myAppIP.get(api.url,api.type); 
                    geoData=response.data; 
                    break; 
                }
                catch(e){ error=e; continue; }
            }
            if(!geoData) throw error||new Error("All Geo APIs failed");

            cachedIP=ip;
            myAppIP.lastGeoData=geoData;

            geoData.timezone = geoData.timezone || geoData.time_zone || '';
            geoData.latitude = geoData.latitude || geoData.lat || '';
            geoData.longitude = geoData.longitude || geoData.lon || geoData.lng || '';

            if(translationEnabled){
                geoData.translatedCountry = await myAppTranslate(geoData.country||'');
                geoData.translatedRegion  = await myAppTranslate(geoData.region||'');
                geoData.translatedCity    = await myAppTranslate(geoData.city||'');
                geoData.translatedISP     = await myAppTranslate(geoData.isp||'');
                geoData.translatedASNOrg  = await myAppTranslate(geoData.asn_organization||'');
                geoData.language = currentLang;
            }

            await myAppIP.updateUI(geoData,elID);
            saveIPCache(geoData);
        }
    },

    updateUI: async(data,elID)=>{
        try{
            const lang = await getRealTimeLanguage();
            const text = translationsIP[lang] || translationsIP['zh'];
            const country = translationEnabled && data.translatedCountry ? data.translatedCountry : data.country || text.unknown;
            const region  = translationEnabled && data.translatedRegion  ? data.translatedRegion  : data.region  || "";
            const city    = translationEnabled && data.translatedCity    ? data.translatedCity    : data.city    || "";
            const isp     = translationEnabled && data.translatedISP     ? data.translatedISP     : data.isp     || "";
            const asnOrg  = translationEnabled && data.translatedASNOrg  ? data.translatedASNOrg  : data.asn_organization || "";

            let location = region && city && region!==city ? `${region} ${city}` : region||city||'';
            let displayISP = isp;
            let displayASN = asnOrg;
            if(isp && asnOrg && asnOrg.includes(isp)) displayISP=''; 
            else if(isp && asnOrg && isp.includes(asnOrg)) displayASN='';

            document.getElementById('d-ip').innerHTML = `
                <div class="ip-main" style="cursor:pointer;" onclick="myAppIP.showDetailModal()">
                    ${cachedIP} <span class="badge-primary" style="color:#fd7e14;background:#f8f9fa;border-radius:4px;padding:2px 6px;border:1px solid #ddd;">${country}</span>
                </div>`;
            document.getElementById('ipip').innerHTML = `<span style="margin-left:8px; position: relative; top: -3px;">${location} ${displayISP} ${data.asn||''} ${displayASN}</span>`;

            const countryCode = data.country_code||'unknown';
            const flagSrc = (countryCode!=='unknown')?_IMG+"flags/"+countryCode.toLowerCase()+".png":'/luci-static/ipip/flags/cn.png';
            $("#flag").attr("src",flagSrc);

        } catch(e){
            console.error("updateUI error:",e);
            document.getElementById('d-ip').innerHTML = text.failedUpdate;   
            $("#flag").attr("src","/luci-static/ipip/flags/cn.png");
        }
    },

    getIpipnetIP: async ()=>{
        if(myAppIP.isRefreshing) return;
        myAppIP.isRefreshing = true;
        const lang = await getRealTimeLanguage();
        const text = translationsIP[lang] || translationsIP['zh'];

        document.getElementById('d-ip').textContent = text.checking;
        document.getElementById('ipip').innerHTML="";

        const flag = document.getElementById("flag");
        const loading = document.getElementById("loading");

        loading.style.display = 'flex';
        flag.style.visibility = 'hidden';

        try {
            const ip = await myAppIP.fetchIP();
            await myAppIP.Ipip(ip, 'ipip');
        } catch (e) {
            console.error("getIpipnetIP error:", e);
            document.getElementById('ipip').innerHTML = text.failed;
        } finally {
            loading.style.display = 'none';
            flag.style.visibility = 'visible';
            myAppIP.isRefreshing = false;
        }
    },

    showDetailModal: async function() {
        if (!myAppIP.lastGeoData) return;
            const lang = await getRealTimeLanguage();
            const text = translationsIP[lang] || translationsIP['zh'];
            const data = myAppIP.lastGeoData;
            const country = translationEnabled && data.translatedCountry ? data.translatedCountry : data.country || text.unknown;
            const region = translationEnabled && data.translatedRegion ? data.translatedRegion : data.region || "";
            const city = translationEnabled && data.translatedCity ? data.translatedCity : data.city || "";
            const isp = translationEnabled && data.translatedISP ? data.translatedISP : data.isp || "";
            const asnOrg = translationEnabled && data.translatedASNOrg ? data.translatedASNOrg : data.asn_organization || "";
            const timezone = data.timezone || data.time_zone || 'N/A';
            const latitude = data.latitude || data.lat || 'N/A';
            const longitude = data.longitude || data.lon || data.lng || 'N/A';

            let locationParts = [country];
    
            if (region && region !== country) {
                locationParts.push(region);
            }
    
            if (city && city !== region && city !== country) {
                locationParts.push(city);
            }
    
            const locationDisplay = locationParts.join(' ');

            let countryCode = data.country_code || 'unknown';
            if (countryCode.toUpperCase() === 'TW') {
                countryCode = 'CN';
            } else if (countryCode.toUpperCase() === 'HK' || countryCode.toUpperCase() === 'MO') {
                countryCode = 'CN';
            }

        const translations = {
            'zh': {
                title: 'IP 地址详情',
                ip: 'IP 地址',
                location: '地理位置',
                isp: '网络服务商',
                asn: '自治系统号',
                countryCode: '国家代码',
                timezone: '时区',
                coordinates: '坐标',
                translation: '翻译',
                enabled: '已启用',
                disabled: '已禁用',
                close: '关闭',
                refresh: '刷新',
                mapView: '地图视图',
                viewOnGoogleMaps: '在Google地图中查看',
                latitude: '纬度',
                longitude: '经度'
            },
            'en': {
                title: 'IP Address Details',
                ip: 'IP Address',
                location: 'Location',
                isp: 'ISP',
                asn: 'ASN',
                countryCode: 'Country Code',
                timezone: 'Timezone',
                coordinates: 'Coordinates',
                translation: 'Translation',
                enabled: 'Enabled',
                disabled: 'Disabled',
                close: 'Close',
                refresh: 'Refresh',
                mapView: 'Map View',
                viewOnGoogleMaps: 'View on Google Maps',
                latitude: 'Latitude',
                longitude: 'Longitude'
            },
            'ja': {
                title: 'IPアドレス詳細',
                ip: 'IPアドレス',
                location: '所在地',
                isp: 'ISP',
                asn: 'AS番号',
                countryCode: '国コード',
                timezone: 'タイムゾーン',
                coordinates: '座標',
                translation: '翻訳',
                enabled: '有効',
                disabled: '無効',
                close: '閉じる',
                refresh: '更新',
                mapView: '地図表示',
                viewOnGoogleMaps: 'Googleマップで表示',
                latitude: '緯度',
                longitude: '経度'
            },
            'hk': {
                title: 'IP 地址詳情',
                ip: 'IP 地址',
                location: '地理位置',
                isp: '網絡服務商',
                asn: '自治系統號',
                countryCode: '國家代碼',
                timezone: '時區',
                coordinates: '坐標',
                translation: '翻譯',
                enabled: '已啟用',
                disabled: '已禁用',
                close: '關閉',
                refresh: '刷新',
                mapView: '地圖視圖',
                viewOnGoogleMaps: '在Google地圖中查看',
                latitude: '緯度',
                longitude: '經度'
            },
            'ko': {
                title: 'IP 주소 세부정보',
                ip: 'IP 주소',
                location: '위치',
                isp: '인터넷 서비스 제공업체',
                asn: 'ASN',
                countryCode: '국가 코드',
                timezone: '시간대',
                coordinates: '좌표',
                translation: '번역',
                enabled: '사용',
                disabled: '사용 안 함',
                close: '닫기',
                refresh: '새로고침',
                mapView: '지도 보기',
                viewOnGoogleMaps: 'Google 지도에서 보기',
                latitude: '위도',
                longitude: '경도'
            },
            'ru': {
                title: 'Детали IP-адреса',
                ip: 'IP-адрес',
                location: 'Местоположение',
                isp: 'Интернет-провайдер',
                asn: 'ASN',
                countryCode: 'Код страны',
                timezone: 'Часовой пояс',
                coordinates: 'Координаты',
                translation: 'Перевод',
                enabled: 'Включено',
                disabled: 'Отключено',
                close: 'Закрыть',
                refresh: 'Обновить',
                mapView: 'Просмотр карты',
                viewOnGoogleMaps: 'Посмотреть в Google Картах',
                latitude: 'Широта',
                longitude: 'Долгота'
            },
            'ar': {
                title: 'تفاصيل عنوان IP',
                ip: 'عنوان IP',
                location: 'الموقع',
                isp: 'مزود خدمة الإنترنت',
                asn: 'ASN',
                countryCode: 'رمز الدولة',
                timezone: 'المنطقة الزمنية',
                coordinates: 'الإحداثيات',
                translation: 'ترجمة',
                enabled: 'مُمكّن',
                disabled: 'معطّل',
                close: 'إغلاق',
                refresh: 'تحديث',
                mapView: 'عرض الخريطة',
                viewOnGoogleMaps: 'عرض على خرائط Google',
                latitude: 'خط العرض',
                longitude: 'خط الطول'
            },
            'es': {
                title: 'Detalles de la dirección IP',
                ip: 'Dirección IP',
                location: 'Ubicación',
                isp: 'Proveedor de Internet',
                asn: 'ASN',
                countryCode: 'Código de país',
                timezone: 'Zona horaria',
                coordinates: 'Coordenadas',
                translation: 'Traducción',
                enabled: 'Habilitado',
                disabled: 'Deshabilitado',
                close: 'Cerrar',
                refresh: 'Actualizar',
                mapView: 'Vista de mapa',
                viewOnGoogleMaps: 'Ver en Google Maps',
                latitude: 'Latitud',
                longitude: 'Longitud'
            },
            'de': {
                title: 'IP-Adressdetails',
                ip: 'IP-Adresse',
                location: 'Standort',
                isp: 'ISP',
                asn: 'ASN',
                countryCode: 'Ländercode',
                timezone: 'Zeitzone',
                coordinates: 'Koordinaten',
                translation: 'Übersetzung',
                enabled: 'Aktiviert',
                disabled: 'Deaktiviert',
                close: 'Schließen',
                refresh: 'Aktualisieren',
                mapView: 'Kartenansicht',
                viewOnGoogleMaps: 'In Google Maps ansehen',
                latitude: 'Breitengrad',
                longitude: 'Längengrad'
            },
            'fr': {
                title: 'Détails de l’adresse IP',
                ip: 'Adresse IP',
                location: 'Emplacement',
                isp: 'FAI',
                asn: 'ASN',
                countryCode: 'Code du pays',
                timezone: 'Fuseau horaire',
                coordinates: 'Coordonnées',
                translation: 'Traduction',
                enabled: 'Activé',
                disabled: 'Désactivé',
                close: 'Fermer',
                refresh: 'Rafraîchir',
                mapView: 'Vue carte',
                viewOnGoogleMaps: 'Voir sur Google Maps',
                latitude: 'Latitude',
                longitude: 'Longitude'
            },
            'vi': {
                title: 'Chi tiết địa chỉ IP',
                ip: 'Địa chỉ IP',
                location: 'Vị trí',
                isp: 'Nhà cung cấp dịch vụ Internet',
                asn: 'ASN',
                countryCode: 'Mã quốc gia',
                timezone: 'Múi giờ',
                coordinates: 'Tọa độ',
                translation: 'Dịch',
                enabled: 'Bật',
                disabled: 'Tắt',
                close: 'Đóng',
                refresh: 'Làm mới',
                mapView: 'Xem bản đồ',
                viewOnGoogleMaps: 'Xem trên Google Maps',
                latitude: 'Vĩ độ',
                longitude: 'Kinh độ'
            },
            'bn': {
                title: 'IP ঠিকানার বিবরণ',
                ip: 'IP ঠিকানা',
                location: 'অবস্থান',
                isp: 'আইএসপি',
                asn: 'ASN',
                countryCode: 'দেশ কোড',
                timezone: 'সময় অঞ্চল',
                coordinates: 'অবস্থানাঙ্ক',
                translation: 'অনুবাদ',
                enabled: 'সক্রিয়',
                disabled: 'নিষ্ক্রিয়',
                close: 'বন্ধ করুন',
                refresh: 'রিফ্রেশ',
                mapView: 'মানচিত্র ভিউ',
                viewOnGoogleMaps: 'Google মানচিত্রে দেখুন',
                latitude: 'অক্ষাংশ',
                longitude: 'দ্রাঘিমাংশ'
            },
            'th': {
                title: 'รายละเอียดที่อยู่ IP',
                ip: 'ที่อยู่ IP',
                location: 'ตำแหน่งที่ตั้ง',
                isp: 'ผู้ให้บริการอินเทอร์เน็ต',
                asn: 'ASN',
                countryCode: 'รหัสประเทศ',
                timezone: 'เขตเวลา',
                coordinates: 'พิกัด',
                translation: 'การแปล',
                enabled: 'เปิดใช้งาน',
                disabled: 'ปิดใช้งาน',
                close: 'ปิด',
                refresh: 'รีเฟรช',
                mapView: 'มุมมองแผนที่',
                viewOnGoogleMaps: 'ดูบน Google Maps',
                latitude: 'ละติจูด',
                longitude: 'ลองจิจูด'
            }
        };

        const getLanguageText = async () => {
            try {
                const currentLang = await getRealTimeLanguage();
                return translations[currentLang] || translations['zh-CN'];
            } catch (error) {
                console.error('Failed to get language:', error);
                return translations['zh-CN'];
            }
        };

        const modalOverlay = document.createElement('div');
        modalOverlay.className = 'ip-modal-overlay';
        modalOverlay.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 10000;
            opacity: 0;
            transition: opacity 0.3s ease;
        `;
    
        const modalContent = document.createElement('div');
        modalContent.className = 'ip-modal-content';
        modalContent.style.cssText = `
            background: var(--bg-container);
            border-radius: 12px;
            width: 90%;
            max-width: 800px;
            max-height: 80vh;
            overflow: hidden;
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
            transform: scale(0.9);
            transition: transform 0.3s ease;
        `;

        modalContent.innerHTML = `
            <div class="ip-modal-header" style="
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                color: white;
                padding: 20px;
                display: flex;
                justify-content: space-between;
                align-items: center;
            ">
                <h3 style="margin: 0; font-size: 1.2em;">
                    <span style="margin-right: 10px;">📋</span>
                    Loading...
                </h3>
                <button class="ip-modal-close" style="
                    background: none;
                    border: none;
                    color: white;
                    font-size: 1.5em;
                    cursor: pointer;
                    padding: 0;
                    width: 30px;
                    height: 30px;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                ">×</button>
            </div>
        
            <div class="ip-modal-body" style="padding: 20px; max-height: 60vh; overflow-y: auto;">
                <div style="text-align: center; padding: 40px;">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            </div>
        `;
    
        modalOverlay.appendChild(modalContent);
        document.body.appendChild(modalOverlay);
    
        setTimeout(() => {
            modalOverlay.style.opacity = '1';
            modalContent.style.transform = 'scale(1)';
        }, 10);

        getLanguageText().then(langText => {
            modalContent.innerHTML = `
                <div class="ip-modal-header" style="
                    background: var(--header-bg); 
                    color: white;
                    padding: 20px;
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                ">
                    <h3 style="margin: 0; font-size: 1.3em;  font-weight:600; background:none; border:none; color:var(--accent-color);">
                        <span style="margin-right: 10px;"><i class="bi bi-clipboard"></i></span>
                        ${langText.title}
                    </h3>
                    <button class="ip-modal-close" style="
                        background:white;
                        border:none;
                        color:var(--accent-color);
                        font-size:1.1em;
                        cursor:pointer;
                        width:25px;
                        height:25px;
                        border-radius:6px;
                        display:flex;
                        align-items:center;
                        justify-content:center;
                        transition: transform 0.2s, color 0.2s;
                    "
                    onmouseover="this.firstElementChild.style.color='#1a73e8'; this.style.transform='scale(1.1)';"
                    onmouseout="this.firstElementChild.style.color='#4a6cf7'; this.style.transform='scale(1)';">
                        <i class="bi bi-x-lg"></i>
                    </button>
                </div>
            
                <div class="ip-modal-body" style="padding: 20px; max-height: 60vh; overflow-y: auto;">
                    <div style="display: flex; margin-bottom: 20px;">
                        <div style="flex: 1; text-align: center;">
                            <img src="${_IMG}flags/${(data.country_code || 'unknown').toLowerCase()}.png" 
                                style="max-height: 80px;" 
                                onerror="this.src='/luci-static/ipip/flags/unknown.png'">
                            <div style="margin-top: 10px; font-weight: bold; color: var(--text-primary);">${country}</div>
                        </div>
                        <div style="flex: 2; margin-left: 20px;">
                            <div class="detail-item" style="margin-bottom: 10px; display: flex; gap: 20px;">
                                <span style="width: 180px; font-weight: 500;"><i class="bi bi-globe2"></i>  ${langText.ip}:</span>
                                <span style="flex: 1; word-break: break-word;">${cachedIP}</span>
                            </div>
                            <div class="detail-item" style="margin-bottom: 10px; display: flex; gap: 20px;">
                                <span style="width: 180px; font-weight: 500;"><i class="bi bi-geo-alt"></i>  ${langText.location}:</span>
                                <span style="flex: 1;">${locationDisplay}</span>
                            </div>
                            <div class="detail-item" style="margin-bottom: 10px; display: flex; gap: 20px;">
                                <span style="width: 180px; font-weight: 500;"><i class="bi bi-building"></i>  ${langText.isp}:</span>
                                <span style="flex: 1;">${isp}</span>
                            </div>
                            <div class="detail-item" style="margin-bottom: 10px; display: flex; gap: 20px;">
                                <span style="width: 180px; font-weight: 500;"><i class="bi bi-link-45deg"></i>  ${langText.asn}:</span>
                                <span style="flex: 1;">${data.asn || ''} ${asnOrg}</span>
                            </div>
                            <div class="detail-item" style="margin-bottom: 10px; display: flex; gap: 20px;">
                                <span style="width: 180px; font-weight: 500;"><i class="bi bi-flag"></i>  ${langText.countryCode}:</span>
                                <span style="flex: 1;">${countryCode}</span>
                            </div>
                            <div class="detail-item" style="margin-bottom: 10px; display: flex; gap: 20px;">
                                <span style="width: 180px; font-weight: 500;"><i class="bi bi-clock"></i>  ${langText.timezone}:</span>
                                <span style="flex: 1;">${timezone}</span>
                            </div>
                            <div class="detail-item" style="margin-bottom: 10px; display: flex; gap: 20px;">
                                <span style="width: 180px; font-weight: 500;"><i class="bi bi-geo"></i>  ${langText.coordinates}:</span>
                                <span style="flex: 1;">
                                    ${latitude !== 'N/A' && longitude !== 'N/A' ? 
                                        `${latitude}, ${longitude}` : 
                                        'N/A'}
                                </span>
                            </div>
                            <div class="detail-item" style="margin-bottom: 10px; display: flex; gap: 20px;">
                                <span style="width: 180px; font-weight: 500; color: #6c757d;"><i class="bi bi-translate"></i>  ${langText.translation}:</span>
                                <span style="flex: 1;">
                                    <span style="
                                        padding: 4px 8px;
                                        border-radius: 4px;
                                        font-size: 0.9em;
                                        background: ${translationEnabled ? '#28a745' : '#6c757d'};
                                        color: white !important;
                                    ">
                                        ${translationEnabled ? langText.enabled : langText.disabled}
                                    </span>
                                </span>
                            </div>
                        </div>
                    </div>

                    ${latitude !== 'N/A' && longitude !== 'N/A' ? `
                    <div style="margin-top: 20px; padding: 15px; background: var(--card-bg); border-radius: 8px;">
                        <div style="display: flex; align-items: center; margin-bottom: 10px;">
                            <span style="font-weight: 500; color: var(--text-primary); margin-right: 10px;"><i class="bi bi-map"></i>  ${langText.mapView}:</span>
                            <a href="https://maps.google.com/?q=${latitude},${longitude}" 
                               target="_blank" 
                               style="color: var(--accent-color); text-decoration: none;"
                               onmouseover="this.style.textDecoration='underline'" 
                               onmouseout="this.style.textDecoration='none'">
                                ${langText.viewOnGoogleMaps}
                            </a>
                        </div>
                        <div style="font-size: 0.9em; color: var(--text-primary);">
                            ${langText.latitude}: ${latitude}, ${langText.longitude}: ${longitude}
                        </div>
                    </div>
                    ` : ''}
                </div>
            
                <div class="ip-modal-footer" style="
                    padding: 15px 20px;
                    background: var(--header-bg);
                    display: flex;
                    justify-content: flex-end;
                    border-top: 1px solid var(--header-bg);
                ">

                    <button class="cbi-button cbi-button-remove">${langText.close}</button>
                    <button class="cbi-button cbi-button-apply">${langText.refresh}</button>
                </div>
            `;

            setupModalEvents(modalOverlay, modalContent);
        }).catch(error => {
            console.error('Failed to load language:', error);
        });

        const setupModalEvents = (overlay, content) => {
            const closeBtn = content.querySelector('.ip-modal-close');
            const closeModalBtn = content.querySelector('.cbi-button-remove');
        
            const closeModal = () => {
                overlay.style.opacity = '0';
                content.style.transform = 'scale(0.9)';
                setTimeout(() => {
                    if (overlay.parentNode) {
                        overlay.parentNode.removeChild(overlay);
                    }
                }, 300);
            };
        
            closeBtn.addEventListener('click', closeModal);
            closeModalBtn.addEventListener('click', closeModal);
        
            overlay.addEventListener('click', (e) => {
                if (e.target === overlay) {
                    closeModal();
                }
            });

            const refreshBtn = content.querySelector('.cbi-button-apply');
            refreshBtn.addEventListener('click', () => {
                closeModal();
                setTimeout(() => {
                    this.getIpipnetIP();
                }, 300);
            });
        };

        setupModalEvents(modalOverlay, modalContent);
    },
};

document.addEventListener('DOMContentLoaded', function() {
    setupLanguageChangeListener();
    
    const flagElement = document.getElementById('flag');
    if (flagElement) {
        flagElement.addEventListener('click', () => myAppIP.getIpipnetIP());
    }
    
    myAppIP.getIpipnetIP();
    setInterval(() => myAppIP.getIpipnetIP(), 180000);
});
</script>

<script>
let isCodeMirrorLoaded = false;
let codeMirrorLoadingPromise = null;

function loadCodeMirror() {
    if (isCodeMirrorLoaded) {
        return Promise.resolve();
    }
    
    if (codeMirrorLoadingPromise) {
        return codeMirrorLoadingPromise;
    }
    
    codeMirrorLoadingPromise = new Promise((resolve, reject) => {
        const cssLink = document.createElement('link');
        cssLink.rel = 'stylesheet';
        cssLink.href = 'https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/codemirror.min.css';
        document.head.appendChild(cssLink);
        
        const script = document.createElement('script');
        script.src = 'https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/codemirror.min.js';
        script.onload = () => {
            const jsonModeScript = document.createElement('script');
            jsonModeScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/mode/javascript/javascript.min.js';
            jsonModeScript.onload = () => {
                const themeLink = document.createElement('link');
                themeLink.rel = 'stylesheet';
                themeLink.href = 'https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/theme/material.min.css';
                document.head.appendChild(themeLink);
                
                const lintScript = document.createElement('script');
                lintScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/addon/lint/lint.min.js';
                lintScript.onload = () => {
                    const lintCss = document.createElement('link');
                    lintCss.rel = 'stylesheet';
                    lintCss.href = 'https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/addon/lint/lint.min.css';
                    document.head.appendChild(lintCss);
                    
                    CodeMirror.registerHelper("lint", "json", function(text) {
                        const found = [];
                        if (!text) return found;
                        
                        try {
                            JSON.parse(text);
                        } catch (e) {
                            const match = e.message.match(/line (\d+)/);
                            const line = match ? parseInt(match[1]) - 1 : 0;
                            
                            let errorLine = line;
                            let errorChar = 0;
                            
                            const lines = text.split('\n');
                            if (e.message.includes('Unexpected token')) {
                                const token = e.message.match(/Unexpected token (.+?) in/);
                                if (token) {
                                    for (let i = 0; i < lines.length; i++) {
                                        const pos = lines[i].indexOf(token[1]);
                                        if (pos !== -1) {
                                            errorLine = i;
                                            errorChar = pos;
                                            break;
                                        }
                                    }
                                }
                            }
                            
                            found.push({
                                from: CodeMirror.Pos(errorLine, errorChar),
                                to: CodeMirror.Pos(errorLine, errorChar + 1),
                                message: e.message,
                                severity: "error"
                            });
                        }
                        return found;
                    });
                    
                    const foldScript = document.createElement('script');
                    foldScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/addon/fold/foldcode.min.js';
                    foldScript.onload = () => {
                        const foldGutterScript = document.createElement('script');
                        foldGutterScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/addon/fold/foldgutter.min.js';
                        foldGutterScript.onload = () => {
                            const braceFoldScript = document.createElement('script');
                            braceFoldScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/addon/fold/brace-fold.min.js';
                            braceFoldScript.onload = () => {
                                const foldGutterCss = document.createElement('link');
                                foldGutterCss.rel = 'stylesheet';
                                foldGutterCss.href = 'https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/addon/fold/foldgutter.min.css';
                                document.head.appendChild(foldGutterCss);
                                
                                isCodeMirrorLoaded = true;
                                resolve();
                            };
                            braceFoldScript.onerror = reject;
                            document.head.appendChild(braceFoldScript);
                        };
                        foldGutterScript.onerror = reject;
                        document.head.appendChild(foldGutterScript);
                    };
                    foldScript.onerror = reject;
                    document.head.appendChild(foldScript);
                };
                lintScript.onerror = reject;
                document.head.appendChild(lintScript);
            };
            jsonModeScript.onerror = reject;
            document.head.appendChild(jsonModeScript);
        };
        script.onerror = reject;
        document.head.appendChild(script);
    });
    
    return codeMirrorLoadingPromise;
}

async function showEditModal() {
    const translations = languageTranslations[currentLang] || languageTranslations['zh'];

    const overlay = document.createElement('div');
    overlay.style.cssText = `
        position: fixed; top:0; left:0; width:100%; height:100%;
        background: rgba(0,0,0,0.5); display:flex; justify-content:center; align-items:center;
        z-index:10000; opacity:0; transition: opacity 0.3s;
    `;

    const content = document.createElement('div');
    content.style.cssText = `
        background:var(--secondary-color); border-radius:8px; width:90%; max-width:900px; max-height:80vh;
        display:flex; flex-direction:column; box-shadow:0 5px 20px rgba(0,0,0,0.15);
        transform: scale(0.9); transition: transform 0.3s ease; overflow: hidden;
    `;

    content.innerHTML = `
        <div style="background:#4a6cf7; color:white; padding:12px 16px; display:flex; justify-content:space-between; align-items:center;">
            <h3 style="margin:0; font-size:1.3em; font-weight:500; background:none; border:none; color:white;"><i class="bi bi-server"></i> <span data-translate="edit_ip_database"></span></h3>
            <div style="display:flex; align-items:center; gap:8px;">
                <button class="fullscreenBtn" data-title="fullscreen" style="
                    background:white;
                    border:none;
                    color:#4a6cf7;
                    font-size:1.1em;
                    cursor:pointer;
                    width:25px;
                    height:25px;
                    opacity: 1 !important;
                    border-radius:6px;
                    display:flex;
                    align-items:center;
                    justify-content:center;
                    transition: transform 0.2s, color 0.2s;
                "
                onmouseover="this.firstElementChild.style.color='#1a73e8'; this.style.transform='scale(1.1)';"
                onmouseout="this.firstElementChild.style.color='#4a6cf7'; this.style.transform='scale(1)';">
                    <i class="bi bi-arrows-fullscreen"></i>
                </button>
        
                <button class="closeBtn" data-title="close" style="
                    background:white;
                    border:none;
                    color:#4a6cf7;
                    font-size:1.1em;
                    cursor:pointer;
                    width:25px;
                    height:25px;
                    border-radius:6px;
                    display:flex;
                    align-items:center;
                    justify-content:center;
                    transition: transform 0.2s, color 0.2s;
                "
                onmouseover="this.firstElementChild.style.color='#1a73e8'; this.style.transform='scale(1.1)';"
                onmouseout="this.firstElementChild.style.color='#4a6cf7'; this.style.transform='scale(1)';">
                    <i class="bi bi-x-lg"></i>
                </button>
            </div>
        </div>

        <div style="flex:1; position:relative;">
            <div id="loadingIndicator" style="
                position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);
                text-align: center; color: #666; font-size: 14px; z-index: 10;
            ">
                <div style="margin-bottom: 10px;">
                    <div style="display: inline-block; width: 20px; height: 20px; border: 2px solid #f3f3f3; border-top: 2px solid #4a6cf7; border-radius: 50%; animation: spin 1s linear infinite;"></div>
                </div>
                <span data-translate="loading_editor"></span>
            </div>
            <div id="editorContainer" style="display: none; width:100%; height:450px;"></div>
        </div>
        <div style="padding:12px 16px; background:#f8f9fa; display:flex; justify-content:flex-end; border-radius:0 0 8px 8px;">
            <button class="cbi-button cbi-button-apply" data-translate="clear"></button>
            <button class="cbi-button cbi-button-remove" data-translate="close"></button>
            <button class="cbi-button cbi-button-save" data-translate="save"></button>
        </div>
        <style>
            @keyframes spin {
                0% { transform: rotate(0deg); }
                100% { transform: rotate(360deg); }
            }
            .fullscreen-mode {
                position: fixed !important;
                top: 0 !important;
                left: 0 !important;
                width: 100vw !important;
                height: 100vh !important;
                max-width: none !important;
                max-height: none !important;
                border-radius: 0 !important;
                z-index: 20000 !important;
            }
            .fullscreen-mode .fullscreenBtn svg {
                transform: rotate(180deg);
            }
        </style>
    `;

    overlay.appendChild(content);
    document.body.appendChild(overlay);
    setTimeout(() => { overlay.style.opacity='1'; content.style.transform='scale(1)'; }, 10);

    if (typeof updateUIText === 'function') {
        updateUIText();
    }

    let codeMirrorEditor = null;
    let isFullscreen = false;

    const toggleFullscreen = () => {
        isFullscreen = !isFullscreen;
        if (isFullscreen) {
            content.classList.add('fullscreen-mode');
            setTimeout(() => {
                if (codeMirrorEditor) {
                    const headerHeight = content.querySelector('div[style*="background:#4a6cf7"]').offsetHeight;
                    const footerHeight = content.querySelector('div[style*="background:#f8f9fa"]').offsetHeight;
                    const availableHeight = window.innerHeight - headerHeight - footerHeight;
                
                    codeMirrorEditor.setSize('100%', availableHeight + 'px');
                    codeMirrorEditor.refresh();
                }
            }, 100);
        } else {
            content.classList.remove('fullscreen-mode');
            setTimeout(() => {
                if (codeMirrorEditor) {
                    codeMirrorEditor.setSize('100%', '450px');
                    codeMirrorEditor.refresh();
                }
            }, 100);
        }
    };

    content.querySelector('.cbi-button-apply').addEventListener('click', async () => {
        const translations = languageTranslations[currentLang] || languageTranslations['zh'];
        const defaultText = translations["clear_confirm"] || "Are you sure to clear the IP database?";

        showGlobalModal({
            iconHTML: '<i class="fa-solid fa-broom" style="margin-right:5px;"></i>',
            defaultText: defaultText,
            onConfirm: async () => {
                try {
                    const res = await fetch('/luci-static/spectra/bgm/edit_ip_cache.php', {
                        method: 'POST',
                        headers: {'Content-Type':'application/json'},
                        body: JSON.stringify({})
                    });
                    const data = await res.json();

                    if (data.success) {
                        const message = translations["clear_success"] || "IP database cleared";
                        showLogMessage(message);
                        speakMessage(message);

                        if (codeMirrorEditor) {
                            codeMirrorEditor.setValue('{}');
                        }
                    } else {
                        const message = translations["clear_fail"] || "Clear failed";
                        showLogMessage(message);
                        speakMessage(message);
                    }
                } catch(e) {
                    const message = translations["clear_fail"] || "Clear failed";
                    showLogMessage(message);
                    speakMessage(message);
                    console.error(e);
                }
            }
        });
    });

    const closeModal = () => {
        overlay.style.opacity='0';
        content.style.transform='scale(0.9)';
        setTimeout(() => {
            if (codeMirrorEditor && typeof codeMirrorEditor.toTextArea === 'function') {
                try {
                    codeMirrorEditor.toTextArea();
                } catch(e) {
                    console.warn('Error destroying CodeMirror:', e);
                }
            }
            codeMirrorEditor = null;
            if (overlay.parentNode) {
                overlay.parentNode.removeChild(overlay);
            }
        }, 300);
    };

    content.querySelector('.fullscreenBtn').addEventListener('click', toggleFullscreen);
    content.querySelector('.closeBtn').addEventListener('click', closeModal);
    content.querySelector('.cbi-button-remove').addEventListener('click', closeModal);

    try {
        const [_, jsonData] = await Promise.all([
            loadCodeMirror(),
            fetch('/luci-static/spectra/bgm/ip_cache.json?_=' + Date.now())
                .then(r => r.json())
                .catch(() => ({}))
        ]);

        content.querySelector('#loadingIndicator').style.display = 'none';
        content.querySelector('#editorContainer').style.display = 'block';

        const editorContainer = content.querySelector('#editorContainer');
        codeMirrorEditor = CodeMirror(editorContainer, {
            value: JSON.stringify(jsonData, null, 2),
            mode: 'application/json',
            theme: 'material',
            lineNumbers: true,
            lineWrapping: true,
            indentUnit: 2,
            tabSize: 2,
            autoCloseBrackets: true,
            matchBrackets: true,
            foldGutter: true,
            lint: {delay: 300},
            gutters: ['CodeMirror-lint-markers', 'CodeMirror-linenumbers', 'CodeMirror-foldgutter'],
            extraKeys: {
                'Ctrl-Q': function(cm) {
                    cm.foldCode(cm.getCursor());
                },
                'F11': function(cm) {
                    toggleFullscreen();
                },
                'Esc': function(cm) {
                    if (isFullscreen) {
                        toggleFullscreen();
                    }
                }
            }
        });

        codeMirrorEditor.setSize('100%', '450px');
        
        setTimeout(() => {
            if (codeMirrorEditor && codeMirrorEditor.getValue) {
                try {
                    const currentValue = codeMirrorEditor.getValue();
                    if (currentValue.trim()) {
                        const formatted = JSON.stringify(JSON.parse(currentValue), null, 2);
                        codeMirrorEditor.setValue(formatted);
                        codeMirrorEditor.setCursor(0, 0);
                    }
                } catch(e) {
                    console.warn('JSON formatting failed:', e);
                }
            }
        }, 200);

    } catch (error) {
        console.error('Failed to load CodeMirror or JSON data:', error);
        content.querySelector('#loadingIndicator').innerHTML = `
            <div style="color: #d32f2f;">
            </div>
        `;
    }

    content.querySelector('.cbi-button-save').addEventListener('click', () => {
        const translations = languageTranslations[currentLang] || languageTranslations['zh'];
        if (!codeMirrorEditor) {
            alert(translations["save_fail"] || "Save failed");
            return;
        }

        let newContent;
        try { 
            newContent = JSON.parse(codeMirrorEditor.getValue()); 
        } catch(e) { 
            alert(translations["json_error"] || "JSON format error, please check!"); 
            return; 
        }

        fetch('/luci-static/spectra/bgm/edit_ip_cache.php', {
            method:'POST',
            headers:{'Content-Type':'application/json'},
            body: JSON.stringify(newContent)
        })
        .then(r => r.json())
        .then(res => {
            if(res.success) { 
                alert(translations["save_success"] || "Saved successfully");
                closeModal(); 
            } else {
                alert(translations["save_fail"] || "Save failed");
            }
        })
        .catch(() => alert(translations["save_fail"] || "Save failed"));
    });
}

document.getElementById('openEditModal').addEventListener('click', showEditModal);
</script>

<script>
function pingHost(id, name, url) {    
    const translations = languageTranslations[currentLang] || languageTranslations['zh'];
    const normal = document.getElementById(`${id}-normal`);
    const gray = document.getElementById(`${id}-gray`);
    const overlay = document.getElementById('result-overlay');
    const start = performance.now();

    fetch(url, { mode: 'no-cors' })
        .then(() => {
            const end = performance.now();
            const ping = Math.round(end - start);
            normal.style.display = 'inline';
            gray.style.display = 'none';

            let color = '#00c800';
            if (ping > 300) {
                color = 'red';
            } else if (ping > 150) {
                color = 'orange';
            }

            overlay.innerHTML = `${name} ${translations.ping}: ${ping} ms`;
            overlay.style.color = color;
            overlay.style.display = 'block';
            clearTimeout(overlay.timer);
            overlay.timer = setTimeout(() => {
                overlay.style.display = 'none';
            }, 5000);
        })
        .catch(() => {
            normal.style.display = 'none';
            gray.style.display = 'inline';
            overlay.innerHTML = `${name} ${translations.timeout}`;
            overlay.style.color = 'red';
            overlay.style.display = 'block';
            clearTimeout(overlay.timer);
            overlay.timer = setTimeout(() => {
                overlay.style.display = 'none';
            }, 5000);
        });
}

function checkAllSites() {
    const sites = [
        {id: 'baidu', name: 'Baidu', url: 'https://www.baidu.com'},
        {id: 'taobao', name: 'Taobao', url: 'https://www.taobao.com'},
        {id: 'google', name: 'Google', url: 'https://www.google.com'},
        {id: 'youtube', name: 'YouTube', url: 'https://www.youtube.com'}
    ];
    sites.forEach(site => {
        const normal = document.getElementById(`${site.id}-normal`);
        const gray = document.getElementById(`${site.id}-gray`);
        fetch(site.url, { mode: 'no-cors' })
            .then(() => {
                normal.style.display = 'inline';
                gray.style.display = 'none';
            })
            .catch(() => {
                normal.style.display = 'none';
                gray.style.display = 'inline';
            });
    });
}

window.addEventListener('load', () => {
    checkAllSites();
    setInterval(checkAllSites, 180000);
    setTimeout(() => {
        const elements = document.querySelectorAll('[id*="_status"]');
        
        elements.forEach((element, index) => {
            setTimeout(() => {
                element.click();
            }, index * 1000);
        });
    }, 3000);
});
</script>

<style>
.weather-log-box {
    position: fixed;
    left: 20px;
    padding: 12px 16px;
    background: var(--sand-bg);
    color: white;
    border-radius: 8px;
    z-index: 9999;
    max-width: 320px;
    font-size: 15px;
    word-wrap: break-word;
    line-height: 1.5;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.15);
    border: 1px solid rgba(255, 255, 255, 0.15);
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(2px);
    transform: translateY(0);
    opacity: 0;
    animation: scrollUp 12s cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards;
    display: inline-block;
    margin-bottom: 10px;
    transition: transform 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);
}
@keyframes scrollUp {
    0% { top: 90%; opacity: 0; }
    20% { opacity: 1; }
    80% { top: 50%; opacity: 1; }
    100% { top: 45%; opacity: 0; }
}
.weather-log-box.exiting { animation: fadeOut 0.3s forwards; }
@keyframes fadeOut { to { opacity: 0; transform: translateY(-20px) scale(0.95); } }
.weather-log-content { padding: 6px 20px 6px 8px; color: white; }
.weather-close-btn {
    position: absolute;
    top: 6px;
    right: 10px;
    background: transparent;
    border: none;
    color: inherit;
    cursor: pointer;
    font-size: 20px;
    line-height: 1;
    opacity: 0;
    pointer-events: none;
    transition: opacity 0.2s;
}
.weather-log-box:hover .weather-close-btn { opacity: 0.7; pointer-events: auto; }
.weather-log-box:hover .weather-close-btn:hover { opacity: 1; }
.weather-log-icon { display: inline-block; width: 20px; height: 20px; margin-right: 3px; vertical-align: middle; }
.weather-log-box.error { background: linear-gradient(145deg, #ff4444, #cc0000); }
.weather-log-box.warning { background: linear-gradient(145deg, #ffc107, #ffab00); }
.weather-log-box.info { background: linear-gradient(145deg, #2196F3, #1976D2); }
</style>

<div id="cityModal" 
     style="display:none; 
            position:fixed; 
            top:50%; 
            left:50%; 
            transform:translate(-50%, -50%); 
            width:550px; 
            background: var(--bg-container);
            color: var(--text-primary);
            box-shadow:0 4px 15px rgba(0,0,0,0.4); 
            z-index:9999;
            border-radius:12px;">
  <div class="music-modal-header" style="border-top-left-radius:12px; border-top-right-radius:12px;">
      <h3 id="modalTitle" style="margin-bottom:15px; font-size:20px; color:var(--accent-color);"></h3>
  </div>
  <div style="padding:10px 20px 5px 20px; flex:1; display:flex; flex-direction:column; gap:15px;">
      <input id="cityInput" placeholder="" 
             style="padding:8px; width:100%; border-radius:6px; border:1px solid #ccc;">
      
      <div id="lastUpdated" class="cbi-value-description" 
           style="font-size:13px; color:var(--text-primary); display:none;">
      </div>
  </div>
  <div class="music-modal-footer" style="border-bottom-left-radius:12px; border-bottom-right-radius:12px;">
    <button id="clearCacheBtn" class="cbi-button cbi-button-remove"></button>
    <button id="saveCityBtn" class="cbi-button cbi-button-save"></button>
    <button id="closeCityModal" class="btn cbi-button-neutral"></button>
  </div>
</div>

<script>
const showLogMessage = (function() {
    const activeLogs = new Set();
    const BASE_OFFSET = 20;
    const MARGIN = 10;

    function createIcon(type) {
        const icons = {
            error: 'M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z',
            warning: 'M1 21h22L12 2 1 21zm12-3h-2v-2h2v2zm0-4h-2v-4h2v4z',
            info: 'M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z'
        };
        const svg = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="#fff" d="${icons[type] || icons.info}"/></svg>`;
        return `data:image/svg+xml;base64,${btoa(svg)}`;
    }

    function updatePositions() {
        let verticalPos = BASE_OFFSET;
        activeLogs.forEach(log => {
            log.style.transform = `translateY(${verticalPos}px)`;
            verticalPos += log.offsetHeight + MARGIN;
        });
    }

    return function(message, type='info') {
        const logBox = document.createElement('div');
        logBox.className = `weather-log-box ${type}`;
        logBox.innerHTML = `
            <div class="weather-log-content">
                <span class="weather-log-icon" style="background-image:url('${createIcon(type)}')"></span>
                ${decodeURIComponent(message)}
                <button class="weather-close-btn">&times;</button>
            </div>
        `;
        logBox.querySelector('.weather-close-btn').onclick = () => {
            logBox.classList.add('exiting');
            setTimeout(() => { logBox.remove(); activeLogs.delete(logBox); updatePositions(); }, 300);
        };
        logBox.addEventListener('mouseenter', () => logBox.style.animationPlayState = 'paused');
        logBox.addEventListener('mouseleave', () => logBox.style.animationPlayState = 'running');

        document.body.appendChild(logBox);
        activeLogs.add(logBox);
        requestAnimationFrame(() => { updatePositions(); });

        setTimeout(() => {
            logBox.classList.add('exiting');
            setTimeout(() => { logBox.remove(); activeLogs.delete(logBox); updatePositions(); }, 300);
        }, 12000);
    };
})();
</script>

<audio id="bell-audio" preload="auto">
  <source src="/luci-static/spectra/img/bells.mp3" type="audio/mp3">
</audio>

<script>
let city = localStorage.getItem('city') || 'Beijing';
const apiKey = 'fc8bd2637768c286c6f1ed5f1915eb22';
let currentWeatherData = null;

const CACHE_REFRESH_INTERVAL = 30 * 60 * 1000;

const weatherIcon = document.getElementById('weatherIcon');
const weatherText = document.getElementById('weatherText');
const cityNameDisplay = document.getElementById('cityNameDisplay');
const cityInput = document.getElementById('cityInput');
const saveCityBtn = document.getElementById('saveCityBtn');
const setCityBtn = document.getElementById('setCityBtn');
const cityModal = document.getElementById('cityModal');
const closeCityModal = document.getElementById('closeCityModal');
const modalTitle = document.getElementById('modalTitle');
const clearCacheBtn = document.getElementById('clearCacheBtn');
const lastUpdatedDiv = document.getElementById('lastUpdated');

const unifiedLanguageMap = {
    'zh': { api: 'zh-CN', weather: 'zh_cn', display: 'zh' },
    'hk': { api: 'zh-TW', weather: 'zh_tw', display: 'hk' },
    'en': { api: 'en-US', weather: 'en', display: 'en' },
    'ja': { api: 'ja-JP', weather: 'ja', display: 'ja' },
    'ko': { api: 'ko-KR', weather: 'kr', display: 'ko' },
    'fr': { api: 'fr-FR', weather: 'fr', display: 'fr' },
    'de': { api: 'de-DE', weather: 'de', display: 'de' },
    'es': { api: 'es-ES', weather: 'es', display: 'es' },
    'ru': { api: 'ru-RU', weather: 'ru', display: 'ru' },
    'th': { api: 'th-TH', weather: 'th', display: 'th' },
    'bn': { api: 'bn-IN', weather: 'bn', display: 'bn' },
    'ar': { api: 'ar-SA', weather: 'ar', display: 'ar' },
    'vi': { api: 'vi-VN', weather: 'vi', display: 'vi' }
};

const modalTranslations = {
    zh: {
        modalTitle: "设置城市",
        saveBtn: "保存",
        cancelBtn: "取消",
        clearBtn: "清空缓存",
        invalidCityEmpty: "城市不能为空",
        invalidCityChinese: "城市不能包含中文",
        invalidCityFormat: "城市必须以大写英文字母开头",
        citySaved: "已保存城市: {city}",
        cacheCleared: "天气信息已被清空",
        lastUpdated: "最后更新: {time}",
        neverUpdated: "从未更新",
        weatherError: "无法获取天气数据"
    },
    en: {
        modalTitle: "Set City",
        saveBtn: "Save",
        cancelBtn: "Cancel",
        clearBtn: "Clear Cache",
        invalidCityEmpty: "City cannot be empty",
        invalidCityChinese: "City cannot contain Chinese characters",
        invalidCityFormat: "City must start with uppercase English letter",
        citySaved: "City saved: {city}",
        cacheCleared: "Weather data has been cleared",
        lastUpdated: "Last updated: {time}",
        neverUpdated: "Never updated",
        weatherError: "Unable to fetch weather data"
    },
    hk: {
        modalTitle: "設置城市",
        saveBtn: "儲存",
        cancelBtn: "取消",
        clearBtn: "清空緩存",
        invalidCityEmpty: "城市不能為空",
        invalidCityChinese: "城市不能包含中文",
        invalidCityFormat: "城市必須以大寫英文字母開頭",
        citySaved: "已儲存城市: {city}",
        cacheCleared: "天氣信息已被清空",
        lastUpdated: "最後更新: {time}",
        neverUpdated: "從未更新",
        weatherError: "無法獲取天氣資料"
    },
    de: {
        modalTitle: "Stadt festlegen",
        saveBtn: "Speichern",
        cancelBtn: "Abbrechen",
        clearBtn: "Cache löschen",
        invalidCityEmpty: "Stadt darf nicht leer sein",
        invalidCityChinese: "Stadt darf keine chinesischen Zeichen enthalten",
        invalidCityFormat: "Stadt muss mit einem Großbuchstaben beginnen",
        citySaved: "Stadt gespeichert: {city}",
        cacheCleared: "Wetterdaten wurden gelöscht",
        lastUpdated: "Zuletzt aktualisiert: {time}",
        neverUpdated: "Nie aktualisiert",
        weatherError: "Wetterdaten konnten nicht abgerufen werden"
    },
    fr: {
        modalTitle: "Définir la ville",
        saveBtn: "Enregistrer",
        cancelBtn: "Annuler",
        clearBtn: "Effacer le cache",
        invalidCityEmpty: "La ville ne peut pas être vide",
        invalidCityChinese: "La ville ne peut pas contenir de caractères chinois",
        invalidCityFormat: "La ville doit commencer par une lettre majuscule",
        citySaved: "Ville enregistrée: {city}",
        cacheCleared: "Les données météo ont été effacées",
        lastUpdated: "Dernière mise à jour: {time}",
        neverUpdated: "Jamais mis à jour",
        weatherError: "Impossible d’obtenir les données météo"
    },
    ko: {
        modalTitle: "도시 설정",
        saveBtn: "저장",
        cancelBtn: "취소",
        clearBtn: "캐시 지우기",
        invalidCityEmpty: "도시는 비어 있을 수 없습니다",
        invalidCityChinese: "도시에는 한자(중국어)를 포함할 수 없습니다",
        invalidCityFormat: "도시는 영어 대문자로 시작해야 합니다",
        citySaved: "도시 저장됨: {city}",
        cacheCleared: "날씨 정보가 지워졌습니다",
        lastUpdated: "마지막 업데이트: {time}",
        neverUpdated: "업데이트되지 않음",
        weatherError: "날씨 데이터를 가져올 수 없습니다"
    },
    ja: {
        modalTitle: "都市設定",
        saveBtn: "保存",
        cancelBtn: "キャンセル",
        clearBtn: "キャッシュをクリア",
        invalidCityEmpty: "都市は空にできません",
        invalidCityChinese: "都市に漢字を含めることはできません",
        invalidCityFormat: "都市は英語の大文字で始まる必要があります",
        citySaved: "都市を保存しました: {city}",
        cacheCleared: "天気情報がクリアされました",
        lastUpdated: "最終更新: {time}",
        neverUpdated: "更新されていません",
        weatherError: "天気データを取得できませんでした"
    },
    bn: {
        modalTitle: "শহর সেট করুন",
        saveBtn: "সংরক্ষণ",
        cancelBtn: "বাতিল",
        clearBtn: "ক্যাশে সাফ করুন",
        invalidCityEmpty: "শহর খালি থাকতে পারে না",
        invalidCityChinese: "শহরে চীনা অক্ষর থাকতে পারে না",
        invalidCityFormat: "শহরটি ইংরেজি বড় হাতের অক্ষর দিয়ে শুরু করতে হবে",
        citySaved: "শহর সংরক্ষিত: {city}",
        cacheCleared: "আবহাওয়ার তথ্য সাফ করা হয়েছে",
        lastUpdated: "সর্বশেষ আপডেট: {time}",
        neverUpdated: "কখনও আপডেট করা হয়নি",
        weatherError: "আবহাওয়ার ডেটা আনতে ব্যর্থ"
    },
    vi: {
        modalTitle: "Đặt thành phố",
        saveBtn: "Lưu",
        cancelBtn: "Hủy",
        clearBtn: "Xóa bộ nhớ cache",
        invalidCityEmpty: "Thành phố không được để trống",
        invalidCityChinese: "Thành phố không được chứa chữ Hán",
        invalidCityFormat: "Thành phố phải bắt đầu bằng chữ cái tiếng Anh viết hoa",
        citySaved: "Đã lưu thành phố: {city}",
        cacheCleared: "Thông tin thời tiết đã được xóa",
        lastUpdated: "Cập nhật lần cuối: {time}",
        neverUpdated: "Chưa bao giờ cập nhật",
        weatherError: "Không thể lấy dữ liệu thời tiết"
    },
    tr: {
        modalTitle: "Şehir Ayarla",
        saveBtn: "Kaydet",
        cancelBtn: "İptal",
        clearBtn: "Önbelleği Temizle",
        invalidCityEmpty: "Şehir boş olamaz",
        invalidCityChinese: "Şehir Çince karakter içeremez",
        invalidCityFormat: "Şehir büyük İngilizce harf ile başlamalı",
        citySaved: "Şehir kaydedildi: {city}",
        cacheCleared: "Hava durumu bilgileri temizlendi",
        lastUpdated: "Son güncelleme: {time}",
        neverUpdated: "Hiç güncellenmedi",
        weatherError: "Hava durumu verileri alınamadı"
    },
    ar: {
        modalTitle: "تعيين المدينة",
        saveBtn: "حفظ",
        cancelBtn: "إلغاء",
        clearBtn: "مسح الذاكرة المؤقتة",
        invalidCityEmpty: "لا يمكن أن تكون المدينة فارغة",
        invalidCityChinese: "لا يمكن أن تحتوي المدينة على أحرف صينية",
        invalidCityFormat: "يجب أن تبدأ المدينة بحرف إنجليزي كبير",
        citySaved: "تم حفظ المدينة: {city}",
        cacheCleared: "تم مسح معلومات الطقس",
        lastUpdated: "آخر تحديث: {time}",
        neverUpdated: "لم يتم التحديث مطلقًا",
        weatherError: "تعذر الحصول على بيانات الطقس"
    },
    ru: {
        modalTitle: "Установить город",
        saveBtn: "Сохранить",
        cancelBtn: "Отмена",
        clearBtn: "Очистить кэш",
        invalidCityEmpty: "Город не может быть пустым",
        invalidCityChinese: "Город не может содержать китайские иероглифы",
        invalidCityFormat: "Город должен начинаться с заглавной английской буквы",
        citySaved: "Город сохранен: {city}",
        cacheCleared: "Информация о погоде была очищена",
        lastUpdated: "Последнее обновление: {time}",
        neverUpdated: "Никогда не обновлялось",
        weatherError: "Не удалось получить данные о погоде"
    },
    es: {
        modalTitle: "Establecer ciudad",
        saveBtn: "Guardar",
        cancelBtn: "Cancelar",
        clearBtn: "Limpiar caché",
        invalidCityEmpty: "La ciudad no puede estar vacía",
        invalidCityChinese: "La ciudad no puede contener caracteres chinos",
        invalidCityFormat: "La ciudad debe comenzar con letra mayúscula",
        citySaved: "Ciudad guardada: {city}",
        cacheCleared: "La información del clima ha sido borrada",
        lastUpdated: "Última actualización: {time}",
        neverUpdated: "Nunca actualizado",
        weatherError: "No se pudieron obtener los datos del clima"
    }
};

async function getModalLang() {
    try {
        const lang = await getRealTimeLanguage();
        return modalTranslations[lang] ? lang : 'en';
    } catch(e) {
        return 'en';
    }
}

async function performTranslation(text, targetLang) {
    if (!text) return text;
    const apiTargetLang = unifiedLanguageMap[targetLang.toLowerCase()]?.api || targetLang.toLowerCase();
    const sourceLang = 'en';
    try {
        const url = `https://api.mymemory.translated.net/get?q=${encodeURIComponent(text)}&langpair=${sourceLang}|${apiTargetLang}`;
        const response = await fetch(url);
        if (!response.ok) throw new Error('Translation API error');
        const data = await response.json();
        if (data.responseStatus === 200 && data.responseData && data.responseData.translatedText) {
            return data.responseData.translatedText;
        } else {
            throw new Error('Invalid translation response');
        }
    } catch (error) {
        console.error('Translation error:', error);
        return text;
    }
}

async function updateModalLanguage() {
    const lang = await getModalLang();
    modalTitle.textContent = modalTranslations[lang].modalTitle;
    saveCityBtn.textContent = modalTranslations[lang].saveBtn;
    closeCityModal.textContent = modalTranslations[lang].cancelBtn;
    clearCacheBtn.textContent = modalTranslations[lang].clearBtn; 
    cityInput.placeholder = modalTranslations[lang].modalTitle;
}

async function clearWeatherCache() {
    try {
        const response = await fetch('/luci-static/spectra/bgm/weather_translation.php?action=clear');
        if (response.ok) {
            await showModalMessage("cacheCleared");           
            await updateLastUpdatedDisplay();
            console.log('Weather cache cleared successfully');
        } else {
            throw new Error('Failed to clear cache');
        }
    } catch (error) {
        console.error('Error clearing weather cache:', error);
        showLogMessage(encodeURIComponent('Failed to clear cache'), 'error');
    }
}

async function updateLastUpdatedDisplay() {
    try {
        const cache = await readTranslationCache(city);
        const lang = await getModalLang();
        
        if (cache.updated) {
            const date = new Date(cache.updated);
            const formattedTime = date.toLocaleString('zh-CN', {
                year: 'numeric',
                month: 'numeric',
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit',
                second: '2-digit',
                hour12: false
            }).replace(/\//g, '/');
            
            lastUpdatedDiv.textContent = modalTranslations[lang].lastUpdated.replace('{time}', formattedTime);
            lastUpdatedDiv.style.display = 'block';
        } else {
            lastUpdatedDiv.textContent = modalTranslations[lang].neverUpdated;
            lastUpdatedDiv.style.display = 'block';
        }
    } catch (error) {
        console.error('Error updating last updated display:', error);
        lastUpdatedDiv.style.display = 'none';
    }
}

async function showModalMessage(key, params={}) {
    const lang = await getModalLang();
    let msg = modalTranslations[lang][key] || key;
    for(const k in params) msg = msg.replace(`{${k}}`, params[k]);
    showLogMessage(encodeURIComponent(msg), key === 'citySaved' || key === 'cacheCleared' ? 'info' : 'warning');
    if (typeof speakMessage === 'function') speakMessage(msg);
}

function validateCity(value) {
    const chinesePattern = /[\u4e00-\u9fff]/;
    const startsUpper = /^[A-Z]/;
    if(!value) return "invalidCityEmpty";
    if(chinesePattern.test(value)) return "invalidCityChinese";
    if(!startsUpper.test(value)) return "invalidCityFormat";
    return null;
}

async function saveCity() {
    const value = cityInput.value.trim();
    const errKey = validateCity(value);
    if(errKey) {
        await showModalMessage(errKey);
        return;
    }
    city = value;
    localStorage.setItem('city', city);
    await showModalMessage("citySaved", {city});
    fetchWeather();
    closeModal();
}

async function openCityModal() {
    cityInput.value = city;
    cityModal.style.display = 'block';
    await updateModalLanguage();
    await updateLastUpdatedDisplay(); 
}

clearCacheBtn.addEventListener('click', clearWeatherCache);

function closeModal() {
    cityModal.style.display = 'none';
}

function getWeatherColor(iconCode) {
    switch(iconCode) {
        case '01d': return 'oklch(var(--l) var(--c) var(--base-hue-1))';
        case '01n': return 'oklch(var(--l) var(--c) var(--base-hue))';
        case '02d': return 'oklch(var(--l) var(--c) var(--base-hue-2))';
        case '02n': return 'oklch(var(--l) var(--c) var(--base-hue-2))';
        case '03d': return 'oklch(var(--l) var(--c) var(--base-hue-3))';
        case '03n': return 'oklch(var(--l) var(--c) var(--base-hue-3))';
        case '04d': return 'oklch(var(--l) var(--c) var(--base-hue-4))';
        case '04n': return 'oklch(var(--l) var(--c) var(--base-hue-4))';
        case '09d': return 'oklch(var(--l) var(--c) var(--base-hue-5))';
        case '09n': return 'oklch(var(--l) var(--c) var(--base-hue-5))';
        case '10d': return 'oklch(var(--l) var(--c) var(--base-hue-6))';
        case '10n': return 'oklch(var(--l) var(--c) var(--base-hue-6))';
        case '11d': return 'oklch(var(--l) var(--c) var(--base-hue-7))';
        case '11n': return 'oklch(var(--l) var(--c) var(--base-hue-7))';
        case '13d': return 'oklch(var(--l) var(--c) var(--base-hue-1))';
        case '13n': return 'oklch(var(--l) var(--c) var(--base-hue-1))';
        case '50d': return 'oklch(var(--l) var(--c) var(--base-hue-2))';
        case '50n': return 'oklch(var(--l) var(--c) var(--base-hue-2))';
        default: return 'oklch(var(--l) var(--c) var(--base-hue))';
    }
}

function owmCodeToWiClass(code) {
    const map = {
        '01d': 'wi-day-sunny', '01n': 'wi-night-clear',
        '02d': 'wi-day-cloudy', '02n': 'wi-night-cloudy',
        '03d': 'wi-cloud', '03n': 'wi-cloud',
        '04d': 'wi-cloudy', '04n': 'wi-cloudy',
        '09d': 'wi-showers', '09n': 'wi-showers',
        '10d': 'wi-day-rain', '10n': 'wi-night-alt-rain',
        '11d': 'wi-thunderstorm', '11n': 'wi-thunderstorm',
        '13d': 'wi-snow', '13n': 'wi-snow',
        '50d': 'wi-fog', '50n': 'wi-fog'
    };
    return map[code] || 'wi-na';
}

async function getWeatherLangParam() {
    try {
        let lang = (await getRealTimeLanguage()).toLowerCase();
        return unifiedLanguageMap[lang]?.weather || 'en';
    } catch (e) {
        return 'en';
    }
}

async function readTranslationCache(city) {
    try {
        const res = await fetch('/luci-static/spectra/bgm/weather_translation.php');
        if (!res.ok) throw new Error('Failed to load cache: ' + res.status);
        const data = await res.json();
        const cityData = data.cities?.[city] || {};
        return {
            translations: cityData.translations || {},
            updated: cityData.updated || null
        };
    } catch (e) {
        console.error('readTranslationCache error:', e);
        return { translations: {}, updated: null };
    }
}

async function saveTranslationCache(city, translations, extra = {}) {
    try {
        const payload = { 
            city: city, 
            translations: translations,
            icon: extra.icon || ''
        };
        const res = await fetch('/luci-static/spectra/bgm/weather_translation.php', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload)
        });
        const text = await res.text();
        console.log('saveTranslationCache resp:', res.status, text);
        return res.ok;
    } catch (e) {
        console.error('saveTranslationCache error:', e);
        return false;
    }
}

function isCacheExpired(updatedTime) {
    if (!updatedTime) return true;
    const updated = new Date(updatedTime);
    return (Date.now() - updated.getTime()) > CACHE_REFRESH_INTERVAL;
}

async function translateWeatherDesc(descList) {
    if (!Array.isArray(descList) || descList.length === 0) return { text: '', city: city };
    const cache = await readTranslationCache(city);
    const lang = (await getRealTimeLanguage()).toLowerCase();
    const existingTranslations = cache.translations || {};
    const currentLangData = existingTranslations[lang]
        ? JSON.parse(JSON.stringify(existingTranslations[lang]))
        : { weather: {}, city: '' };
    const cachedWeather = currentLangData.weather || {};
    let cachedCity = currentLangData.city || '';
    const result = [];
    const translationsToUpdate = { weather: {}, city: cachedCity };
    const fullDesc = descList.join(', ');
    if (cachedWeather[fullDesc]) {
        result.push(cachedWeather[fullDesc]);
    } else {
        try {
            const t = await performTranslation(fullDesc, lang);
            translationsToUpdate.weather[fullDesc] = t;
            result.push(t);
        } catch {
            translationsToUpdate.weather[fullDesc] = fullDesc;
            result.push(fullDesc);
        }
    }
    if (!cachedCity) {
        try {
            const tCity = await performTranslation(city, lang);
            translationsToUpdate.city = tCity;
            cachedCity = tCity;
        } catch {
            translationsToUpdate.city = city;
            cachedCity = city;
        }
    } else {
        translationsToUpdate.city = cachedCity;
    }
    const updatedCache = JSON.parse(JSON.stringify(existingTranslations));
    updatedCache[lang] = {
        weather: { ...cachedWeather, ...translationsToUpdate.weather },
        city: translationsToUpdate.city
    };
    await saveTranslationCache(city, updatedCache);
    return { text: result.join('，'), city: cachedCity };
}

function hasUntranslatedContent(langData) {
    if (!langData || !langData.weather) return true;
    for (const [key, value] of Object.entries(langData.weather)) {
        if (!isProperlyTranslated(value, key, 'any')) {
            return true;
        }
    }
    if (langData.city && !isProperlyTranslated(langData.city, langData.city, 'any')) {
        return true;
    }
    return false;
}

function isProperlyTranslated(translatedText, originalText, lang) {
    if (translatedText === originalText) {
        return false;
    }
    if (lang !== 'en' && isMostlyEnglish(translatedText)) {
        return false;
    }
    if (['zh', 'ja', 'ko', 'hk', 'tw'].includes(lang) && !containsNonLatin(translatedText)) {
        return false;
    }
    return true;
}

function isMostlyEnglish(text) {
    const englishPattern = /^[a-zA-Z\s.,!?']+$/;
    return englishPattern.test(text);
}

function containsNonLatin(text) {
    const nonLatinPattern = /[^\u0000-\u007F]/;
    return nonLatinPattern.test(text);
}

setInterval(async () => {
    const cache = await readTranslationCache(city);
    if (isCacheExpired(cache.updated)) {
        if (currentWeatherData) {
            const descList = currentWeatherData.weather.map(w => w.description);
            await translateWeatherDesc(descList);
        }
    }
}, CACHE_REFRESH_INTERVAL);

async function updateWeatherUI(data, iconCode) {
    document.getElementById('loadingIcon').style.display = 'none';
    const cache = await readTranslationCache(city);
    const lang = (await getRealTimeLanguage()).toLowerCase();
    const cachedIcon = cache.translations?.[lang]?.lastIcon || iconCode;
    const weatherIcon = document.getElementById('weatherIcon');
    weatherIcon.className = `wi ${owmCodeToWiClass(cachedIcon)}`;
    weatherIcon.style.display = 'inline-block';
    weatherIcon.style.color = getWeatherColor(cachedIcon);
    const temp = Math.round(data.main.temp);
    const descList = data.weather.map(w => w.description);
    const { text: translatedDesc, city: translatedCity } = await translateWeatherDesc(descList);
    document.getElementById('weatherText').textContent = `${translatedDesc} ${temp}℃`;
    cityNameDisplay.textContent = translatedCity;
    const updatedCache = {
        ...cache.translations,
        [lang]: {
            ...cache.translations?.[lang],
            lastIcon: cachedIcon
        }
    };
    await saveTranslationCache(city, updatedCache, { icon: cachedIcon });
}

async function updateCityNameDisplay(name) {
    try {
        const lang = await getRealTimeLanguage();
        const translatedCityName = await performTranslation(name, lang);
        cityNameDisplay.textContent = translatedCityName;
    } catch(e) {
        cityNameDisplay.textContent = name;
    }
}

async function fetchWeather() {
    const langParam = await getWeatherLangParam();
    const url = `https://api.openweathermap.org/data/2.5/weather?q=${encodeURIComponent(city)}&appid=${apiKey}&units=metric&lang=${langParam}`;
    const loadingIcon = document.getElementById('loadingIcon');
    loadingIcon.style.display = 'inline-block';
    try {
        const res = await fetch(url);
        if (!res.ok) {
            throw new Error('Network not OK');
        }
        const data = await res.json();
        if (data.weather && data.main) {
            currentWeatherData = data;
            const iconCode = data.weather[0].icon || '';
            await updateWeatherUI(data, iconCode);
        } else {
            throw new Error('Invalid data');
        }
    } catch (err) {
        const lang = await getModalLang();
        weatherText.textContent = modalTranslations[lang].weatherError;
        weatherIcon.style.display = 'none';
        if (typeof speakMessage === 'function') {
            speakMessage(modalTranslations[lang].weatherError);
        }
    } finally {
        loadingIcon.style.display = 'none';
    }
}

setCityBtn.addEventListener('click', openCityModal);
closeCityModal.addEventListener('click', closeModal);
saveCityBtn.addEventListener('click', saveCity);

document.addEventListener('DOMContentLoaded', async () => {
    await updateModalLanguage();
    fetchWeather();
    setInterval(fetchWeather, 10*60*1000);
});

let lastSpokenHour = null;
const audio = document.getElementById("bell-audio");

document.addEventListener("click", () => {
    audio.muted = false;
    audio.play().then(() => {
        audio.pause();
        audio.currentTime = 0;
    }).catch(() => {});
}, { once: true });

async function speakTimeNow() {
    const now = new Date();
    const hour = now.getHours();
    const minute = now.getMinutes();
    const second = now.getSeconds();
    if (minute === 59 && second === 50 && lastSpokenHour !== (hour + 1) % 24) {
        lastSpokenHour = (hour + 1) % 24;
        try {
            audio.currentTime = 0;
            await audio.play();
            setTimeout(() => {
                doSpeak(lastSpokenHour);
            }, 10000);
        } catch {}
    }
}

async function doSpeak(hour) {
    const lang = await getRealTimeLanguage();
    let message = '';
    if (lang.startsWith('zh') || lang.startsWith('zh-tw') || lang.startsWith('hk')) {
        let period = '';
        if (hour >= 0 && hour < 6) period = '凌晨';
        else if (hour >= 6 && hour < 12) period = '早上';
        else if (hour >= 12 && hour < 18) period = '下午';
        else period = '晚上';
        message = `整点报时，现在是北京时间${period}${hour}点整`;
    } else {
        const displayHour = hour % 12 || 12;
        const period = hour >= 12 ? 'PM' : 'AM';
        message = `It is now ${displayHour} ${period}.`;
    }
    if (typeof speakMessage === 'function') {
        speakMessage(message);
    }
}

setInterval(speakTimeNow, 1000);

async function refreshUIAfterLanguageChange() {
    await updateModalLanguage();
    const cache = await readTranslationCache(city);
    const lang = (await getRealTimeLanguage()).toLowerCase();
    if (isCacheExpired(cache.updated) || !cache.translations?.[lang]?.weather) {
        await fetchWeather();
    } else if (currentWeatherData) {
        await updateWeatherUI(currentWeatherData);
    }
}

let lastLang = null;
setInterval(async () => {
    const lang = await getRealTimeLanguage();
    if (lang !== lastLang) {
        lastLang = lang;
        refreshUIAfterLanguageChange();
    }
}, 8000);

const weatherCard = document.querySelector('.weather-card');
const loadingIcon = document.getElementById('loadingIcon');

weatherCard.style.cursor = 'pointer';

weatherCard.addEventListener('click', async (event) => {
    if (event.target.closest('#setCityBtn') || event.target.closest('#saveCityBtn')) return;
    loadingIcon.style.display = 'inline-block';
    try {
        await fetchWeather();
    } finally {
        loadingIcon.style.display = 'none';
    }
});
</script>

<script>
let themeLoaderEnabled = localStorage.getItem('themeLoaderEnabled') !== 'false';
let navigationInProgress = false;
let navigationTimeout = null;

const excludedPages = [
    '/admin/system/package-manager',
    '/admin/status/processes',
    '/admin/status/realtime',
    '/admin/system/system-log',
    '/admin/network/diagnostics'
];

function createThemeLoader() {
    const loader = document.createElement('div');
    loader.id = 'theme-loader';
    loader.style.cssText = `
        position: fixed;
        inset: 0;
        background: linear-gradient(
            135deg,
            color-mix(in oklch, var(--bg-body), var(--color-cyan) 10%),
            color-mix(in oklch, var(--bg-container), var(--color-cyan) 8%),
            color-mix(in oklch, var(--bg-body), var(--bg-container) 5%)
        );
        background-size: 400% 400%;
        animation: theme-gradient-move 8s ease infinite;
        z-index: 9999;
        display: none;
        align-items: center;
        justify-content: center;
        transition: all 0.6s cubic-bezier(0.4, 0, 0.2, 1);
        color: var(--text-primary);
        font-family: "Segoe UI", system-ui, sans-serif;
        backdrop-filter: var(--glass-blur);
    `;

    const content = document.createElement('div');
    content.className = 'theme-loader-content';
    content.style.cssText = `
        text-align: center;
        backdrop-filter: var(--glass-blur);
        padding: 3rem 4rem;
        border-radius: var(--radius);
        background: color-mix(in oklch, var(--bg-container), transparent 40%);
        border: var(--glass-border);
        box-shadow: var(--breathing-glow),
                    0 20px 60px oklch(0 0 0 / calc(var(--shadow-intensity) + 0.2));
        animation: theme-loader-float 3s ease-in-out infinite;
        position: relative;
        overflow: hidden;
    `;

    const backgroundEffect = document.createElement('div');
    backgroundEffect.style.cssText = `
        position: absolute;
        top: -50%;
        left: -50%;
        width: 200%;
        height: 200%;
        background: conic-gradient(
            from 0deg,
            var(--accent-color),
            var(--color-cyan),
            var(--color-magenta),
            var(--accent-color)
        );
        opacity: 0.1;
        animation: theme-rotate 10s linear infinite;
        z-index: -1;
    `;

    const iconContainer = document.createElement('div');
    iconContainer.className = 'loader-icon-container';
    iconContainer.style.cssText = `
        position: relative;
        margin-bottom: 2rem;
    `;

    const halo = document.createElement('div');
    halo.style.cssText = `
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 120px;
        height: 120px;
        border: 2px solid var(--accent-color);
        border-radius: 50%;
        animation: theme-pulse 2s ease-out infinite;
        opacity: 0.6;
    `;

    const icon = document.createElement('div');
    icon.className = 'loader-icon';
    icon.style.cssText = `
        font-size: 4rem;
        animation: theme-bounce 1.5s ease-in-out infinite alternate;
        filter: drop-shadow(0 4px 12px oklch(0 0 0 / 0.3));
        position: relative;
        z-index: 2;
    `;
    icon.textContent = '🌌';

    const title = document.createElement('div');
    title.className = 'loader-title';
    title.style.cssText = `
        font-size: 2.5rem;
        font-weight: 700;
        margin-bottom: 0.5rem;
        font-family: 'Cinzel Decorative', serif;
        background: linear-gradient(135deg, var(--text-primary), var(--accent-color), var(--color-magenta));
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        text-shadow: 0 2px 4px oklch(0 0 0 / 0.2);
        letter-spacing: 2px;
        animation: theme-title-glow 2s ease-in-out infinite alternate;
    `;
    title.textContent = 'SPECTRA';

    const subtitle = document.createElement('div');
    subtitle.className = 'loader-subtitle';
    subtitle.style.cssText = `
        font-size: 1rem;
        opacity: 0.8;
        color: var(--text-secondary);
        font-family: 'Cinzel Decorative', serif;
        letter-spacing: 1px;
        margin-top: 0.5rem;
    `;
    subtitle.textContent = 'Loading Interface';

    const progressContainer = document.createElement('div');
    progressContainer.style.cssText = `
        width: 200px;
        height: 4px;
        background: color-mix(in oklch, var(--bg-container), transparent 60%);
        border-radius: 2px;
        margin: 2rem auto 0;
        overflow: hidden;
        position: relative;
    `;

    const progressBar = document.createElement('div');
    progressBar.className = 'loader-progress';
    progressBar.style.cssText = `
        position: absolute;
        top: 0;
        left: 0;
        height: 100%;
        width: 30%;
        background: linear-gradient(90deg, 
            var(--accent-color), 
            var(--color-cyan),
            var(--accent-color)
        );
        background-size: 200% 100%;
        animation: theme-progress 2s ease-in-out infinite, theme-shimmer 3s ease-in-out infinite;
        border-radius: 2px;
    `;

    iconContainer.appendChild(halo);
    iconContainer.appendChild(icon);
    content.appendChild(backgroundEffect);
    content.appendChild(iconContainer);
    content.appendChild(title);
    content.appendChild(subtitle);
    content.appendChild(progressContainer);
    progressContainer.appendChild(progressBar);
    loader.appendChild(content);
    document.body.appendChild(loader);

    const style = document.createElement('style');
    style.textContent = `
        @keyframes theme-gradient-move {
            0%, 100% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
        }
        
        @keyframes theme-rotate {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        @keyframes theme-bounce {
            0% { 
                transform: scale(1) translateY(0px) rotate(0deg);
                filter: drop-shadow(0 4px 12px oklch(0 0 0 / 0.3));
            }
            100% { 
                transform: scale(1.1) translateY(-10px) rotate(5deg);
                filter: drop-shadow(0 8px 24px var(--accent-color));
            }
        }
        
        @keyframes theme-pulse {
            0%, 100% { 
                transform: translate(-50%, -50%) scale(1);
                opacity: 0.3;
                box-shadow: 0 0 0 0 var(--accent-color);
            }
            50% { 
                transform: translate(-50%, -50%) scale(1.1);
                opacity: 0.6;
                box-shadow: 0 0 0 10px transparent;
            }
        }
        
        @keyframes theme-loader-float {
            0%, 100% { transform: translateY(0px); }
            50% { transform: translateY(-10px); }
        }
        
        @keyframes theme-progress {
            0% { left: -30%; }
            100% { left: 100%; }
        }
        
        @keyframes theme-shimmer {
            0%, 100% { background-position: -200% 0; }
            50% { background-position: 200% 0; }
        }
        
        @keyframes theme-title-glow {
            0% {
                filter: drop-shadow(0 0 5px color-mix(in oklch, var(--accent-color), transparent 50%));
                background-position: 0% 50%;
            }
            100% {
                filter: drop-shadow(0 0 20px var(--accent-color)) 
                        drop-shadow(0 0 30px color-mix(in oklch, var(--color-magenta), transparent 60%));
                background-position: 100% 50%;
            }
        }
        
        .theme-loader-content::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(
                90deg,
                transparent,
                color-mix(in oklch, var(--color-white), transparent 80%),
                transparent
            );
            animation: theme-shine 3s ease-in-out infinite;
        }
        
        @keyframes theme-shine {
            0% { left: -100%; }
            100% { left: 200%; }
        }
    `;
    document.head.appendChild(style);

    return loader;
}

function initThemeLoaderControl() {
    const toggleBtn = document.getElementById('themeLoaderToggle');
    if (!toggleBtn) return;
    
    const icon = toggleBtn.querySelector('i');
    updateToggleIcon(icon);
    
    toggleBtn.addEventListener('click', function() {
        themeLoaderEnabled = !themeLoaderEnabled;
        localStorage.setItem('themeLoaderEnabled', themeLoaderEnabled.toString());
        
        updateToggleIcon(icon);
        
        const translations = languageTranslations[currentLang] || languageTranslations['zh'];
        const logKey = themeLoaderEnabled ? 'theme_loader_enabled_log' : 'theme_loader_disabled_log';
        
        if (translations[logKey]) {
            showLogMessage(translations[logKey]);
            speakMessage(translations[logKey]);
        }
    });
}

function updateToggleIcon(icon) {
    if (icon) {
        icon.style.color = themeLoaderEnabled ? '#0fcc45' : '#666666';
    }
}

function shouldUseLoader(url) {
    if (!themeLoaderEnabled) {
        return false;
    }
    
    const isExcluded = excludedPages.some(path => url.includes(path));
    if (isExcluded) {
        console.log('Theme loader: Page excluded from loader:', url);
        return false;
    }
    
    if (url.includes('#') || !url.includes('/cgi-bin/luci/')) {
        return false;
    }
    
    return true;
}

function hideLoader() {
    const loader = document.getElementById('theme-loader');
    if (!loader) return;
    
    navigationInProgress = false;
    
    if (navigationTimeout) {
        clearTimeout(navigationTimeout);
        navigationTimeout = null;
    }
    
    if (loader.style.display === 'flex') {
        loader.style.opacity = '0';
        setTimeout(() => {
            loader.style.display = 'none';
        }, 600);
    }
}

function showLoader() {
    const loader = document.getElementById('theme-loader');
    if (!loader) return;
    
    loader.style.display = 'flex';
    setTimeout(() => {
        loader.style.opacity = '1';
    }, 10);
}

function enhanceNavigation() {
    const loader = createThemeLoader();
    initThemeLoaderControl();
    
    document.addEventListener('click', (e) => {
        const link = e.target.closest('a');
        if (!link || !link.href) return;
        
        const targetUrl = link.href;
        
        if (!targetUrl.includes('/cgi-bin/luci/')) {
            return;
        }
        
        if (!shouldUseLoader(targetUrl)) {
            return;
        }
        
        e.preventDefault();
        
        if (navigationInProgress) {
            console.log('Theme loader: Navigation already in progress');
            return;
        }
        
        navigationInProgress = true;
        
        console.log('Theme loader: Starting navigation to', targetUrl);
        
        showLoader();
        
        navigationTimeout = setTimeout(() => {
            console.warn('Theme loader: Navigation timeout, forcing redirect to', targetUrl);
            hideLoader();
            window.location.href = targetUrl;
        }, 6000);
        
        const content = document.querySelector('.main-content') || document.body;
        content.classList.add('page-transition', 'page-hidden');
        
        setTimeout(() => {
            try {
                console.log('Theme loader: Executing navigation to', targetUrl);
                window.location.href = targetUrl;
            } catch (error) {
                console.error('Theme loader: Navigation error:', error);
                hideLoader();
                window.location.href = targetUrl;
            }
        }, 800);
    });
    
    function handlePageLoad() {
        console.log('Theme loader: Page loaded, hiding loader');
        hideLoader();
        
        const content = document.querySelector('.main-content') || document.body;
        if (content) {
            content.classList.add('page-transition');
            content.classList.remove('page-hidden');
        }
    }
    
    window.addEventListener('load', handlePageLoad);
    document.addEventListener('DOMContentLoaded', handlePageLoad);
    
    document.addEventListener('visibilitychange', function() {
        if (!document.hidden) {
            setTimeout(handlePageLoad, 100);
        }
    });
    
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', function() {
            const content = document.querySelector('.main-content') || document.body;
            if (content) {
                content.classList.add('page-transition');
                content.classList.remove('page-hidden');
            }
        });
    } else {
        const content = document.querySelector('.main-content') || document.body;
        if (content) {
            content.classList.add('page-transition');
            content.classList.remove('page-hidden');
        }
    }
    
    setTimeout(handlePageLoad, 3000);
}

enhanceNavigation();
</script>

<script>
const muteToggle    = document.getElementById('muteToggle');
  const volumeToggle  = document.getElementById('volumeToggle');
  const volumePanel   = document.getElementById('volumePanel');
  const volumeSlider  = document.getElementById('volumeSlider');
  const muteIconEl    = muteToggle.querySelector('i');
  const volumeIconEl  = volumeToggle.querySelector('i');

  let lastVolume = 1;

  const savedVolume = localStorage.getItem('audioVolume');
  const savedMuted  = localStorage.getItem('audioMuted');
  if (savedVolume !== null) {
    lastVolume = parseFloat(savedVolume);
  }
  audioPlayer.volume = lastVolume;
  volumeSlider.value = lastVolume;
  audioPlayer.muted = (savedMuted === 'true');

  updateVolumeIcon();

  function togglePanel() {
    const isVisible = volumePanel.classList.contains('show');
    if (isVisible) {
      volumePanel.classList.remove('show');
      setTimeout(() => (volumePanel.style.display = 'none'), 200);
    } else {
      volumePanel.style.display = 'block';
      setTimeout(() => volumePanel.classList.add('show'), 10);
    }
  }

  function toggleMute() {
    const translations = languageTranslations[currentLang] || languageTranslations['zh'];    
    audioPlayer.muted = !audioPlayer.muted;
    if (!audioPlayer.muted && audioPlayer.volume === 0) {
      audioPlayer.volume = lastVolume;
      volumeSlider.value = lastVolume;
    }
    localStorage.setItem('audioMuted', audioPlayer.muted);
    updateVolumeIcon();

    const muteMessage = audioPlayer.muted
      ? (translations['mute_on']  || 'Audio muted')
      : (translations['mute_off'] || 'Audio unmuted');
    showLogMessage(muteMessage);
    speakMessage(muteMessage);
  }

  function updateVolumeIcon() {
    let cls;
    if (audioPlayer.muted || audioPlayer.volume === 0) {
      cls = 'bi bi-volume-mute-fill';
    } else if (audioPlayer.volume < 0.5) {
      cls = 'bi bi-volume-down-fill';
    } else {
      cls = 'bi bi-volume-up-fill';
    }
    muteIconEl.className = cls;
    volumeIconEl.className = cls;

    if (!audioPlayer.muted) {
      lastVolume = audioPlayer.volume;
      localStorage.setItem('audioVolume', lastVolume);
    }
  }

  muteToggle.addEventListener('click', e => {
    e.stopPropagation();
    toggleMute();
  });

  volumeToggle.addEventListener('click', e => {
    e.stopPropagation();
    if (e.target === volumeIconEl) {
      toggleMute();
    } else {
      togglePanel();
    }
  });

  document.addEventListener('click', () => {
    if (volumePanel.classList.contains('show')) {
      volumePanel.classList.remove('show');
      setTimeout(() => (volumePanel.style.display = 'none'), 200);
    }
  });

  volumeSlider.addEventListener('input', e => {
    const translations = languageTranslations[currentLang] || languageTranslations['zh'];    
    const vol = Math.round(parseFloat(e.target.value) * 100);

    audioPlayer.volume = e.target.value;
    if (audioPlayer.muted) {
      audioPlayer.muted = false;
      localStorage.setItem('audioMuted', 'false');
    }
    updateVolumeIcon();
    const volumeMessage = translations['volume_change']
      ? translations['volume_change'].replace('{vol}', vol)
      : `Volume adjusted to ${vol}%`;
    showLogMessage(volumeMessage);
    speakMessage(volumeMessage);
  });

  const speedToggle = document.getElementById('speedToggle');
  const speedLabel = document.getElementById('speedLabel');
  const speeds = [0.75, 1, 1.25, 1.5, 1.75, 2];
  let speedIndex = 1;

  const savedSpeed = localStorage.getItem('audioSpeed');
  if (savedSpeed !== null) {
    const idx = speeds.indexOf(parseFloat(savedSpeed));
    if (idx !== -1) {
      speedIndex = idx;
    }
  }

  audioPlayer.playbackRate = speeds[speedIndex];
  speedLabel.textContent = speeds[speedIndex] + '×';

  function toggleSpeed() {
    const translations = languageTranslations[currentLang] || languageTranslations['zh'];    
    speedIndex = (speedIndex + 1) % speeds.length;

    const rate = speeds[speedIndex];
    audioPlayer.playbackRate = rate;
    speedLabel.textContent = rate + '×';
    localStorage.setItem('audioSpeed', rate);

    const speedMessage = translations['speed_change']
      ? translations['speed_change'].replace('{rate}', rate)
      : `Playback speed changed to ${rate}x`;
    showLogMessage(speedMessage);
    speakMessage(speedMessage);
  }

  speedToggle.addEventListener('click', e => {
    e.stopPropagation();
    toggleSpeed();
  });

  speedToggle.addEventListener('click', e => e.stopPropagation());

</script>

<script>
function updatemenu(){1==document.getElementById("responsive-menu").checked?(document.getElementById("menu").style.borderBottomRightRadius="0",document.getElementById("menu").style.borderBottomLeftRadius="0"):document.getElementById("menu").style.borderRadius="0px"}
</script>

</header>

	<div class="main">
		<div class="main-left" id="mainmenu" style="display:none">
			<div class="sidenav-header d-flex align-items-center">
				<a id="logo" href="#" class="royal-style"><%=brand_name%></a>	
				<div class="ml-auto">
					<!-- Sidenav toggler -->
					<div class="sidenav-toggler d-none d-xl-block active" data-action="sidenav-unpin"
						data-target="#sidenav-main">
						<div class="sidenav-toggler-inner">
							<i class="sidenav-toggler-line"></i>
							<i class="sidenav-toggler-line"></i>
							<i class="sidenav-toggler-line"></i>
						</div>
					</div>
				</div>
			</div>
		</div>
		<div class="main-right">
			
				
			
			<div class="darkMask"></div>
			<div id="maincontent">
				<div class="container">
					<%- if luci.sys.process.info("uid") == 0 and luci.sys.user.getuser("root") and not luci.sys.user.getpasswd("root") then -%>
					<div class="alert-message error">
						<h4><%:No password set!%></h4>
						<p><%:There is no password set on this router. Please configure a root password to protect the web interface.%>
						</p>
						<% if disp.lookup("admin/system/admin") then %>
						<div class="right"><a class="btn"
								href="<%=url("admin/system/admin")%>"><%:Go to password configuration...%></a></div>
						<% end %>
					</div>
					<%- end -%>

					<noscript>
						<div class="alert-message error">
							<h4><%:JavaScript required!%></h4>
							<p><%:You must enable JavaScript in your browser or LuCI will not work properly.%></p>
						</div>
					</noscript>

					<div id="tabmenu" style="display:none"></div>
